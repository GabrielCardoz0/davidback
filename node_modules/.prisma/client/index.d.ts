
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model addresses
 * 
 */
export type addresses = $Result.DefaultSelection<Prisma.$addressesPayload>
/**
 * Model colaborator_services
 * 
 */
export type colaborator_services = $Result.DefaultSelection<Prisma.$colaborator_servicesPayload>
/**
 * Model colaborators
 * 
 */
export type colaborators = $Result.DefaultSelection<Prisma.$colaboratorsPayload>
/**
 * Model form_services
 * 
 */
export type form_services = $Result.DefaultSelection<Prisma.$form_servicesPayload>
/**
 * Model forms
 * 
 */
export type forms = $Result.DefaultSelection<Prisma.$formsPayload>
/**
 * Model frequencies
 * 
 */
export type frequencies = $Result.DefaultSelection<Prisma.$frequenciesPayload>
/**
 * Model services
 * 
 */
export type services = $Result.DefaultSelection<Prisma.$servicesPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Addresses
 * const addresses = await prisma.addresses.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Addresses
   * const addresses = await prisma.addresses.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.addresses`: Exposes CRUD operations for the **addresses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.addresses.findMany()
    * ```
    */
  get addresses(): Prisma.addressesDelegate<ExtArgs>;

  /**
   * `prisma.colaborator_services`: Exposes CRUD operations for the **colaborator_services** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Colaborator_services
    * const colaborator_services = await prisma.colaborator_services.findMany()
    * ```
    */
  get colaborator_services(): Prisma.colaborator_servicesDelegate<ExtArgs>;

  /**
   * `prisma.colaborators`: Exposes CRUD operations for the **colaborators** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Colaborators
    * const colaborators = await prisma.colaborators.findMany()
    * ```
    */
  get colaborators(): Prisma.colaboratorsDelegate<ExtArgs>;

  /**
   * `prisma.form_services`: Exposes CRUD operations for the **form_services** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Form_services
    * const form_services = await prisma.form_services.findMany()
    * ```
    */
  get form_services(): Prisma.form_servicesDelegate<ExtArgs>;

  /**
   * `prisma.forms`: Exposes CRUD operations for the **forms** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Forms
    * const forms = await prisma.forms.findMany()
    * ```
    */
  get forms(): Prisma.formsDelegate<ExtArgs>;

  /**
   * `prisma.frequencies`: Exposes CRUD operations for the **frequencies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Frequencies
    * const frequencies = await prisma.frequencies.findMany()
    * ```
    */
  get frequencies(): Prisma.frequenciesDelegate<ExtArgs>;

  /**
   * `prisma.services`: Exposes CRUD operations for the **services** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Services
    * const services = await prisma.services.findMany()
    * ```
    */
  get services(): Prisma.servicesDelegate<ExtArgs>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.8.1
   * Query Engine version: 78caf6feeaed953168c64e15a249c3e9a033ebe2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    addresses: 'addresses',
    colaborator_services: 'colaborator_services',
    colaborators: 'colaborators',
    form_services: 'form_services',
    forms: 'forms',
    frequencies: 'frequencies',
    services: 'services',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'addresses' | 'colaborator_services' | 'colaborators' | 'form_services' | 'forms' | 'frequencies' | 'services' | 'users'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      addresses: {
        payload: Prisma.$addressesPayload<ExtArgs>
        fields: Prisma.addressesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.addressesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$addressesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.addressesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$addressesPayload>
          }
          findFirst: {
            args: Prisma.addressesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$addressesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.addressesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$addressesPayload>
          }
          findMany: {
            args: Prisma.addressesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$addressesPayload>[]
          }
          create: {
            args: Prisma.addressesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$addressesPayload>
          }
          createMany: {
            args: Prisma.addressesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.addressesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$addressesPayload>
          }
          update: {
            args: Prisma.addressesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$addressesPayload>
          }
          deleteMany: {
            args: Prisma.addressesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.addressesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.addressesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$addressesPayload>
          }
          aggregate: {
            args: Prisma.AddressesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAddresses>
          }
          groupBy: {
            args: Prisma.addressesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AddressesGroupByOutputType>[]
          }
          count: {
            args: Prisma.addressesCountArgs<ExtArgs>,
            result: $Utils.Optional<AddressesCountAggregateOutputType> | number
          }
        }
      }
      colaborator_services: {
        payload: Prisma.$colaborator_servicesPayload<ExtArgs>
        fields: Prisma.colaborator_servicesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.colaborator_servicesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$colaborator_servicesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.colaborator_servicesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$colaborator_servicesPayload>
          }
          findFirst: {
            args: Prisma.colaborator_servicesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$colaborator_servicesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.colaborator_servicesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$colaborator_servicesPayload>
          }
          findMany: {
            args: Prisma.colaborator_servicesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$colaborator_servicesPayload>[]
          }
          create: {
            args: Prisma.colaborator_servicesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$colaborator_servicesPayload>
          }
          createMany: {
            args: Prisma.colaborator_servicesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.colaborator_servicesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$colaborator_servicesPayload>
          }
          update: {
            args: Prisma.colaborator_servicesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$colaborator_servicesPayload>
          }
          deleteMany: {
            args: Prisma.colaborator_servicesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.colaborator_servicesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.colaborator_servicesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$colaborator_servicesPayload>
          }
          aggregate: {
            args: Prisma.Colaborator_servicesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateColaborator_services>
          }
          groupBy: {
            args: Prisma.colaborator_servicesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Colaborator_servicesGroupByOutputType>[]
          }
          count: {
            args: Prisma.colaborator_servicesCountArgs<ExtArgs>,
            result: $Utils.Optional<Colaborator_servicesCountAggregateOutputType> | number
          }
        }
      }
      colaborators: {
        payload: Prisma.$colaboratorsPayload<ExtArgs>
        fields: Prisma.colaboratorsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.colaboratorsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$colaboratorsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.colaboratorsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$colaboratorsPayload>
          }
          findFirst: {
            args: Prisma.colaboratorsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$colaboratorsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.colaboratorsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$colaboratorsPayload>
          }
          findMany: {
            args: Prisma.colaboratorsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$colaboratorsPayload>[]
          }
          create: {
            args: Prisma.colaboratorsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$colaboratorsPayload>
          }
          createMany: {
            args: Prisma.colaboratorsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.colaboratorsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$colaboratorsPayload>
          }
          update: {
            args: Prisma.colaboratorsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$colaboratorsPayload>
          }
          deleteMany: {
            args: Prisma.colaboratorsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.colaboratorsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.colaboratorsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$colaboratorsPayload>
          }
          aggregate: {
            args: Prisma.ColaboratorsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateColaborators>
          }
          groupBy: {
            args: Prisma.colaboratorsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ColaboratorsGroupByOutputType>[]
          }
          count: {
            args: Prisma.colaboratorsCountArgs<ExtArgs>,
            result: $Utils.Optional<ColaboratorsCountAggregateOutputType> | number
          }
        }
      }
      form_services: {
        payload: Prisma.$form_servicesPayload<ExtArgs>
        fields: Prisma.form_servicesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.form_servicesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$form_servicesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.form_servicesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$form_servicesPayload>
          }
          findFirst: {
            args: Prisma.form_servicesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$form_servicesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.form_servicesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$form_servicesPayload>
          }
          findMany: {
            args: Prisma.form_servicesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$form_servicesPayload>[]
          }
          create: {
            args: Prisma.form_servicesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$form_servicesPayload>
          }
          createMany: {
            args: Prisma.form_servicesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.form_servicesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$form_servicesPayload>
          }
          update: {
            args: Prisma.form_servicesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$form_servicesPayload>
          }
          deleteMany: {
            args: Prisma.form_servicesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.form_servicesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.form_servicesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$form_servicesPayload>
          }
          aggregate: {
            args: Prisma.Form_servicesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateForm_services>
          }
          groupBy: {
            args: Prisma.form_servicesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Form_servicesGroupByOutputType>[]
          }
          count: {
            args: Prisma.form_servicesCountArgs<ExtArgs>,
            result: $Utils.Optional<Form_servicesCountAggregateOutputType> | number
          }
        }
      }
      forms: {
        payload: Prisma.$formsPayload<ExtArgs>
        fields: Prisma.formsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.formsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$formsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.formsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$formsPayload>
          }
          findFirst: {
            args: Prisma.formsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$formsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.formsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$formsPayload>
          }
          findMany: {
            args: Prisma.formsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$formsPayload>[]
          }
          create: {
            args: Prisma.formsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$formsPayload>
          }
          createMany: {
            args: Prisma.formsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.formsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$formsPayload>
          }
          update: {
            args: Prisma.formsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$formsPayload>
          }
          deleteMany: {
            args: Prisma.formsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.formsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.formsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$formsPayload>
          }
          aggregate: {
            args: Prisma.FormsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateForms>
          }
          groupBy: {
            args: Prisma.formsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FormsGroupByOutputType>[]
          }
          count: {
            args: Prisma.formsCountArgs<ExtArgs>,
            result: $Utils.Optional<FormsCountAggregateOutputType> | number
          }
        }
      }
      frequencies: {
        payload: Prisma.$frequenciesPayload<ExtArgs>
        fields: Prisma.frequenciesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.frequenciesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$frequenciesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.frequenciesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$frequenciesPayload>
          }
          findFirst: {
            args: Prisma.frequenciesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$frequenciesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.frequenciesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$frequenciesPayload>
          }
          findMany: {
            args: Prisma.frequenciesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$frequenciesPayload>[]
          }
          create: {
            args: Prisma.frequenciesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$frequenciesPayload>
          }
          createMany: {
            args: Prisma.frequenciesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.frequenciesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$frequenciesPayload>
          }
          update: {
            args: Prisma.frequenciesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$frequenciesPayload>
          }
          deleteMany: {
            args: Prisma.frequenciesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.frequenciesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.frequenciesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$frequenciesPayload>
          }
          aggregate: {
            args: Prisma.FrequenciesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFrequencies>
          }
          groupBy: {
            args: Prisma.frequenciesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FrequenciesGroupByOutputType>[]
          }
          count: {
            args: Prisma.frequenciesCountArgs<ExtArgs>,
            result: $Utils.Optional<FrequenciesCountAggregateOutputType> | number
          }
        }
      }
      services: {
        payload: Prisma.$servicesPayload<ExtArgs>
        fields: Prisma.servicesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.servicesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$servicesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.servicesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$servicesPayload>
          }
          findFirst: {
            args: Prisma.servicesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$servicesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.servicesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$servicesPayload>
          }
          findMany: {
            args: Prisma.servicesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$servicesPayload>[]
          }
          create: {
            args: Prisma.servicesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$servicesPayload>
          }
          createMany: {
            args: Prisma.servicesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.servicesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$servicesPayload>
          }
          update: {
            args: Prisma.servicesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$servicesPayload>
          }
          deleteMany: {
            args: Prisma.servicesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.servicesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.servicesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$servicesPayload>
          }
          aggregate: {
            args: Prisma.ServicesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateServices>
          }
          groupBy: {
            args: Prisma.servicesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ServicesGroupByOutputType>[]
          }
          count: {
            args: Prisma.servicesCountArgs<ExtArgs>,
            result: $Utils.Optional<ServicesCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AddressesCountOutputType
   */

  export type AddressesCountOutputType = {
    colaborators: number
  }

  export type AddressesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colaborators?: boolean | AddressesCountOutputTypeCountColaboratorsArgs
  }

  // Custom InputTypes

  /**
   * AddressesCountOutputType without action
   */
  export type AddressesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressesCountOutputType
     */
    select?: AddressesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AddressesCountOutputType without action
   */
  export type AddressesCountOutputTypeCountColaboratorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: colaboratorsWhereInput
  }



  /**
   * Count Type ColaboratorsCountOutputType
   */

  export type ColaboratorsCountOutputType = {
    colaborator_services: number
  }

  export type ColaboratorsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colaborator_services?: boolean | ColaboratorsCountOutputTypeCountColaborator_servicesArgs
  }

  // Custom InputTypes

  /**
   * ColaboratorsCountOutputType without action
   */
  export type ColaboratorsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColaboratorsCountOutputType
     */
    select?: ColaboratorsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ColaboratorsCountOutputType without action
   */
  export type ColaboratorsCountOutputTypeCountColaborator_servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: colaborator_servicesWhereInput
  }



  /**
   * Count Type FormsCountOutputType
   */

  export type FormsCountOutputType = {
    colaborators: number
    form_services: number
  }

  export type FormsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colaborators?: boolean | FormsCountOutputTypeCountColaboratorsArgs
    form_services?: boolean | FormsCountOutputTypeCountForm_servicesArgs
  }

  // Custom InputTypes

  /**
   * FormsCountOutputType without action
   */
  export type FormsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormsCountOutputType
     */
    select?: FormsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * FormsCountOutputType without action
   */
  export type FormsCountOutputTypeCountColaboratorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: colaboratorsWhereInput
  }


  /**
   * FormsCountOutputType without action
   */
  export type FormsCountOutputTypeCountForm_servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: form_servicesWhereInput
  }



  /**
   * Count Type FrequenciesCountOutputType
   */

  export type FrequenciesCountOutputType = {
    colaborator_services: number
  }

  export type FrequenciesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colaborator_services?: boolean | FrequenciesCountOutputTypeCountColaborator_servicesArgs
  }

  // Custom InputTypes

  /**
   * FrequenciesCountOutputType without action
   */
  export type FrequenciesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrequenciesCountOutputType
     */
    select?: FrequenciesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * FrequenciesCountOutputType without action
   */
  export type FrequenciesCountOutputTypeCountColaborator_servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: colaborator_servicesWhereInput
  }



  /**
   * Count Type ServicesCountOutputType
   */

  export type ServicesCountOutputType = {
    colaborator_services: number
    form_services: number
    frequencies: number
  }

  export type ServicesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colaborator_services?: boolean | ServicesCountOutputTypeCountColaborator_servicesArgs
    form_services?: boolean | ServicesCountOutputTypeCountForm_servicesArgs
    frequencies?: boolean | ServicesCountOutputTypeCountFrequenciesArgs
  }

  // Custom InputTypes

  /**
   * ServicesCountOutputType without action
   */
  export type ServicesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicesCountOutputType
     */
    select?: ServicesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ServicesCountOutputType without action
   */
  export type ServicesCountOutputTypeCountColaborator_servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: colaborator_servicesWhereInput
  }


  /**
   * ServicesCountOutputType without action
   */
  export type ServicesCountOutputTypeCountForm_servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: form_servicesWhereInput
  }


  /**
   * ServicesCountOutputType without action
   */
  export type ServicesCountOutputTypeCountFrequenciesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: frequenciesWhereInput
  }



  /**
   * Models
   */

  /**
   * Model addresses
   */

  export type AggregateAddresses = {
    _count: AddressesCountAggregateOutputType | null
    _avg: AddressesAvgAggregateOutputType | null
    _sum: AddressesSumAggregateOutputType | null
    _min: AddressesMinAggregateOutputType | null
    _max: AddressesMaxAggregateOutputType | null
  }

  export type AddressesAvgAggregateOutputType = {
    id: number | null
  }

  export type AddressesSumAggregateOutputType = {
    id: number | null
  }

  export type AddressesMinAggregateOutputType = {
    id: number | null
    cep: string | null
    street: string | null
    neighborhood: string | null
    city: string | null
    state: string | null
    number: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type AddressesMaxAggregateOutputType = {
    id: number | null
    cep: string | null
    street: string | null
    neighborhood: string | null
    city: string | null
    state: string | null
    number: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type AddressesCountAggregateOutputType = {
    id: number
    cep: number
    street: number
    neighborhood: number
    city: number
    state: number
    number: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type AddressesAvgAggregateInputType = {
    id?: true
  }

  export type AddressesSumAggregateInputType = {
    id?: true
  }

  export type AddressesMinAggregateInputType = {
    id?: true
    cep?: true
    street?: true
    neighborhood?: true
    city?: true
    state?: true
    number?: true
    created_at?: true
    updated_at?: true
  }

  export type AddressesMaxAggregateInputType = {
    id?: true
    cep?: true
    street?: true
    neighborhood?: true
    city?: true
    state?: true
    number?: true
    created_at?: true
    updated_at?: true
  }

  export type AddressesCountAggregateInputType = {
    id?: true
    cep?: true
    street?: true
    neighborhood?: true
    city?: true
    state?: true
    number?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type AddressesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which addresses to aggregate.
     */
    where?: addressesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of addresses to fetch.
     */
    orderBy?: addressesOrderByWithRelationInput | addressesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: addressesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned addresses
    **/
    _count?: true | AddressesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AddressesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AddressesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressesMaxAggregateInputType
  }

  export type GetAddressesAggregateType<T extends AddressesAggregateArgs> = {
        [P in keyof T & keyof AggregateAddresses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddresses[P]>
      : GetScalarType<T[P], AggregateAddresses[P]>
  }




  export type addressesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: addressesWhereInput
    orderBy?: addressesOrderByWithAggregationInput | addressesOrderByWithAggregationInput[]
    by: AddressesScalarFieldEnum[] | AddressesScalarFieldEnum
    having?: addressesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressesCountAggregateInputType | true
    _avg?: AddressesAvgAggregateInputType
    _sum?: AddressesSumAggregateInputType
    _min?: AddressesMinAggregateInputType
    _max?: AddressesMaxAggregateInputType
  }

  export type AddressesGroupByOutputType = {
    id: number
    cep: string
    street: string
    neighborhood: string
    city: string
    state: string
    number: string
    created_at: Date
    updated_at: Date
    _count: AddressesCountAggregateOutputType | null
    _avg: AddressesAvgAggregateOutputType | null
    _sum: AddressesSumAggregateOutputType | null
    _min: AddressesMinAggregateOutputType | null
    _max: AddressesMaxAggregateOutputType | null
  }

  type GetAddressesGroupByPayload<T extends addressesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AddressesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressesGroupByOutputType[P]>
            : GetScalarType<T[P], AddressesGroupByOutputType[P]>
        }
      >
    >


  export type addressesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cep?: boolean
    street?: boolean
    neighborhood?: boolean
    city?: boolean
    state?: boolean
    number?: boolean
    created_at?: boolean
    updated_at?: boolean
    colaborators?: boolean | addresses$colaboratorsArgs<ExtArgs>
    _count?: boolean | AddressesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["addresses"]>

  export type addressesSelectScalar = {
    id?: boolean
    cep?: boolean
    street?: boolean
    neighborhood?: boolean
    city?: boolean
    state?: boolean
    number?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type addressesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colaborators?: boolean | addresses$colaboratorsArgs<ExtArgs>
    _count?: boolean | AddressesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $addressesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "addresses"
    objects: {
      colaborators: Prisma.$colaboratorsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      cep: string
      street: string
      neighborhood: string
      city: string
      state: string
      number: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["addresses"]>
    composites: {}
  }


  type addressesGetPayload<S extends boolean | null | undefined | addressesDefaultArgs> = $Result.GetResult<Prisma.$addressesPayload, S>

  type addressesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<addressesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AddressesCountAggregateInputType | true
    }

  export interface addressesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['addresses'], meta: { name: 'addresses' } }
    /**
     * Find zero or one Addresses that matches the filter.
     * @param {addressesFindUniqueArgs} args - Arguments to find a Addresses
     * @example
     * // Get one Addresses
     * const addresses = await prisma.addresses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends addressesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, addressesFindUniqueArgs<ExtArgs>>
    ): Prisma__addressesClient<$Result.GetResult<Prisma.$addressesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Addresses that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {addressesFindUniqueOrThrowArgs} args - Arguments to find a Addresses
     * @example
     * // Get one Addresses
     * const addresses = await prisma.addresses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends addressesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, addressesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__addressesClient<$Result.GetResult<Prisma.$addressesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressesFindFirstArgs} args - Arguments to find a Addresses
     * @example
     * // Get one Addresses
     * const addresses = await prisma.addresses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends addressesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, addressesFindFirstArgs<ExtArgs>>
    ): Prisma__addressesClient<$Result.GetResult<Prisma.$addressesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Addresses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressesFindFirstOrThrowArgs} args - Arguments to find a Addresses
     * @example
     * // Get one Addresses
     * const addresses = await prisma.addresses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends addressesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, addressesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__addressesClient<$Result.GetResult<Prisma.$addressesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.addresses.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.addresses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressesWithIdOnly = await prisma.addresses.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends addressesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, addressesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$addressesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Addresses.
     * @param {addressesCreateArgs} args - Arguments to create a Addresses.
     * @example
     * // Create one Addresses
     * const Addresses = await prisma.addresses.create({
     *   data: {
     *     // ... data to create a Addresses
     *   }
     * })
     * 
    **/
    create<T extends addressesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, addressesCreateArgs<ExtArgs>>
    ): Prisma__addressesClient<$Result.GetResult<Prisma.$addressesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Addresses.
     *     @param {addressesCreateManyArgs} args - Arguments to create many Addresses.
     *     @example
     *     // Create many Addresses
     *     const addresses = await prisma.addresses.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends addressesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, addressesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Addresses.
     * @param {addressesDeleteArgs} args - Arguments to delete one Addresses.
     * @example
     * // Delete one Addresses
     * const Addresses = await prisma.addresses.delete({
     *   where: {
     *     // ... filter to delete one Addresses
     *   }
     * })
     * 
    **/
    delete<T extends addressesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, addressesDeleteArgs<ExtArgs>>
    ): Prisma__addressesClient<$Result.GetResult<Prisma.$addressesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Addresses.
     * @param {addressesUpdateArgs} args - Arguments to update one Addresses.
     * @example
     * // Update one Addresses
     * const addresses = await prisma.addresses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends addressesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, addressesUpdateArgs<ExtArgs>>
    ): Prisma__addressesClient<$Result.GetResult<Prisma.$addressesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Addresses.
     * @param {addressesDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.addresses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends addressesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, addressesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const addresses = await prisma.addresses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends addressesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, addressesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Addresses.
     * @param {addressesUpsertArgs} args - Arguments to update or create a Addresses.
     * @example
     * // Update or create a Addresses
     * const addresses = await prisma.addresses.upsert({
     *   create: {
     *     // ... data to create a Addresses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Addresses we want to update
     *   }
     * })
    **/
    upsert<T extends addressesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, addressesUpsertArgs<ExtArgs>>
    ): Prisma__addressesClient<$Result.GetResult<Prisma.$addressesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressesCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.addresses.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends addressesCountArgs>(
      args?: Subset<T, addressesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressesAggregateArgs>(args: Subset<T, AddressesAggregateArgs>): Prisma.PrismaPromise<GetAddressesAggregateType<T>>

    /**
     * Group by Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends addressesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: addressesGroupByArgs['orderBy'] }
        : { orderBy?: addressesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, addressesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the addresses model
   */
  readonly fields: addressesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for addresses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__addressesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    colaborators<T extends addresses$colaboratorsArgs<ExtArgs> = {}>(args?: Subset<T, addresses$colaboratorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$colaboratorsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the addresses model
   */ 
  interface addressesFieldRefs {
    readonly id: FieldRef<"addresses", 'Int'>
    readonly cep: FieldRef<"addresses", 'String'>
    readonly street: FieldRef<"addresses", 'String'>
    readonly neighborhood: FieldRef<"addresses", 'String'>
    readonly city: FieldRef<"addresses", 'String'>
    readonly state: FieldRef<"addresses", 'String'>
    readonly number: FieldRef<"addresses", 'String'>
    readonly created_at: FieldRef<"addresses", 'DateTime'>
    readonly updated_at: FieldRef<"addresses", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * addresses findUnique
   */
  export type addressesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addresses
     */
    select?: addressesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addressesInclude<ExtArgs> | null
    /**
     * Filter, which addresses to fetch.
     */
    where: addressesWhereUniqueInput
  }


  /**
   * addresses findUniqueOrThrow
   */
  export type addressesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addresses
     */
    select?: addressesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addressesInclude<ExtArgs> | null
    /**
     * Filter, which addresses to fetch.
     */
    where: addressesWhereUniqueInput
  }


  /**
   * addresses findFirst
   */
  export type addressesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addresses
     */
    select?: addressesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addressesInclude<ExtArgs> | null
    /**
     * Filter, which addresses to fetch.
     */
    where?: addressesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of addresses to fetch.
     */
    orderBy?: addressesOrderByWithRelationInput | addressesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for addresses.
     */
    cursor?: addressesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of addresses.
     */
    distinct?: AddressesScalarFieldEnum | AddressesScalarFieldEnum[]
  }


  /**
   * addresses findFirstOrThrow
   */
  export type addressesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addresses
     */
    select?: addressesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addressesInclude<ExtArgs> | null
    /**
     * Filter, which addresses to fetch.
     */
    where?: addressesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of addresses to fetch.
     */
    orderBy?: addressesOrderByWithRelationInput | addressesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for addresses.
     */
    cursor?: addressesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of addresses.
     */
    distinct?: AddressesScalarFieldEnum | AddressesScalarFieldEnum[]
  }


  /**
   * addresses findMany
   */
  export type addressesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addresses
     */
    select?: addressesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addressesInclude<ExtArgs> | null
    /**
     * Filter, which addresses to fetch.
     */
    where?: addressesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of addresses to fetch.
     */
    orderBy?: addressesOrderByWithRelationInput | addressesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing addresses.
     */
    cursor?: addressesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` addresses.
     */
    skip?: number
    distinct?: AddressesScalarFieldEnum | AddressesScalarFieldEnum[]
  }


  /**
   * addresses create
   */
  export type addressesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addresses
     */
    select?: addressesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addressesInclude<ExtArgs> | null
    /**
     * The data needed to create a addresses.
     */
    data: XOR<addressesCreateInput, addressesUncheckedCreateInput>
  }


  /**
   * addresses createMany
   */
  export type addressesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many addresses.
     */
    data: addressesCreateManyInput | addressesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * addresses update
   */
  export type addressesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addresses
     */
    select?: addressesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addressesInclude<ExtArgs> | null
    /**
     * The data needed to update a addresses.
     */
    data: XOR<addressesUpdateInput, addressesUncheckedUpdateInput>
    /**
     * Choose, which addresses to update.
     */
    where: addressesWhereUniqueInput
  }


  /**
   * addresses updateMany
   */
  export type addressesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update addresses.
     */
    data: XOR<addressesUpdateManyMutationInput, addressesUncheckedUpdateManyInput>
    /**
     * Filter which addresses to update
     */
    where?: addressesWhereInput
  }


  /**
   * addresses upsert
   */
  export type addressesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addresses
     */
    select?: addressesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addressesInclude<ExtArgs> | null
    /**
     * The filter to search for the addresses to update in case it exists.
     */
    where: addressesWhereUniqueInput
    /**
     * In case the addresses found by the `where` argument doesn't exist, create a new addresses with this data.
     */
    create: XOR<addressesCreateInput, addressesUncheckedCreateInput>
    /**
     * In case the addresses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<addressesUpdateInput, addressesUncheckedUpdateInput>
  }


  /**
   * addresses delete
   */
  export type addressesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addresses
     */
    select?: addressesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addressesInclude<ExtArgs> | null
    /**
     * Filter which addresses to delete.
     */
    where: addressesWhereUniqueInput
  }


  /**
   * addresses deleteMany
   */
  export type addressesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which addresses to delete
     */
    where?: addressesWhereInput
  }


  /**
   * addresses.colaborators
   */
  export type addresses$colaboratorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborators
     */
    select?: colaboratorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaboratorsInclude<ExtArgs> | null
    where?: colaboratorsWhereInput
    orderBy?: colaboratorsOrderByWithRelationInput | colaboratorsOrderByWithRelationInput[]
    cursor?: colaboratorsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ColaboratorsScalarFieldEnum | ColaboratorsScalarFieldEnum[]
  }


  /**
   * addresses without action
   */
  export type addressesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addresses
     */
    select?: addressesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addressesInclude<ExtArgs> | null
  }



  /**
   * Model colaborator_services
   */

  export type AggregateColaborator_services = {
    _count: Colaborator_servicesCountAggregateOutputType | null
    _avg: Colaborator_servicesAvgAggregateOutputType | null
    _sum: Colaborator_servicesSumAggregateOutputType | null
    _min: Colaborator_servicesMinAggregateOutputType | null
    _max: Colaborator_servicesMaxAggregateOutputType | null
  }

  export type Colaborator_servicesAvgAggregateOutputType = {
    id: number | null
    colaborator_id: number | null
    service_id: number | null
    frequency_id: number | null
  }

  export type Colaborator_servicesSumAggregateOutputType = {
    id: number | null
    colaborator_id: number | null
    service_id: number | null
    frequency_id: number | null
  }

  export type Colaborator_servicesMinAggregateOutputType = {
    id: number | null
    colaborator_id: number | null
    service_id: number | null
    frequency_id: number | null
  }

  export type Colaborator_servicesMaxAggregateOutputType = {
    id: number | null
    colaborator_id: number | null
    service_id: number | null
    frequency_id: number | null
  }

  export type Colaborator_servicesCountAggregateOutputType = {
    id: number
    colaborator_id: number
    service_id: number
    frequency_id: number
    _all: number
  }


  export type Colaborator_servicesAvgAggregateInputType = {
    id?: true
    colaborator_id?: true
    service_id?: true
    frequency_id?: true
  }

  export type Colaborator_servicesSumAggregateInputType = {
    id?: true
    colaborator_id?: true
    service_id?: true
    frequency_id?: true
  }

  export type Colaborator_servicesMinAggregateInputType = {
    id?: true
    colaborator_id?: true
    service_id?: true
    frequency_id?: true
  }

  export type Colaborator_servicesMaxAggregateInputType = {
    id?: true
    colaborator_id?: true
    service_id?: true
    frequency_id?: true
  }

  export type Colaborator_servicesCountAggregateInputType = {
    id?: true
    colaborator_id?: true
    service_id?: true
    frequency_id?: true
    _all?: true
  }

  export type Colaborator_servicesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which colaborator_services to aggregate.
     */
    where?: colaborator_servicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of colaborator_services to fetch.
     */
    orderBy?: colaborator_servicesOrderByWithRelationInput | colaborator_servicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: colaborator_servicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` colaborator_services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` colaborator_services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned colaborator_services
    **/
    _count?: true | Colaborator_servicesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Colaborator_servicesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Colaborator_servicesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Colaborator_servicesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Colaborator_servicesMaxAggregateInputType
  }

  export type GetColaborator_servicesAggregateType<T extends Colaborator_servicesAggregateArgs> = {
        [P in keyof T & keyof AggregateColaborator_services]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateColaborator_services[P]>
      : GetScalarType<T[P], AggregateColaborator_services[P]>
  }




  export type colaborator_servicesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: colaborator_servicesWhereInput
    orderBy?: colaborator_servicesOrderByWithAggregationInput | colaborator_servicesOrderByWithAggregationInput[]
    by: Colaborator_servicesScalarFieldEnum[] | Colaborator_servicesScalarFieldEnum
    having?: colaborator_servicesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Colaborator_servicesCountAggregateInputType | true
    _avg?: Colaborator_servicesAvgAggregateInputType
    _sum?: Colaborator_servicesSumAggregateInputType
    _min?: Colaborator_servicesMinAggregateInputType
    _max?: Colaborator_servicesMaxAggregateInputType
  }

  export type Colaborator_servicesGroupByOutputType = {
    id: number
    colaborator_id: number
    service_id: number
    frequency_id: number
    _count: Colaborator_servicesCountAggregateOutputType | null
    _avg: Colaborator_servicesAvgAggregateOutputType | null
    _sum: Colaborator_servicesSumAggregateOutputType | null
    _min: Colaborator_servicesMinAggregateOutputType | null
    _max: Colaborator_servicesMaxAggregateOutputType | null
  }

  type GetColaborator_servicesGroupByPayload<T extends colaborator_servicesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Colaborator_servicesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Colaborator_servicesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Colaborator_servicesGroupByOutputType[P]>
            : GetScalarType<T[P], Colaborator_servicesGroupByOutputType[P]>
        }
      >
    >


  export type colaborator_servicesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    colaborator_id?: boolean
    service_id?: boolean
    frequency_id?: boolean
    colaborators?: boolean | colaboratorsDefaultArgs<ExtArgs>
    services?: boolean | servicesDefaultArgs<ExtArgs>
    frequencies?: boolean | frequenciesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["colaborator_services"]>

  export type colaborator_servicesSelectScalar = {
    id?: boolean
    colaborator_id?: boolean
    service_id?: boolean
    frequency_id?: boolean
  }

  export type colaborator_servicesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colaborators?: boolean | colaboratorsDefaultArgs<ExtArgs>
    services?: boolean | servicesDefaultArgs<ExtArgs>
    frequencies?: boolean | frequenciesDefaultArgs<ExtArgs>
  }


  export type $colaborator_servicesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "colaborator_services"
    objects: {
      colaborators: Prisma.$colaboratorsPayload<ExtArgs>
      services: Prisma.$servicesPayload<ExtArgs>
      frequencies: Prisma.$frequenciesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      colaborator_id: number
      service_id: number
      frequency_id: number
    }, ExtArgs["result"]["colaborator_services"]>
    composites: {}
  }


  type colaborator_servicesGetPayload<S extends boolean | null | undefined | colaborator_servicesDefaultArgs> = $Result.GetResult<Prisma.$colaborator_servicesPayload, S>

  type colaborator_servicesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<colaborator_servicesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Colaborator_servicesCountAggregateInputType | true
    }

  export interface colaborator_servicesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['colaborator_services'], meta: { name: 'colaborator_services' } }
    /**
     * Find zero or one Colaborator_services that matches the filter.
     * @param {colaborator_servicesFindUniqueArgs} args - Arguments to find a Colaborator_services
     * @example
     * // Get one Colaborator_services
     * const colaborator_services = await prisma.colaborator_services.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends colaborator_servicesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, colaborator_servicesFindUniqueArgs<ExtArgs>>
    ): Prisma__colaborator_servicesClient<$Result.GetResult<Prisma.$colaborator_servicesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Colaborator_services that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {colaborator_servicesFindUniqueOrThrowArgs} args - Arguments to find a Colaborator_services
     * @example
     * // Get one Colaborator_services
     * const colaborator_services = await prisma.colaborator_services.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends colaborator_servicesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, colaborator_servicesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__colaborator_servicesClient<$Result.GetResult<Prisma.$colaborator_servicesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Colaborator_services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {colaborator_servicesFindFirstArgs} args - Arguments to find a Colaborator_services
     * @example
     * // Get one Colaborator_services
     * const colaborator_services = await prisma.colaborator_services.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends colaborator_servicesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, colaborator_servicesFindFirstArgs<ExtArgs>>
    ): Prisma__colaborator_servicesClient<$Result.GetResult<Prisma.$colaborator_servicesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Colaborator_services that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {colaborator_servicesFindFirstOrThrowArgs} args - Arguments to find a Colaborator_services
     * @example
     * // Get one Colaborator_services
     * const colaborator_services = await prisma.colaborator_services.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends colaborator_servicesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, colaborator_servicesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__colaborator_servicesClient<$Result.GetResult<Prisma.$colaborator_servicesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Colaborator_services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {colaborator_servicesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Colaborator_services
     * const colaborator_services = await prisma.colaborator_services.findMany()
     * 
     * // Get first 10 Colaborator_services
     * const colaborator_services = await prisma.colaborator_services.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const colaborator_servicesWithIdOnly = await prisma.colaborator_services.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends colaborator_servicesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, colaborator_servicesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$colaborator_servicesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Colaborator_services.
     * @param {colaborator_servicesCreateArgs} args - Arguments to create a Colaborator_services.
     * @example
     * // Create one Colaborator_services
     * const Colaborator_services = await prisma.colaborator_services.create({
     *   data: {
     *     // ... data to create a Colaborator_services
     *   }
     * })
     * 
    **/
    create<T extends colaborator_servicesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, colaborator_servicesCreateArgs<ExtArgs>>
    ): Prisma__colaborator_servicesClient<$Result.GetResult<Prisma.$colaborator_servicesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Colaborator_services.
     *     @param {colaborator_servicesCreateManyArgs} args - Arguments to create many Colaborator_services.
     *     @example
     *     // Create many Colaborator_services
     *     const colaborator_services = await prisma.colaborator_services.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends colaborator_servicesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, colaborator_servicesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Colaborator_services.
     * @param {colaborator_servicesDeleteArgs} args - Arguments to delete one Colaborator_services.
     * @example
     * // Delete one Colaborator_services
     * const Colaborator_services = await prisma.colaborator_services.delete({
     *   where: {
     *     // ... filter to delete one Colaborator_services
     *   }
     * })
     * 
    **/
    delete<T extends colaborator_servicesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, colaborator_servicesDeleteArgs<ExtArgs>>
    ): Prisma__colaborator_servicesClient<$Result.GetResult<Prisma.$colaborator_servicesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Colaborator_services.
     * @param {colaborator_servicesUpdateArgs} args - Arguments to update one Colaborator_services.
     * @example
     * // Update one Colaborator_services
     * const colaborator_services = await prisma.colaborator_services.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends colaborator_servicesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, colaborator_servicesUpdateArgs<ExtArgs>>
    ): Prisma__colaborator_servicesClient<$Result.GetResult<Prisma.$colaborator_servicesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Colaborator_services.
     * @param {colaborator_servicesDeleteManyArgs} args - Arguments to filter Colaborator_services to delete.
     * @example
     * // Delete a few Colaborator_services
     * const { count } = await prisma.colaborator_services.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends colaborator_servicesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, colaborator_servicesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Colaborator_services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {colaborator_servicesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Colaborator_services
     * const colaborator_services = await prisma.colaborator_services.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends colaborator_servicesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, colaborator_servicesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Colaborator_services.
     * @param {colaborator_servicesUpsertArgs} args - Arguments to update or create a Colaborator_services.
     * @example
     * // Update or create a Colaborator_services
     * const colaborator_services = await prisma.colaborator_services.upsert({
     *   create: {
     *     // ... data to create a Colaborator_services
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Colaborator_services we want to update
     *   }
     * })
    **/
    upsert<T extends colaborator_servicesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, colaborator_servicesUpsertArgs<ExtArgs>>
    ): Prisma__colaborator_servicesClient<$Result.GetResult<Prisma.$colaborator_servicesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Colaborator_services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {colaborator_servicesCountArgs} args - Arguments to filter Colaborator_services to count.
     * @example
     * // Count the number of Colaborator_services
     * const count = await prisma.colaborator_services.count({
     *   where: {
     *     // ... the filter for the Colaborator_services we want to count
     *   }
     * })
    **/
    count<T extends colaborator_servicesCountArgs>(
      args?: Subset<T, colaborator_servicesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Colaborator_servicesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Colaborator_services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Colaborator_servicesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Colaborator_servicesAggregateArgs>(args: Subset<T, Colaborator_servicesAggregateArgs>): Prisma.PrismaPromise<GetColaborator_servicesAggregateType<T>>

    /**
     * Group by Colaborator_services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {colaborator_servicesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends colaborator_servicesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: colaborator_servicesGroupByArgs['orderBy'] }
        : { orderBy?: colaborator_servicesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, colaborator_servicesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetColaborator_servicesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the colaborator_services model
   */
  readonly fields: colaborator_servicesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for colaborator_services.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__colaborator_servicesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    colaborators<T extends colaboratorsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, colaboratorsDefaultArgs<ExtArgs>>): Prisma__colaboratorsClient<$Result.GetResult<Prisma.$colaboratorsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    services<T extends servicesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, servicesDefaultArgs<ExtArgs>>): Prisma__servicesClient<$Result.GetResult<Prisma.$servicesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    frequencies<T extends frequenciesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, frequenciesDefaultArgs<ExtArgs>>): Prisma__frequenciesClient<$Result.GetResult<Prisma.$frequenciesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the colaborator_services model
   */ 
  interface colaborator_servicesFieldRefs {
    readonly id: FieldRef<"colaborator_services", 'Int'>
    readonly colaborator_id: FieldRef<"colaborator_services", 'Int'>
    readonly service_id: FieldRef<"colaborator_services", 'Int'>
    readonly frequency_id: FieldRef<"colaborator_services", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * colaborator_services findUnique
   */
  export type colaborator_servicesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborator_services
     */
    select?: colaborator_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaborator_servicesInclude<ExtArgs> | null
    /**
     * Filter, which colaborator_services to fetch.
     */
    where: colaborator_servicesWhereUniqueInput
  }


  /**
   * colaborator_services findUniqueOrThrow
   */
  export type colaborator_servicesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborator_services
     */
    select?: colaborator_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaborator_servicesInclude<ExtArgs> | null
    /**
     * Filter, which colaborator_services to fetch.
     */
    where: colaborator_servicesWhereUniqueInput
  }


  /**
   * colaborator_services findFirst
   */
  export type colaborator_servicesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborator_services
     */
    select?: colaborator_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaborator_servicesInclude<ExtArgs> | null
    /**
     * Filter, which colaborator_services to fetch.
     */
    where?: colaborator_servicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of colaborator_services to fetch.
     */
    orderBy?: colaborator_servicesOrderByWithRelationInput | colaborator_servicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for colaborator_services.
     */
    cursor?: colaborator_servicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` colaborator_services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` colaborator_services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of colaborator_services.
     */
    distinct?: Colaborator_servicesScalarFieldEnum | Colaborator_servicesScalarFieldEnum[]
  }


  /**
   * colaborator_services findFirstOrThrow
   */
  export type colaborator_servicesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborator_services
     */
    select?: colaborator_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaborator_servicesInclude<ExtArgs> | null
    /**
     * Filter, which colaborator_services to fetch.
     */
    where?: colaborator_servicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of colaborator_services to fetch.
     */
    orderBy?: colaborator_servicesOrderByWithRelationInput | colaborator_servicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for colaborator_services.
     */
    cursor?: colaborator_servicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` colaborator_services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` colaborator_services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of colaborator_services.
     */
    distinct?: Colaborator_servicesScalarFieldEnum | Colaborator_servicesScalarFieldEnum[]
  }


  /**
   * colaborator_services findMany
   */
  export type colaborator_servicesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborator_services
     */
    select?: colaborator_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaborator_servicesInclude<ExtArgs> | null
    /**
     * Filter, which colaborator_services to fetch.
     */
    where?: colaborator_servicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of colaborator_services to fetch.
     */
    orderBy?: colaborator_servicesOrderByWithRelationInput | colaborator_servicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing colaborator_services.
     */
    cursor?: colaborator_servicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` colaborator_services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` colaborator_services.
     */
    skip?: number
    distinct?: Colaborator_servicesScalarFieldEnum | Colaborator_servicesScalarFieldEnum[]
  }


  /**
   * colaborator_services create
   */
  export type colaborator_servicesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborator_services
     */
    select?: colaborator_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaborator_servicesInclude<ExtArgs> | null
    /**
     * The data needed to create a colaborator_services.
     */
    data: XOR<colaborator_servicesCreateInput, colaborator_servicesUncheckedCreateInput>
  }


  /**
   * colaborator_services createMany
   */
  export type colaborator_servicesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many colaborator_services.
     */
    data: colaborator_servicesCreateManyInput | colaborator_servicesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * colaborator_services update
   */
  export type colaborator_servicesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborator_services
     */
    select?: colaborator_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaborator_servicesInclude<ExtArgs> | null
    /**
     * The data needed to update a colaborator_services.
     */
    data: XOR<colaborator_servicesUpdateInput, colaborator_servicesUncheckedUpdateInput>
    /**
     * Choose, which colaborator_services to update.
     */
    where: colaborator_servicesWhereUniqueInput
  }


  /**
   * colaborator_services updateMany
   */
  export type colaborator_servicesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update colaborator_services.
     */
    data: XOR<colaborator_servicesUpdateManyMutationInput, colaborator_servicesUncheckedUpdateManyInput>
    /**
     * Filter which colaborator_services to update
     */
    where?: colaborator_servicesWhereInput
  }


  /**
   * colaborator_services upsert
   */
  export type colaborator_servicesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborator_services
     */
    select?: colaborator_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaborator_servicesInclude<ExtArgs> | null
    /**
     * The filter to search for the colaborator_services to update in case it exists.
     */
    where: colaborator_servicesWhereUniqueInput
    /**
     * In case the colaborator_services found by the `where` argument doesn't exist, create a new colaborator_services with this data.
     */
    create: XOR<colaborator_servicesCreateInput, colaborator_servicesUncheckedCreateInput>
    /**
     * In case the colaborator_services was found with the provided `where` argument, update it with this data.
     */
    update: XOR<colaborator_servicesUpdateInput, colaborator_servicesUncheckedUpdateInput>
  }


  /**
   * colaborator_services delete
   */
  export type colaborator_servicesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborator_services
     */
    select?: colaborator_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaborator_servicesInclude<ExtArgs> | null
    /**
     * Filter which colaborator_services to delete.
     */
    where: colaborator_servicesWhereUniqueInput
  }


  /**
   * colaborator_services deleteMany
   */
  export type colaborator_servicesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which colaborator_services to delete
     */
    where?: colaborator_servicesWhereInput
  }


  /**
   * colaborator_services without action
   */
  export type colaborator_servicesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborator_services
     */
    select?: colaborator_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaborator_servicesInclude<ExtArgs> | null
  }



  /**
   * Model colaborators
   */

  export type AggregateColaborators = {
    _count: ColaboratorsCountAggregateOutputType | null
    _avg: ColaboratorsAvgAggregateOutputType | null
    _sum: ColaboratorsSumAggregateOutputType | null
    _min: ColaboratorsMinAggregateOutputType | null
    _max: ColaboratorsMaxAggregateOutputType | null
  }

  export type ColaboratorsAvgAggregateOutputType = {
    id: number | null
    form_id: number | null
    address_id: number | null
  }

  export type ColaboratorsSumAggregateOutputType = {
    id: number | null
    form_id: number | null
    address_id: number | null
  }

  export type ColaboratorsMinAggregateOutputType = {
    id: number | null
    name: string | null
    cpf: string | null
    genre: string | null
    email: string | null
    tel: string | null
    birthday: string | null
    company_name: string | null
    registered: boolean | null
    form_id: number | null
    address_id: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ColaboratorsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    cpf: string | null
    genre: string | null
    email: string | null
    tel: string | null
    birthday: string | null
    company_name: string | null
    registered: boolean | null
    form_id: number | null
    address_id: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ColaboratorsCountAggregateOutputType = {
    id: number
    name: number
    cpf: number
    genre: number
    email: number
    tel: number
    birthday: number
    company_name: number
    registered: number
    form_id: number
    address_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ColaboratorsAvgAggregateInputType = {
    id?: true
    form_id?: true
    address_id?: true
  }

  export type ColaboratorsSumAggregateInputType = {
    id?: true
    form_id?: true
    address_id?: true
  }

  export type ColaboratorsMinAggregateInputType = {
    id?: true
    name?: true
    cpf?: true
    genre?: true
    email?: true
    tel?: true
    birthday?: true
    company_name?: true
    registered?: true
    form_id?: true
    address_id?: true
    created_at?: true
    updated_at?: true
  }

  export type ColaboratorsMaxAggregateInputType = {
    id?: true
    name?: true
    cpf?: true
    genre?: true
    email?: true
    tel?: true
    birthday?: true
    company_name?: true
    registered?: true
    form_id?: true
    address_id?: true
    created_at?: true
    updated_at?: true
  }

  export type ColaboratorsCountAggregateInputType = {
    id?: true
    name?: true
    cpf?: true
    genre?: true
    email?: true
    tel?: true
    birthday?: true
    company_name?: true
    registered?: true
    form_id?: true
    address_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ColaboratorsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which colaborators to aggregate.
     */
    where?: colaboratorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of colaborators to fetch.
     */
    orderBy?: colaboratorsOrderByWithRelationInput | colaboratorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: colaboratorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` colaborators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` colaborators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned colaborators
    **/
    _count?: true | ColaboratorsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ColaboratorsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ColaboratorsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ColaboratorsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ColaboratorsMaxAggregateInputType
  }

  export type GetColaboratorsAggregateType<T extends ColaboratorsAggregateArgs> = {
        [P in keyof T & keyof AggregateColaborators]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateColaborators[P]>
      : GetScalarType<T[P], AggregateColaborators[P]>
  }




  export type colaboratorsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: colaboratorsWhereInput
    orderBy?: colaboratorsOrderByWithAggregationInput | colaboratorsOrderByWithAggregationInput[]
    by: ColaboratorsScalarFieldEnum[] | ColaboratorsScalarFieldEnum
    having?: colaboratorsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ColaboratorsCountAggregateInputType | true
    _avg?: ColaboratorsAvgAggregateInputType
    _sum?: ColaboratorsSumAggregateInputType
    _min?: ColaboratorsMinAggregateInputType
    _max?: ColaboratorsMaxAggregateInputType
  }

  export type ColaboratorsGroupByOutputType = {
    id: number
    name: string
    cpf: string
    genre: string
    email: string
    tel: string
    birthday: string
    company_name: string
    registered: boolean
    form_id: number
    address_id: number
    created_at: Date
    updated_at: Date
    _count: ColaboratorsCountAggregateOutputType | null
    _avg: ColaboratorsAvgAggregateOutputType | null
    _sum: ColaboratorsSumAggregateOutputType | null
    _min: ColaboratorsMinAggregateOutputType | null
    _max: ColaboratorsMaxAggregateOutputType | null
  }

  type GetColaboratorsGroupByPayload<T extends colaboratorsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ColaboratorsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ColaboratorsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ColaboratorsGroupByOutputType[P]>
            : GetScalarType<T[P], ColaboratorsGroupByOutputType[P]>
        }
      >
    >


  export type colaboratorsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    cpf?: boolean
    genre?: boolean
    email?: boolean
    tel?: boolean
    birthday?: boolean
    company_name?: boolean
    registered?: boolean
    form_id?: boolean
    address_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    colaborator_services?: boolean | colaborators$colaborator_servicesArgs<ExtArgs>
    forms?: boolean | formsDefaultArgs<ExtArgs>
    addresses?: boolean | addressesDefaultArgs<ExtArgs>
    _count?: boolean | ColaboratorsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["colaborators"]>

  export type colaboratorsSelectScalar = {
    id?: boolean
    name?: boolean
    cpf?: boolean
    genre?: boolean
    email?: boolean
    tel?: boolean
    birthday?: boolean
    company_name?: boolean
    registered?: boolean
    form_id?: boolean
    address_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type colaboratorsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colaborator_services?: boolean | colaborators$colaborator_servicesArgs<ExtArgs>
    forms?: boolean | formsDefaultArgs<ExtArgs>
    addresses?: boolean | addressesDefaultArgs<ExtArgs>
    _count?: boolean | ColaboratorsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $colaboratorsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "colaborators"
    objects: {
      colaborator_services: Prisma.$colaborator_servicesPayload<ExtArgs>[]
      forms: Prisma.$formsPayload<ExtArgs>
      addresses: Prisma.$addressesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      cpf: string
      genre: string
      email: string
      tel: string
      birthday: string
      company_name: string
      registered: boolean
      form_id: number
      address_id: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["colaborators"]>
    composites: {}
  }


  type colaboratorsGetPayload<S extends boolean | null | undefined | colaboratorsDefaultArgs> = $Result.GetResult<Prisma.$colaboratorsPayload, S>

  type colaboratorsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<colaboratorsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ColaboratorsCountAggregateInputType | true
    }

  export interface colaboratorsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['colaborators'], meta: { name: 'colaborators' } }
    /**
     * Find zero or one Colaborators that matches the filter.
     * @param {colaboratorsFindUniqueArgs} args - Arguments to find a Colaborators
     * @example
     * // Get one Colaborators
     * const colaborators = await prisma.colaborators.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends colaboratorsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, colaboratorsFindUniqueArgs<ExtArgs>>
    ): Prisma__colaboratorsClient<$Result.GetResult<Prisma.$colaboratorsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Colaborators that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {colaboratorsFindUniqueOrThrowArgs} args - Arguments to find a Colaborators
     * @example
     * // Get one Colaborators
     * const colaborators = await prisma.colaborators.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends colaboratorsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, colaboratorsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__colaboratorsClient<$Result.GetResult<Prisma.$colaboratorsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Colaborators that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {colaboratorsFindFirstArgs} args - Arguments to find a Colaborators
     * @example
     * // Get one Colaborators
     * const colaborators = await prisma.colaborators.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends colaboratorsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, colaboratorsFindFirstArgs<ExtArgs>>
    ): Prisma__colaboratorsClient<$Result.GetResult<Prisma.$colaboratorsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Colaborators that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {colaboratorsFindFirstOrThrowArgs} args - Arguments to find a Colaborators
     * @example
     * // Get one Colaborators
     * const colaborators = await prisma.colaborators.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends colaboratorsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, colaboratorsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__colaboratorsClient<$Result.GetResult<Prisma.$colaboratorsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Colaborators that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {colaboratorsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Colaborators
     * const colaborators = await prisma.colaborators.findMany()
     * 
     * // Get first 10 Colaborators
     * const colaborators = await prisma.colaborators.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const colaboratorsWithIdOnly = await prisma.colaborators.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends colaboratorsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, colaboratorsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$colaboratorsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Colaborators.
     * @param {colaboratorsCreateArgs} args - Arguments to create a Colaborators.
     * @example
     * // Create one Colaborators
     * const Colaborators = await prisma.colaborators.create({
     *   data: {
     *     // ... data to create a Colaborators
     *   }
     * })
     * 
    **/
    create<T extends colaboratorsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, colaboratorsCreateArgs<ExtArgs>>
    ): Prisma__colaboratorsClient<$Result.GetResult<Prisma.$colaboratorsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Colaborators.
     *     @param {colaboratorsCreateManyArgs} args - Arguments to create many Colaborators.
     *     @example
     *     // Create many Colaborators
     *     const colaborators = await prisma.colaborators.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends colaboratorsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, colaboratorsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Colaborators.
     * @param {colaboratorsDeleteArgs} args - Arguments to delete one Colaborators.
     * @example
     * // Delete one Colaborators
     * const Colaborators = await prisma.colaborators.delete({
     *   where: {
     *     // ... filter to delete one Colaborators
     *   }
     * })
     * 
    **/
    delete<T extends colaboratorsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, colaboratorsDeleteArgs<ExtArgs>>
    ): Prisma__colaboratorsClient<$Result.GetResult<Prisma.$colaboratorsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Colaborators.
     * @param {colaboratorsUpdateArgs} args - Arguments to update one Colaborators.
     * @example
     * // Update one Colaborators
     * const colaborators = await prisma.colaborators.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends colaboratorsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, colaboratorsUpdateArgs<ExtArgs>>
    ): Prisma__colaboratorsClient<$Result.GetResult<Prisma.$colaboratorsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Colaborators.
     * @param {colaboratorsDeleteManyArgs} args - Arguments to filter Colaborators to delete.
     * @example
     * // Delete a few Colaborators
     * const { count } = await prisma.colaborators.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends colaboratorsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, colaboratorsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Colaborators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {colaboratorsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Colaborators
     * const colaborators = await prisma.colaborators.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends colaboratorsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, colaboratorsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Colaborators.
     * @param {colaboratorsUpsertArgs} args - Arguments to update or create a Colaborators.
     * @example
     * // Update or create a Colaborators
     * const colaborators = await prisma.colaborators.upsert({
     *   create: {
     *     // ... data to create a Colaborators
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Colaborators we want to update
     *   }
     * })
    **/
    upsert<T extends colaboratorsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, colaboratorsUpsertArgs<ExtArgs>>
    ): Prisma__colaboratorsClient<$Result.GetResult<Prisma.$colaboratorsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Colaborators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {colaboratorsCountArgs} args - Arguments to filter Colaborators to count.
     * @example
     * // Count the number of Colaborators
     * const count = await prisma.colaborators.count({
     *   where: {
     *     // ... the filter for the Colaborators we want to count
     *   }
     * })
    **/
    count<T extends colaboratorsCountArgs>(
      args?: Subset<T, colaboratorsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ColaboratorsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Colaborators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColaboratorsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ColaboratorsAggregateArgs>(args: Subset<T, ColaboratorsAggregateArgs>): Prisma.PrismaPromise<GetColaboratorsAggregateType<T>>

    /**
     * Group by Colaborators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {colaboratorsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends colaboratorsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: colaboratorsGroupByArgs['orderBy'] }
        : { orderBy?: colaboratorsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, colaboratorsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetColaboratorsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the colaborators model
   */
  readonly fields: colaboratorsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for colaborators.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__colaboratorsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    colaborator_services<T extends colaborators$colaborator_servicesArgs<ExtArgs> = {}>(args?: Subset<T, colaborators$colaborator_servicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$colaborator_servicesPayload<ExtArgs>, T, 'findMany'> | Null>;

    forms<T extends formsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, formsDefaultArgs<ExtArgs>>): Prisma__formsClient<$Result.GetResult<Prisma.$formsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    addresses<T extends addressesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, addressesDefaultArgs<ExtArgs>>): Prisma__addressesClient<$Result.GetResult<Prisma.$addressesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the colaborators model
   */ 
  interface colaboratorsFieldRefs {
    readonly id: FieldRef<"colaborators", 'Int'>
    readonly name: FieldRef<"colaborators", 'String'>
    readonly cpf: FieldRef<"colaborators", 'String'>
    readonly genre: FieldRef<"colaborators", 'String'>
    readonly email: FieldRef<"colaborators", 'String'>
    readonly tel: FieldRef<"colaborators", 'String'>
    readonly birthday: FieldRef<"colaborators", 'String'>
    readonly company_name: FieldRef<"colaborators", 'String'>
    readonly registered: FieldRef<"colaborators", 'Boolean'>
    readonly form_id: FieldRef<"colaborators", 'Int'>
    readonly address_id: FieldRef<"colaborators", 'Int'>
    readonly created_at: FieldRef<"colaborators", 'DateTime'>
    readonly updated_at: FieldRef<"colaborators", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * colaborators findUnique
   */
  export type colaboratorsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborators
     */
    select?: colaboratorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaboratorsInclude<ExtArgs> | null
    /**
     * Filter, which colaborators to fetch.
     */
    where: colaboratorsWhereUniqueInput
  }


  /**
   * colaborators findUniqueOrThrow
   */
  export type colaboratorsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborators
     */
    select?: colaboratorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaboratorsInclude<ExtArgs> | null
    /**
     * Filter, which colaborators to fetch.
     */
    where: colaboratorsWhereUniqueInput
  }


  /**
   * colaborators findFirst
   */
  export type colaboratorsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborators
     */
    select?: colaboratorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaboratorsInclude<ExtArgs> | null
    /**
     * Filter, which colaborators to fetch.
     */
    where?: colaboratorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of colaborators to fetch.
     */
    orderBy?: colaboratorsOrderByWithRelationInput | colaboratorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for colaborators.
     */
    cursor?: colaboratorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` colaborators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` colaborators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of colaborators.
     */
    distinct?: ColaboratorsScalarFieldEnum | ColaboratorsScalarFieldEnum[]
  }


  /**
   * colaborators findFirstOrThrow
   */
  export type colaboratorsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborators
     */
    select?: colaboratorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaboratorsInclude<ExtArgs> | null
    /**
     * Filter, which colaborators to fetch.
     */
    where?: colaboratorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of colaborators to fetch.
     */
    orderBy?: colaboratorsOrderByWithRelationInput | colaboratorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for colaborators.
     */
    cursor?: colaboratorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` colaborators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` colaborators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of colaborators.
     */
    distinct?: ColaboratorsScalarFieldEnum | ColaboratorsScalarFieldEnum[]
  }


  /**
   * colaborators findMany
   */
  export type colaboratorsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborators
     */
    select?: colaboratorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaboratorsInclude<ExtArgs> | null
    /**
     * Filter, which colaborators to fetch.
     */
    where?: colaboratorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of colaborators to fetch.
     */
    orderBy?: colaboratorsOrderByWithRelationInput | colaboratorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing colaborators.
     */
    cursor?: colaboratorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` colaborators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` colaborators.
     */
    skip?: number
    distinct?: ColaboratorsScalarFieldEnum | ColaboratorsScalarFieldEnum[]
  }


  /**
   * colaborators create
   */
  export type colaboratorsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborators
     */
    select?: colaboratorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaboratorsInclude<ExtArgs> | null
    /**
     * The data needed to create a colaborators.
     */
    data: XOR<colaboratorsCreateInput, colaboratorsUncheckedCreateInput>
  }


  /**
   * colaborators createMany
   */
  export type colaboratorsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many colaborators.
     */
    data: colaboratorsCreateManyInput | colaboratorsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * colaborators update
   */
  export type colaboratorsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborators
     */
    select?: colaboratorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaboratorsInclude<ExtArgs> | null
    /**
     * The data needed to update a colaborators.
     */
    data: XOR<colaboratorsUpdateInput, colaboratorsUncheckedUpdateInput>
    /**
     * Choose, which colaborators to update.
     */
    where: colaboratorsWhereUniqueInput
  }


  /**
   * colaborators updateMany
   */
  export type colaboratorsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update colaborators.
     */
    data: XOR<colaboratorsUpdateManyMutationInput, colaboratorsUncheckedUpdateManyInput>
    /**
     * Filter which colaborators to update
     */
    where?: colaboratorsWhereInput
  }


  /**
   * colaborators upsert
   */
  export type colaboratorsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborators
     */
    select?: colaboratorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaboratorsInclude<ExtArgs> | null
    /**
     * The filter to search for the colaborators to update in case it exists.
     */
    where: colaboratorsWhereUniqueInput
    /**
     * In case the colaborators found by the `where` argument doesn't exist, create a new colaborators with this data.
     */
    create: XOR<colaboratorsCreateInput, colaboratorsUncheckedCreateInput>
    /**
     * In case the colaborators was found with the provided `where` argument, update it with this data.
     */
    update: XOR<colaboratorsUpdateInput, colaboratorsUncheckedUpdateInput>
  }


  /**
   * colaborators delete
   */
  export type colaboratorsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborators
     */
    select?: colaboratorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaboratorsInclude<ExtArgs> | null
    /**
     * Filter which colaborators to delete.
     */
    where: colaboratorsWhereUniqueInput
  }


  /**
   * colaborators deleteMany
   */
  export type colaboratorsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which colaborators to delete
     */
    where?: colaboratorsWhereInput
  }


  /**
   * colaborators.colaborator_services
   */
  export type colaborators$colaborator_servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborator_services
     */
    select?: colaborator_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaborator_servicesInclude<ExtArgs> | null
    where?: colaborator_servicesWhereInput
    orderBy?: colaborator_servicesOrderByWithRelationInput | colaborator_servicesOrderByWithRelationInput[]
    cursor?: colaborator_servicesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Colaborator_servicesScalarFieldEnum | Colaborator_servicesScalarFieldEnum[]
  }


  /**
   * colaborators without action
   */
  export type colaboratorsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborators
     */
    select?: colaboratorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaboratorsInclude<ExtArgs> | null
  }



  /**
   * Model form_services
   */

  export type AggregateForm_services = {
    _count: Form_servicesCountAggregateOutputType | null
    _avg: Form_servicesAvgAggregateOutputType | null
    _sum: Form_servicesSumAggregateOutputType | null
    _min: Form_servicesMinAggregateOutputType | null
    _max: Form_servicesMaxAggregateOutputType | null
  }

  export type Form_servicesAvgAggregateOutputType = {
    id: number | null
    form_id: number | null
    service_id: number | null
  }

  export type Form_servicesSumAggregateOutputType = {
    id: number | null
    form_id: number | null
    service_id: number | null
  }

  export type Form_servicesMinAggregateOutputType = {
    id: number | null
    form_id: number | null
    service_id: number | null
  }

  export type Form_servicesMaxAggregateOutputType = {
    id: number | null
    form_id: number | null
    service_id: number | null
  }

  export type Form_servicesCountAggregateOutputType = {
    id: number
    form_id: number
    service_id: number
    _all: number
  }


  export type Form_servicesAvgAggregateInputType = {
    id?: true
    form_id?: true
    service_id?: true
  }

  export type Form_servicesSumAggregateInputType = {
    id?: true
    form_id?: true
    service_id?: true
  }

  export type Form_servicesMinAggregateInputType = {
    id?: true
    form_id?: true
    service_id?: true
  }

  export type Form_servicesMaxAggregateInputType = {
    id?: true
    form_id?: true
    service_id?: true
  }

  export type Form_servicesCountAggregateInputType = {
    id?: true
    form_id?: true
    service_id?: true
    _all?: true
  }

  export type Form_servicesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which form_services to aggregate.
     */
    where?: form_servicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of form_services to fetch.
     */
    orderBy?: form_servicesOrderByWithRelationInput | form_servicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: form_servicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` form_services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` form_services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned form_services
    **/
    _count?: true | Form_servicesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Form_servicesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Form_servicesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Form_servicesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Form_servicesMaxAggregateInputType
  }

  export type GetForm_servicesAggregateType<T extends Form_servicesAggregateArgs> = {
        [P in keyof T & keyof AggregateForm_services]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateForm_services[P]>
      : GetScalarType<T[P], AggregateForm_services[P]>
  }




  export type form_servicesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: form_servicesWhereInput
    orderBy?: form_servicesOrderByWithAggregationInput | form_servicesOrderByWithAggregationInput[]
    by: Form_servicesScalarFieldEnum[] | Form_servicesScalarFieldEnum
    having?: form_servicesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Form_servicesCountAggregateInputType | true
    _avg?: Form_servicesAvgAggregateInputType
    _sum?: Form_servicesSumAggregateInputType
    _min?: Form_servicesMinAggregateInputType
    _max?: Form_servicesMaxAggregateInputType
  }

  export type Form_servicesGroupByOutputType = {
    id: number
    form_id: number
    service_id: number
    _count: Form_servicesCountAggregateOutputType | null
    _avg: Form_servicesAvgAggregateOutputType | null
    _sum: Form_servicesSumAggregateOutputType | null
    _min: Form_servicesMinAggregateOutputType | null
    _max: Form_servicesMaxAggregateOutputType | null
  }

  type GetForm_servicesGroupByPayload<T extends form_servicesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Form_servicesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Form_servicesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Form_servicesGroupByOutputType[P]>
            : GetScalarType<T[P], Form_servicesGroupByOutputType[P]>
        }
      >
    >


  export type form_servicesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    form_id?: boolean
    service_id?: boolean
    forms?: boolean | formsDefaultArgs<ExtArgs>
    services?: boolean | servicesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["form_services"]>

  export type form_servicesSelectScalar = {
    id?: boolean
    form_id?: boolean
    service_id?: boolean
  }

  export type form_servicesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    forms?: boolean | formsDefaultArgs<ExtArgs>
    services?: boolean | servicesDefaultArgs<ExtArgs>
  }


  export type $form_servicesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "form_services"
    objects: {
      forms: Prisma.$formsPayload<ExtArgs>
      services: Prisma.$servicesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      form_id: number
      service_id: number
    }, ExtArgs["result"]["form_services"]>
    composites: {}
  }


  type form_servicesGetPayload<S extends boolean | null | undefined | form_servicesDefaultArgs> = $Result.GetResult<Prisma.$form_servicesPayload, S>

  type form_servicesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<form_servicesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Form_servicesCountAggregateInputType | true
    }

  export interface form_servicesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['form_services'], meta: { name: 'form_services' } }
    /**
     * Find zero or one Form_services that matches the filter.
     * @param {form_servicesFindUniqueArgs} args - Arguments to find a Form_services
     * @example
     * // Get one Form_services
     * const form_services = await prisma.form_services.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends form_servicesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, form_servicesFindUniqueArgs<ExtArgs>>
    ): Prisma__form_servicesClient<$Result.GetResult<Prisma.$form_servicesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Form_services that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {form_servicesFindUniqueOrThrowArgs} args - Arguments to find a Form_services
     * @example
     * // Get one Form_services
     * const form_services = await prisma.form_services.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends form_servicesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, form_servicesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__form_servicesClient<$Result.GetResult<Prisma.$form_servicesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Form_services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {form_servicesFindFirstArgs} args - Arguments to find a Form_services
     * @example
     * // Get one Form_services
     * const form_services = await prisma.form_services.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends form_servicesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, form_servicesFindFirstArgs<ExtArgs>>
    ): Prisma__form_servicesClient<$Result.GetResult<Prisma.$form_servicesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Form_services that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {form_servicesFindFirstOrThrowArgs} args - Arguments to find a Form_services
     * @example
     * // Get one Form_services
     * const form_services = await prisma.form_services.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends form_servicesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, form_servicesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__form_servicesClient<$Result.GetResult<Prisma.$form_servicesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Form_services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {form_servicesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Form_services
     * const form_services = await prisma.form_services.findMany()
     * 
     * // Get first 10 Form_services
     * const form_services = await prisma.form_services.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const form_servicesWithIdOnly = await prisma.form_services.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends form_servicesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, form_servicesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$form_servicesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Form_services.
     * @param {form_servicesCreateArgs} args - Arguments to create a Form_services.
     * @example
     * // Create one Form_services
     * const Form_services = await prisma.form_services.create({
     *   data: {
     *     // ... data to create a Form_services
     *   }
     * })
     * 
    **/
    create<T extends form_servicesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, form_servicesCreateArgs<ExtArgs>>
    ): Prisma__form_servicesClient<$Result.GetResult<Prisma.$form_servicesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Form_services.
     *     @param {form_servicesCreateManyArgs} args - Arguments to create many Form_services.
     *     @example
     *     // Create many Form_services
     *     const form_services = await prisma.form_services.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends form_servicesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, form_servicesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Form_services.
     * @param {form_servicesDeleteArgs} args - Arguments to delete one Form_services.
     * @example
     * // Delete one Form_services
     * const Form_services = await prisma.form_services.delete({
     *   where: {
     *     // ... filter to delete one Form_services
     *   }
     * })
     * 
    **/
    delete<T extends form_servicesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, form_servicesDeleteArgs<ExtArgs>>
    ): Prisma__form_servicesClient<$Result.GetResult<Prisma.$form_servicesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Form_services.
     * @param {form_servicesUpdateArgs} args - Arguments to update one Form_services.
     * @example
     * // Update one Form_services
     * const form_services = await prisma.form_services.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends form_servicesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, form_servicesUpdateArgs<ExtArgs>>
    ): Prisma__form_servicesClient<$Result.GetResult<Prisma.$form_servicesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Form_services.
     * @param {form_servicesDeleteManyArgs} args - Arguments to filter Form_services to delete.
     * @example
     * // Delete a few Form_services
     * const { count } = await prisma.form_services.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends form_servicesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, form_servicesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Form_services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {form_servicesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Form_services
     * const form_services = await prisma.form_services.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends form_servicesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, form_servicesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Form_services.
     * @param {form_servicesUpsertArgs} args - Arguments to update or create a Form_services.
     * @example
     * // Update or create a Form_services
     * const form_services = await prisma.form_services.upsert({
     *   create: {
     *     // ... data to create a Form_services
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Form_services we want to update
     *   }
     * })
    **/
    upsert<T extends form_servicesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, form_servicesUpsertArgs<ExtArgs>>
    ): Prisma__form_servicesClient<$Result.GetResult<Prisma.$form_servicesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Form_services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {form_servicesCountArgs} args - Arguments to filter Form_services to count.
     * @example
     * // Count the number of Form_services
     * const count = await prisma.form_services.count({
     *   where: {
     *     // ... the filter for the Form_services we want to count
     *   }
     * })
    **/
    count<T extends form_servicesCountArgs>(
      args?: Subset<T, form_servicesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Form_servicesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Form_services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Form_servicesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Form_servicesAggregateArgs>(args: Subset<T, Form_servicesAggregateArgs>): Prisma.PrismaPromise<GetForm_servicesAggregateType<T>>

    /**
     * Group by Form_services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {form_servicesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends form_servicesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: form_servicesGroupByArgs['orderBy'] }
        : { orderBy?: form_servicesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, form_servicesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetForm_servicesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the form_services model
   */
  readonly fields: form_servicesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for form_services.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__form_servicesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    forms<T extends formsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, formsDefaultArgs<ExtArgs>>): Prisma__formsClient<$Result.GetResult<Prisma.$formsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    services<T extends servicesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, servicesDefaultArgs<ExtArgs>>): Prisma__servicesClient<$Result.GetResult<Prisma.$servicesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the form_services model
   */ 
  interface form_servicesFieldRefs {
    readonly id: FieldRef<"form_services", 'Int'>
    readonly form_id: FieldRef<"form_services", 'Int'>
    readonly service_id: FieldRef<"form_services", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * form_services findUnique
   */
  export type form_servicesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_services
     */
    select?: form_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: form_servicesInclude<ExtArgs> | null
    /**
     * Filter, which form_services to fetch.
     */
    where: form_servicesWhereUniqueInput
  }


  /**
   * form_services findUniqueOrThrow
   */
  export type form_servicesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_services
     */
    select?: form_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: form_servicesInclude<ExtArgs> | null
    /**
     * Filter, which form_services to fetch.
     */
    where: form_servicesWhereUniqueInput
  }


  /**
   * form_services findFirst
   */
  export type form_servicesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_services
     */
    select?: form_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: form_servicesInclude<ExtArgs> | null
    /**
     * Filter, which form_services to fetch.
     */
    where?: form_servicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of form_services to fetch.
     */
    orderBy?: form_servicesOrderByWithRelationInput | form_servicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for form_services.
     */
    cursor?: form_servicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` form_services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` form_services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of form_services.
     */
    distinct?: Form_servicesScalarFieldEnum | Form_servicesScalarFieldEnum[]
  }


  /**
   * form_services findFirstOrThrow
   */
  export type form_servicesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_services
     */
    select?: form_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: form_servicesInclude<ExtArgs> | null
    /**
     * Filter, which form_services to fetch.
     */
    where?: form_servicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of form_services to fetch.
     */
    orderBy?: form_servicesOrderByWithRelationInput | form_servicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for form_services.
     */
    cursor?: form_servicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` form_services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` form_services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of form_services.
     */
    distinct?: Form_servicesScalarFieldEnum | Form_servicesScalarFieldEnum[]
  }


  /**
   * form_services findMany
   */
  export type form_servicesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_services
     */
    select?: form_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: form_servicesInclude<ExtArgs> | null
    /**
     * Filter, which form_services to fetch.
     */
    where?: form_servicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of form_services to fetch.
     */
    orderBy?: form_servicesOrderByWithRelationInput | form_servicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing form_services.
     */
    cursor?: form_servicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` form_services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` form_services.
     */
    skip?: number
    distinct?: Form_servicesScalarFieldEnum | Form_servicesScalarFieldEnum[]
  }


  /**
   * form_services create
   */
  export type form_servicesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_services
     */
    select?: form_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: form_servicesInclude<ExtArgs> | null
    /**
     * The data needed to create a form_services.
     */
    data: XOR<form_servicesCreateInput, form_servicesUncheckedCreateInput>
  }


  /**
   * form_services createMany
   */
  export type form_servicesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many form_services.
     */
    data: form_servicesCreateManyInput | form_servicesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * form_services update
   */
  export type form_servicesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_services
     */
    select?: form_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: form_servicesInclude<ExtArgs> | null
    /**
     * The data needed to update a form_services.
     */
    data: XOR<form_servicesUpdateInput, form_servicesUncheckedUpdateInput>
    /**
     * Choose, which form_services to update.
     */
    where: form_servicesWhereUniqueInput
  }


  /**
   * form_services updateMany
   */
  export type form_servicesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update form_services.
     */
    data: XOR<form_servicesUpdateManyMutationInput, form_servicesUncheckedUpdateManyInput>
    /**
     * Filter which form_services to update
     */
    where?: form_servicesWhereInput
  }


  /**
   * form_services upsert
   */
  export type form_servicesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_services
     */
    select?: form_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: form_servicesInclude<ExtArgs> | null
    /**
     * The filter to search for the form_services to update in case it exists.
     */
    where: form_servicesWhereUniqueInput
    /**
     * In case the form_services found by the `where` argument doesn't exist, create a new form_services with this data.
     */
    create: XOR<form_servicesCreateInput, form_servicesUncheckedCreateInput>
    /**
     * In case the form_services was found with the provided `where` argument, update it with this data.
     */
    update: XOR<form_servicesUpdateInput, form_servicesUncheckedUpdateInput>
  }


  /**
   * form_services delete
   */
  export type form_servicesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_services
     */
    select?: form_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: form_servicesInclude<ExtArgs> | null
    /**
     * Filter which form_services to delete.
     */
    where: form_servicesWhereUniqueInput
  }


  /**
   * form_services deleteMany
   */
  export type form_servicesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which form_services to delete
     */
    where?: form_servicesWhereInput
  }


  /**
   * form_services without action
   */
  export type form_servicesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_services
     */
    select?: form_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: form_servicesInclude<ExtArgs> | null
  }



  /**
   * Model forms
   */

  export type AggregateForms = {
    _count: FormsCountAggregateOutputType | null
    _avg: FormsAvgAggregateOutputType | null
    _sum: FormsSumAggregateOutputType | null
    _min: FormsMinAggregateOutputType | null
    _max: FormsMaxAggregateOutputType | null
  }

  export type FormsAvgAggregateOutputType = {
    id: number | null
  }

  export type FormsSumAggregateOutputType = {
    id: number | null
  }

  export type FormsMinAggregateOutputType = {
    id: number | null
    name: string | null
    identify: string | null
    created_at: Date | null
    updated_at: Date | null
    is_deleted: boolean | null
  }

  export type FormsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    identify: string | null
    created_at: Date | null
    updated_at: Date | null
    is_deleted: boolean | null
  }

  export type FormsCountAggregateOutputType = {
    id: number
    name: number
    identify: number
    created_at: number
    updated_at: number
    is_deleted: number
    _all: number
  }


  export type FormsAvgAggregateInputType = {
    id?: true
  }

  export type FormsSumAggregateInputType = {
    id?: true
  }

  export type FormsMinAggregateInputType = {
    id?: true
    name?: true
    identify?: true
    created_at?: true
    updated_at?: true
    is_deleted?: true
  }

  export type FormsMaxAggregateInputType = {
    id?: true
    name?: true
    identify?: true
    created_at?: true
    updated_at?: true
    is_deleted?: true
  }

  export type FormsCountAggregateInputType = {
    id?: true
    name?: true
    identify?: true
    created_at?: true
    updated_at?: true
    is_deleted?: true
    _all?: true
  }

  export type FormsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which forms to aggregate.
     */
    where?: formsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of forms to fetch.
     */
    orderBy?: formsOrderByWithRelationInput | formsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: formsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` forms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned forms
    **/
    _count?: true | FormsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FormsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FormsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FormsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FormsMaxAggregateInputType
  }

  export type GetFormsAggregateType<T extends FormsAggregateArgs> = {
        [P in keyof T & keyof AggregateForms]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateForms[P]>
      : GetScalarType<T[P], AggregateForms[P]>
  }




  export type formsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: formsWhereInput
    orderBy?: formsOrderByWithAggregationInput | formsOrderByWithAggregationInput[]
    by: FormsScalarFieldEnum[] | FormsScalarFieldEnum
    having?: formsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FormsCountAggregateInputType | true
    _avg?: FormsAvgAggregateInputType
    _sum?: FormsSumAggregateInputType
    _min?: FormsMinAggregateInputType
    _max?: FormsMaxAggregateInputType
  }

  export type FormsGroupByOutputType = {
    id: number
    name: string
    identify: string
    created_at: Date
    updated_at: Date
    is_deleted: boolean | null
    _count: FormsCountAggregateOutputType | null
    _avg: FormsAvgAggregateOutputType | null
    _sum: FormsSumAggregateOutputType | null
    _min: FormsMinAggregateOutputType | null
    _max: FormsMaxAggregateOutputType | null
  }

  type GetFormsGroupByPayload<T extends formsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FormsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FormsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FormsGroupByOutputType[P]>
            : GetScalarType<T[P], FormsGroupByOutputType[P]>
        }
      >
    >


  export type formsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    identify?: boolean
    created_at?: boolean
    updated_at?: boolean
    is_deleted?: boolean
    colaborators?: boolean | forms$colaboratorsArgs<ExtArgs>
    form_services?: boolean | forms$form_servicesArgs<ExtArgs>
    _count?: boolean | FormsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["forms"]>

  export type formsSelectScalar = {
    id?: boolean
    name?: boolean
    identify?: boolean
    created_at?: boolean
    updated_at?: boolean
    is_deleted?: boolean
  }

  export type formsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colaborators?: boolean | forms$colaboratorsArgs<ExtArgs>
    form_services?: boolean | forms$form_servicesArgs<ExtArgs>
    _count?: boolean | FormsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $formsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "forms"
    objects: {
      colaborators: Prisma.$colaboratorsPayload<ExtArgs>[]
      form_services: Prisma.$form_servicesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      identify: string
      created_at: Date
      updated_at: Date
      is_deleted: boolean | null
    }, ExtArgs["result"]["forms"]>
    composites: {}
  }


  type formsGetPayload<S extends boolean | null | undefined | formsDefaultArgs> = $Result.GetResult<Prisma.$formsPayload, S>

  type formsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<formsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FormsCountAggregateInputType | true
    }

  export interface formsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['forms'], meta: { name: 'forms' } }
    /**
     * Find zero or one Forms that matches the filter.
     * @param {formsFindUniqueArgs} args - Arguments to find a Forms
     * @example
     * // Get one Forms
     * const forms = await prisma.forms.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends formsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, formsFindUniqueArgs<ExtArgs>>
    ): Prisma__formsClient<$Result.GetResult<Prisma.$formsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Forms that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {formsFindUniqueOrThrowArgs} args - Arguments to find a Forms
     * @example
     * // Get one Forms
     * const forms = await prisma.forms.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends formsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, formsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__formsClient<$Result.GetResult<Prisma.$formsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Forms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {formsFindFirstArgs} args - Arguments to find a Forms
     * @example
     * // Get one Forms
     * const forms = await prisma.forms.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends formsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, formsFindFirstArgs<ExtArgs>>
    ): Prisma__formsClient<$Result.GetResult<Prisma.$formsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Forms that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {formsFindFirstOrThrowArgs} args - Arguments to find a Forms
     * @example
     * // Get one Forms
     * const forms = await prisma.forms.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends formsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, formsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__formsClient<$Result.GetResult<Prisma.$formsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Forms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {formsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Forms
     * const forms = await prisma.forms.findMany()
     * 
     * // Get first 10 Forms
     * const forms = await prisma.forms.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const formsWithIdOnly = await prisma.forms.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends formsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, formsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$formsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Forms.
     * @param {formsCreateArgs} args - Arguments to create a Forms.
     * @example
     * // Create one Forms
     * const Forms = await prisma.forms.create({
     *   data: {
     *     // ... data to create a Forms
     *   }
     * })
     * 
    **/
    create<T extends formsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, formsCreateArgs<ExtArgs>>
    ): Prisma__formsClient<$Result.GetResult<Prisma.$formsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Forms.
     *     @param {formsCreateManyArgs} args - Arguments to create many Forms.
     *     @example
     *     // Create many Forms
     *     const forms = await prisma.forms.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends formsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, formsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Forms.
     * @param {formsDeleteArgs} args - Arguments to delete one Forms.
     * @example
     * // Delete one Forms
     * const Forms = await prisma.forms.delete({
     *   where: {
     *     // ... filter to delete one Forms
     *   }
     * })
     * 
    **/
    delete<T extends formsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, formsDeleteArgs<ExtArgs>>
    ): Prisma__formsClient<$Result.GetResult<Prisma.$formsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Forms.
     * @param {formsUpdateArgs} args - Arguments to update one Forms.
     * @example
     * // Update one Forms
     * const forms = await prisma.forms.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends formsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, formsUpdateArgs<ExtArgs>>
    ): Prisma__formsClient<$Result.GetResult<Prisma.$formsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Forms.
     * @param {formsDeleteManyArgs} args - Arguments to filter Forms to delete.
     * @example
     * // Delete a few Forms
     * const { count } = await prisma.forms.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends formsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, formsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Forms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {formsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Forms
     * const forms = await prisma.forms.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends formsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, formsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Forms.
     * @param {formsUpsertArgs} args - Arguments to update or create a Forms.
     * @example
     * // Update or create a Forms
     * const forms = await prisma.forms.upsert({
     *   create: {
     *     // ... data to create a Forms
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Forms we want to update
     *   }
     * })
    **/
    upsert<T extends formsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, formsUpsertArgs<ExtArgs>>
    ): Prisma__formsClient<$Result.GetResult<Prisma.$formsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Forms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {formsCountArgs} args - Arguments to filter Forms to count.
     * @example
     * // Count the number of Forms
     * const count = await prisma.forms.count({
     *   where: {
     *     // ... the filter for the Forms we want to count
     *   }
     * })
    **/
    count<T extends formsCountArgs>(
      args?: Subset<T, formsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FormsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Forms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FormsAggregateArgs>(args: Subset<T, FormsAggregateArgs>): Prisma.PrismaPromise<GetFormsAggregateType<T>>

    /**
     * Group by Forms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {formsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends formsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: formsGroupByArgs['orderBy'] }
        : { orderBy?: formsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, formsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the forms model
   */
  readonly fields: formsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for forms.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__formsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    colaborators<T extends forms$colaboratorsArgs<ExtArgs> = {}>(args?: Subset<T, forms$colaboratorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$colaboratorsPayload<ExtArgs>, T, 'findMany'> | Null>;

    form_services<T extends forms$form_servicesArgs<ExtArgs> = {}>(args?: Subset<T, forms$form_servicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$form_servicesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the forms model
   */ 
  interface formsFieldRefs {
    readonly id: FieldRef<"forms", 'Int'>
    readonly name: FieldRef<"forms", 'String'>
    readonly identify: FieldRef<"forms", 'String'>
    readonly created_at: FieldRef<"forms", 'DateTime'>
    readonly updated_at: FieldRef<"forms", 'DateTime'>
    readonly is_deleted: FieldRef<"forms", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * forms findUnique
   */
  export type formsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the forms
     */
    select?: formsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: formsInclude<ExtArgs> | null
    /**
     * Filter, which forms to fetch.
     */
    where: formsWhereUniqueInput
  }


  /**
   * forms findUniqueOrThrow
   */
  export type formsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the forms
     */
    select?: formsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: formsInclude<ExtArgs> | null
    /**
     * Filter, which forms to fetch.
     */
    where: formsWhereUniqueInput
  }


  /**
   * forms findFirst
   */
  export type formsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the forms
     */
    select?: formsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: formsInclude<ExtArgs> | null
    /**
     * Filter, which forms to fetch.
     */
    where?: formsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of forms to fetch.
     */
    orderBy?: formsOrderByWithRelationInput | formsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for forms.
     */
    cursor?: formsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` forms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of forms.
     */
    distinct?: FormsScalarFieldEnum | FormsScalarFieldEnum[]
  }


  /**
   * forms findFirstOrThrow
   */
  export type formsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the forms
     */
    select?: formsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: formsInclude<ExtArgs> | null
    /**
     * Filter, which forms to fetch.
     */
    where?: formsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of forms to fetch.
     */
    orderBy?: formsOrderByWithRelationInput | formsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for forms.
     */
    cursor?: formsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` forms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of forms.
     */
    distinct?: FormsScalarFieldEnum | FormsScalarFieldEnum[]
  }


  /**
   * forms findMany
   */
  export type formsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the forms
     */
    select?: formsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: formsInclude<ExtArgs> | null
    /**
     * Filter, which forms to fetch.
     */
    where?: formsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of forms to fetch.
     */
    orderBy?: formsOrderByWithRelationInput | formsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing forms.
     */
    cursor?: formsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` forms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` forms.
     */
    skip?: number
    distinct?: FormsScalarFieldEnum | FormsScalarFieldEnum[]
  }


  /**
   * forms create
   */
  export type formsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the forms
     */
    select?: formsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: formsInclude<ExtArgs> | null
    /**
     * The data needed to create a forms.
     */
    data: XOR<formsCreateInput, formsUncheckedCreateInput>
  }


  /**
   * forms createMany
   */
  export type formsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many forms.
     */
    data: formsCreateManyInput | formsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * forms update
   */
  export type formsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the forms
     */
    select?: formsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: formsInclude<ExtArgs> | null
    /**
     * The data needed to update a forms.
     */
    data: XOR<formsUpdateInput, formsUncheckedUpdateInput>
    /**
     * Choose, which forms to update.
     */
    where: formsWhereUniqueInput
  }


  /**
   * forms updateMany
   */
  export type formsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update forms.
     */
    data: XOR<formsUpdateManyMutationInput, formsUncheckedUpdateManyInput>
    /**
     * Filter which forms to update
     */
    where?: formsWhereInput
  }


  /**
   * forms upsert
   */
  export type formsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the forms
     */
    select?: formsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: formsInclude<ExtArgs> | null
    /**
     * The filter to search for the forms to update in case it exists.
     */
    where: formsWhereUniqueInput
    /**
     * In case the forms found by the `where` argument doesn't exist, create a new forms with this data.
     */
    create: XOR<formsCreateInput, formsUncheckedCreateInput>
    /**
     * In case the forms was found with the provided `where` argument, update it with this data.
     */
    update: XOR<formsUpdateInput, formsUncheckedUpdateInput>
  }


  /**
   * forms delete
   */
  export type formsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the forms
     */
    select?: formsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: formsInclude<ExtArgs> | null
    /**
     * Filter which forms to delete.
     */
    where: formsWhereUniqueInput
  }


  /**
   * forms deleteMany
   */
  export type formsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which forms to delete
     */
    where?: formsWhereInput
  }


  /**
   * forms.colaborators
   */
  export type forms$colaboratorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborators
     */
    select?: colaboratorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaboratorsInclude<ExtArgs> | null
    where?: colaboratorsWhereInput
    orderBy?: colaboratorsOrderByWithRelationInput | colaboratorsOrderByWithRelationInput[]
    cursor?: colaboratorsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ColaboratorsScalarFieldEnum | ColaboratorsScalarFieldEnum[]
  }


  /**
   * forms.form_services
   */
  export type forms$form_servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_services
     */
    select?: form_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: form_servicesInclude<ExtArgs> | null
    where?: form_servicesWhereInput
    orderBy?: form_servicesOrderByWithRelationInput | form_servicesOrderByWithRelationInput[]
    cursor?: form_servicesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Form_servicesScalarFieldEnum | Form_servicesScalarFieldEnum[]
  }


  /**
   * forms without action
   */
  export type formsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the forms
     */
    select?: formsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: formsInclude<ExtArgs> | null
  }



  /**
   * Model frequencies
   */

  export type AggregateFrequencies = {
    _count: FrequenciesCountAggregateOutputType | null
    _avg: FrequenciesAvgAggregateOutputType | null
    _sum: FrequenciesSumAggregateOutputType | null
    _min: FrequenciesMinAggregateOutputType | null
    _max: FrequenciesMaxAggregateOutputType | null
  }

  export type FrequenciesAvgAggregateOutputType = {
    id: number | null
    service_id: number | null
    value: number | null
  }

  export type FrequenciesSumAggregateOutputType = {
    id: number | null
    service_id: number | null
    value: number | null
  }

  export type FrequenciesMinAggregateOutputType = {
    id: number | null
    frequency: string | null
    service_id: number | null
    created_at: Date | null
    updated_at: Date | null
    value: number | null
  }

  export type FrequenciesMaxAggregateOutputType = {
    id: number | null
    frequency: string | null
    service_id: number | null
    created_at: Date | null
    updated_at: Date | null
    value: number | null
  }

  export type FrequenciesCountAggregateOutputType = {
    id: number
    frequency: number
    service_id: number
    created_at: number
    updated_at: number
    value: number
    _all: number
  }


  export type FrequenciesAvgAggregateInputType = {
    id?: true
    service_id?: true
    value?: true
  }

  export type FrequenciesSumAggregateInputType = {
    id?: true
    service_id?: true
    value?: true
  }

  export type FrequenciesMinAggregateInputType = {
    id?: true
    frequency?: true
    service_id?: true
    created_at?: true
    updated_at?: true
    value?: true
  }

  export type FrequenciesMaxAggregateInputType = {
    id?: true
    frequency?: true
    service_id?: true
    created_at?: true
    updated_at?: true
    value?: true
  }

  export type FrequenciesCountAggregateInputType = {
    id?: true
    frequency?: true
    service_id?: true
    created_at?: true
    updated_at?: true
    value?: true
    _all?: true
  }

  export type FrequenciesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which frequencies to aggregate.
     */
    where?: frequenciesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of frequencies to fetch.
     */
    orderBy?: frequenciesOrderByWithRelationInput | frequenciesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: frequenciesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` frequencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` frequencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned frequencies
    **/
    _count?: true | FrequenciesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FrequenciesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FrequenciesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FrequenciesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FrequenciesMaxAggregateInputType
  }

  export type GetFrequenciesAggregateType<T extends FrequenciesAggregateArgs> = {
        [P in keyof T & keyof AggregateFrequencies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFrequencies[P]>
      : GetScalarType<T[P], AggregateFrequencies[P]>
  }




  export type frequenciesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: frequenciesWhereInput
    orderBy?: frequenciesOrderByWithAggregationInput | frequenciesOrderByWithAggregationInput[]
    by: FrequenciesScalarFieldEnum[] | FrequenciesScalarFieldEnum
    having?: frequenciesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FrequenciesCountAggregateInputType | true
    _avg?: FrequenciesAvgAggregateInputType
    _sum?: FrequenciesSumAggregateInputType
    _min?: FrequenciesMinAggregateInputType
    _max?: FrequenciesMaxAggregateInputType
  }

  export type FrequenciesGroupByOutputType = {
    id: number
    frequency: string
    service_id: number
    created_at: Date
    updated_at: Date
    value: number | null
    _count: FrequenciesCountAggregateOutputType | null
    _avg: FrequenciesAvgAggregateOutputType | null
    _sum: FrequenciesSumAggregateOutputType | null
    _min: FrequenciesMinAggregateOutputType | null
    _max: FrequenciesMaxAggregateOutputType | null
  }

  type GetFrequenciesGroupByPayload<T extends frequenciesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FrequenciesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FrequenciesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FrequenciesGroupByOutputType[P]>
            : GetScalarType<T[P], FrequenciesGroupByOutputType[P]>
        }
      >
    >


  export type frequenciesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    frequency?: boolean
    service_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    value?: boolean
    colaborator_services?: boolean | frequencies$colaborator_servicesArgs<ExtArgs>
    services?: boolean | servicesDefaultArgs<ExtArgs>
    _count?: boolean | FrequenciesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["frequencies"]>

  export type frequenciesSelectScalar = {
    id?: boolean
    frequency?: boolean
    service_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    value?: boolean
  }

  export type frequenciesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colaborator_services?: boolean | frequencies$colaborator_servicesArgs<ExtArgs>
    services?: boolean | servicesDefaultArgs<ExtArgs>
    _count?: boolean | FrequenciesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $frequenciesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "frequencies"
    objects: {
      colaborator_services: Prisma.$colaborator_servicesPayload<ExtArgs>[]
      services: Prisma.$servicesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      frequency: string
      service_id: number
      created_at: Date
      updated_at: Date
      value: number | null
    }, ExtArgs["result"]["frequencies"]>
    composites: {}
  }


  type frequenciesGetPayload<S extends boolean | null | undefined | frequenciesDefaultArgs> = $Result.GetResult<Prisma.$frequenciesPayload, S>

  type frequenciesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<frequenciesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FrequenciesCountAggregateInputType | true
    }

  export interface frequenciesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['frequencies'], meta: { name: 'frequencies' } }
    /**
     * Find zero or one Frequencies that matches the filter.
     * @param {frequenciesFindUniqueArgs} args - Arguments to find a Frequencies
     * @example
     * // Get one Frequencies
     * const frequencies = await prisma.frequencies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends frequenciesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, frequenciesFindUniqueArgs<ExtArgs>>
    ): Prisma__frequenciesClient<$Result.GetResult<Prisma.$frequenciesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Frequencies that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {frequenciesFindUniqueOrThrowArgs} args - Arguments to find a Frequencies
     * @example
     * // Get one Frequencies
     * const frequencies = await prisma.frequencies.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends frequenciesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, frequenciesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__frequenciesClient<$Result.GetResult<Prisma.$frequenciesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Frequencies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {frequenciesFindFirstArgs} args - Arguments to find a Frequencies
     * @example
     * // Get one Frequencies
     * const frequencies = await prisma.frequencies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends frequenciesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, frequenciesFindFirstArgs<ExtArgs>>
    ): Prisma__frequenciesClient<$Result.GetResult<Prisma.$frequenciesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Frequencies that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {frequenciesFindFirstOrThrowArgs} args - Arguments to find a Frequencies
     * @example
     * // Get one Frequencies
     * const frequencies = await prisma.frequencies.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends frequenciesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, frequenciesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__frequenciesClient<$Result.GetResult<Prisma.$frequenciesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Frequencies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {frequenciesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Frequencies
     * const frequencies = await prisma.frequencies.findMany()
     * 
     * // Get first 10 Frequencies
     * const frequencies = await prisma.frequencies.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const frequenciesWithIdOnly = await prisma.frequencies.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends frequenciesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, frequenciesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$frequenciesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Frequencies.
     * @param {frequenciesCreateArgs} args - Arguments to create a Frequencies.
     * @example
     * // Create one Frequencies
     * const Frequencies = await prisma.frequencies.create({
     *   data: {
     *     // ... data to create a Frequencies
     *   }
     * })
     * 
    **/
    create<T extends frequenciesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, frequenciesCreateArgs<ExtArgs>>
    ): Prisma__frequenciesClient<$Result.GetResult<Prisma.$frequenciesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Frequencies.
     *     @param {frequenciesCreateManyArgs} args - Arguments to create many Frequencies.
     *     @example
     *     // Create many Frequencies
     *     const frequencies = await prisma.frequencies.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends frequenciesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, frequenciesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Frequencies.
     * @param {frequenciesDeleteArgs} args - Arguments to delete one Frequencies.
     * @example
     * // Delete one Frequencies
     * const Frequencies = await prisma.frequencies.delete({
     *   where: {
     *     // ... filter to delete one Frequencies
     *   }
     * })
     * 
    **/
    delete<T extends frequenciesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, frequenciesDeleteArgs<ExtArgs>>
    ): Prisma__frequenciesClient<$Result.GetResult<Prisma.$frequenciesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Frequencies.
     * @param {frequenciesUpdateArgs} args - Arguments to update one Frequencies.
     * @example
     * // Update one Frequencies
     * const frequencies = await prisma.frequencies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends frequenciesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, frequenciesUpdateArgs<ExtArgs>>
    ): Prisma__frequenciesClient<$Result.GetResult<Prisma.$frequenciesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Frequencies.
     * @param {frequenciesDeleteManyArgs} args - Arguments to filter Frequencies to delete.
     * @example
     * // Delete a few Frequencies
     * const { count } = await prisma.frequencies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends frequenciesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, frequenciesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Frequencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {frequenciesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Frequencies
     * const frequencies = await prisma.frequencies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends frequenciesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, frequenciesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Frequencies.
     * @param {frequenciesUpsertArgs} args - Arguments to update or create a Frequencies.
     * @example
     * // Update or create a Frequencies
     * const frequencies = await prisma.frequencies.upsert({
     *   create: {
     *     // ... data to create a Frequencies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Frequencies we want to update
     *   }
     * })
    **/
    upsert<T extends frequenciesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, frequenciesUpsertArgs<ExtArgs>>
    ): Prisma__frequenciesClient<$Result.GetResult<Prisma.$frequenciesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Frequencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {frequenciesCountArgs} args - Arguments to filter Frequencies to count.
     * @example
     * // Count the number of Frequencies
     * const count = await prisma.frequencies.count({
     *   where: {
     *     // ... the filter for the Frequencies we want to count
     *   }
     * })
    **/
    count<T extends frequenciesCountArgs>(
      args?: Subset<T, frequenciesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FrequenciesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Frequencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrequenciesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FrequenciesAggregateArgs>(args: Subset<T, FrequenciesAggregateArgs>): Prisma.PrismaPromise<GetFrequenciesAggregateType<T>>

    /**
     * Group by Frequencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {frequenciesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends frequenciesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: frequenciesGroupByArgs['orderBy'] }
        : { orderBy?: frequenciesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, frequenciesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFrequenciesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the frequencies model
   */
  readonly fields: frequenciesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for frequencies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__frequenciesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    colaborator_services<T extends frequencies$colaborator_servicesArgs<ExtArgs> = {}>(args?: Subset<T, frequencies$colaborator_servicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$colaborator_servicesPayload<ExtArgs>, T, 'findMany'> | Null>;

    services<T extends servicesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, servicesDefaultArgs<ExtArgs>>): Prisma__servicesClient<$Result.GetResult<Prisma.$servicesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the frequencies model
   */ 
  interface frequenciesFieldRefs {
    readonly id: FieldRef<"frequencies", 'Int'>
    readonly frequency: FieldRef<"frequencies", 'String'>
    readonly service_id: FieldRef<"frequencies", 'Int'>
    readonly created_at: FieldRef<"frequencies", 'DateTime'>
    readonly updated_at: FieldRef<"frequencies", 'DateTime'>
    readonly value: FieldRef<"frequencies", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * frequencies findUnique
   */
  export type frequenciesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the frequencies
     */
    select?: frequenciesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: frequenciesInclude<ExtArgs> | null
    /**
     * Filter, which frequencies to fetch.
     */
    where: frequenciesWhereUniqueInput
  }


  /**
   * frequencies findUniqueOrThrow
   */
  export type frequenciesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the frequencies
     */
    select?: frequenciesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: frequenciesInclude<ExtArgs> | null
    /**
     * Filter, which frequencies to fetch.
     */
    where: frequenciesWhereUniqueInput
  }


  /**
   * frequencies findFirst
   */
  export type frequenciesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the frequencies
     */
    select?: frequenciesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: frequenciesInclude<ExtArgs> | null
    /**
     * Filter, which frequencies to fetch.
     */
    where?: frequenciesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of frequencies to fetch.
     */
    orderBy?: frequenciesOrderByWithRelationInput | frequenciesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for frequencies.
     */
    cursor?: frequenciesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` frequencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` frequencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of frequencies.
     */
    distinct?: FrequenciesScalarFieldEnum | FrequenciesScalarFieldEnum[]
  }


  /**
   * frequencies findFirstOrThrow
   */
  export type frequenciesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the frequencies
     */
    select?: frequenciesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: frequenciesInclude<ExtArgs> | null
    /**
     * Filter, which frequencies to fetch.
     */
    where?: frequenciesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of frequencies to fetch.
     */
    orderBy?: frequenciesOrderByWithRelationInput | frequenciesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for frequencies.
     */
    cursor?: frequenciesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` frequencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` frequencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of frequencies.
     */
    distinct?: FrequenciesScalarFieldEnum | FrequenciesScalarFieldEnum[]
  }


  /**
   * frequencies findMany
   */
  export type frequenciesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the frequencies
     */
    select?: frequenciesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: frequenciesInclude<ExtArgs> | null
    /**
     * Filter, which frequencies to fetch.
     */
    where?: frequenciesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of frequencies to fetch.
     */
    orderBy?: frequenciesOrderByWithRelationInput | frequenciesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing frequencies.
     */
    cursor?: frequenciesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` frequencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` frequencies.
     */
    skip?: number
    distinct?: FrequenciesScalarFieldEnum | FrequenciesScalarFieldEnum[]
  }


  /**
   * frequencies create
   */
  export type frequenciesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the frequencies
     */
    select?: frequenciesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: frequenciesInclude<ExtArgs> | null
    /**
     * The data needed to create a frequencies.
     */
    data: XOR<frequenciesCreateInput, frequenciesUncheckedCreateInput>
  }


  /**
   * frequencies createMany
   */
  export type frequenciesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many frequencies.
     */
    data: frequenciesCreateManyInput | frequenciesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * frequencies update
   */
  export type frequenciesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the frequencies
     */
    select?: frequenciesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: frequenciesInclude<ExtArgs> | null
    /**
     * The data needed to update a frequencies.
     */
    data: XOR<frequenciesUpdateInput, frequenciesUncheckedUpdateInput>
    /**
     * Choose, which frequencies to update.
     */
    where: frequenciesWhereUniqueInput
  }


  /**
   * frequencies updateMany
   */
  export type frequenciesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update frequencies.
     */
    data: XOR<frequenciesUpdateManyMutationInput, frequenciesUncheckedUpdateManyInput>
    /**
     * Filter which frequencies to update
     */
    where?: frequenciesWhereInput
  }


  /**
   * frequencies upsert
   */
  export type frequenciesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the frequencies
     */
    select?: frequenciesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: frequenciesInclude<ExtArgs> | null
    /**
     * The filter to search for the frequencies to update in case it exists.
     */
    where: frequenciesWhereUniqueInput
    /**
     * In case the frequencies found by the `where` argument doesn't exist, create a new frequencies with this data.
     */
    create: XOR<frequenciesCreateInput, frequenciesUncheckedCreateInput>
    /**
     * In case the frequencies was found with the provided `where` argument, update it with this data.
     */
    update: XOR<frequenciesUpdateInput, frequenciesUncheckedUpdateInput>
  }


  /**
   * frequencies delete
   */
  export type frequenciesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the frequencies
     */
    select?: frequenciesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: frequenciesInclude<ExtArgs> | null
    /**
     * Filter which frequencies to delete.
     */
    where: frequenciesWhereUniqueInput
  }


  /**
   * frequencies deleteMany
   */
  export type frequenciesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which frequencies to delete
     */
    where?: frequenciesWhereInput
  }


  /**
   * frequencies.colaborator_services
   */
  export type frequencies$colaborator_servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborator_services
     */
    select?: colaborator_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaborator_servicesInclude<ExtArgs> | null
    where?: colaborator_servicesWhereInput
    orderBy?: colaborator_servicesOrderByWithRelationInput | colaborator_servicesOrderByWithRelationInput[]
    cursor?: colaborator_servicesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Colaborator_servicesScalarFieldEnum | Colaborator_servicesScalarFieldEnum[]
  }


  /**
   * frequencies without action
   */
  export type frequenciesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the frequencies
     */
    select?: frequenciesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: frequenciesInclude<ExtArgs> | null
  }



  /**
   * Model services
   */

  export type AggregateServices = {
    _count: ServicesCountAggregateOutputType | null
    _avg: ServicesAvgAggregateOutputType | null
    _sum: ServicesSumAggregateOutputType | null
    _min: ServicesMinAggregateOutputType | null
    _max: ServicesMaxAggregateOutputType | null
  }

  export type ServicesAvgAggregateOutputType = {
    id: number | null
    base_price: number | null
    colaborator_percent: number | null
    colaborator_value: number | null
    repass_percent: number | null
    repass_value: number | null
    profit: number | null
  }

  export type ServicesSumAggregateOutputType = {
    id: number | null
    base_price: number | null
    colaborator_percent: number | null
    colaborator_value: number | null
    repass_percent: number | null
    repass_value: number | null
    profit: number | null
  }

  export type ServicesMinAggregateOutputType = {
    id: number | null
    name: string | null
    base_price: number | null
    colaborator_percent: number | null
    colaborator_value: number | null
    repass_percent: number | null
    repass_value: number | null
    profit: number | null
    genre: string | null
    created_at: Date | null
    updated_at: Date | null
    description: string | null
  }

  export type ServicesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    base_price: number | null
    colaborator_percent: number | null
    colaborator_value: number | null
    repass_percent: number | null
    repass_value: number | null
    profit: number | null
    genre: string | null
    created_at: Date | null
    updated_at: Date | null
    description: string | null
  }

  export type ServicesCountAggregateOutputType = {
    id: number
    name: number
    base_price: number
    colaborator_percent: number
    colaborator_value: number
    repass_percent: number
    repass_value: number
    profit: number
    genre: number
    created_at: number
    updated_at: number
    description: number
    _all: number
  }


  export type ServicesAvgAggregateInputType = {
    id?: true
    base_price?: true
    colaborator_percent?: true
    colaborator_value?: true
    repass_percent?: true
    repass_value?: true
    profit?: true
  }

  export type ServicesSumAggregateInputType = {
    id?: true
    base_price?: true
    colaborator_percent?: true
    colaborator_value?: true
    repass_percent?: true
    repass_value?: true
    profit?: true
  }

  export type ServicesMinAggregateInputType = {
    id?: true
    name?: true
    base_price?: true
    colaborator_percent?: true
    colaborator_value?: true
    repass_percent?: true
    repass_value?: true
    profit?: true
    genre?: true
    created_at?: true
    updated_at?: true
    description?: true
  }

  export type ServicesMaxAggregateInputType = {
    id?: true
    name?: true
    base_price?: true
    colaborator_percent?: true
    colaborator_value?: true
    repass_percent?: true
    repass_value?: true
    profit?: true
    genre?: true
    created_at?: true
    updated_at?: true
    description?: true
  }

  export type ServicesCountAggregateInputType = {
    id?: true
    name?: true
    base_price?: true
    colaborator_percent?: true
    colaborator_value?: true
    repass_percent?: true
    repass_value?: true
    profit?: true
    genre?: true
    created_at?: true
    updated_at?: true
    description?: true
    _all?: true
  }

  export type ServicesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which services to aggregate.
     */
    where?: servicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of services to fetch.
     */
    orderBy?: servicesOrderByWithRelationInput | servicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: servicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned services
    **/
    _count?: true | ServicesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServicesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServicesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServicesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServicesMaxAggregateInputType
  }

  export type GetServicesAggregateType<T extends ServicesAggregateArgs> = {
        [P in keyof T & keyof AggregateServices]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServices[P]>
      : GetScalarType<T[P], AggregateServices[P]>
  }




  export type servicesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: servicesWhereInput
    orderBy?: servicesOrderByWithAggregationInput | servicesOrderByWithAggregationInput[]
    by: ServicesScalarFieldEnum[] | ServicesScalarFieldEnum
    having?: servicesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServicesCountAggregateInputType | true
    _avg?: ServicesAvgAggregateInputType
    _sum?: ServicesSumAggregateInputType
    _min?: ServicesMinAggregateInputType
    _max?: ServicesMaxAggregateInputType
  }

  export type ServicesGroupByOutputType = {
    id: number
    name: string
    base_price: number
    colaborator_percent: number
    colaborator_value: number
    repass_percent: number
    repass_value: number
    profit: number
    genre: string
    created_at: Date
    updated_at: Date
    description: string | null
    _count: ServicesCountAggregateOutputType | null
    _avg: ServicesAvgAggregateOutputType | null
    _sum: ServicesSumAggregateOutputType | null
    _min: ServicesMinAggregateOutputType | null
    _max: ServicesMaxAggregateOutputType | null
  }

  type GetServicesGroupByPayload<T extends servicesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServicesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServicesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServicesGroupByOutputType[P]>
            : GetScalarType<T[P], ServicesGroupByOutputType[P]>
        }
      >
    >


  export type servicesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    base_price?: boolean
    colaborator_percent?: boolean
    colaborator_value?: boolean
    repass_percent?: boolean
    repass_value?: boolean
    profit?: boolean
    genre?: boolean
    created_at?: boolean
    updated_at?: boolean
    description?: boolean
    colaborator_services?: boolean | services$colaborator_servicesArgs<ExtArgs>
    form_services?: boolean | services$form_servicesArgs<ExtArgs>
    frequencies?: boolean | services$frequenciesArgs<ExtArgs>
    _count?: boolean | ServicesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["services"]>

  export type servicesSelectScalar = {
    id?: boolean
    name?: boolean
    base_price?: boolean
    colaborator_percent?: boolean
    colaborator_value?: boolean
    repass_percent?: boolean
    repass_value?: boolean
    profit?: boolean
    genre?: boolean
    created_at?: boolean
    updated_at?: boolean
    description?: boolean
  }

  export type servicesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colaborator_services?: boolean | services$colaborator_servicesArgs<ExtArgs>
    form_services?: boolean | services$form_servicesArgs<ExtArgs>
    frequencies?: boolean | services$frequenciesArgs<ExtArgs>
    _count?: boolean | ServicesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $servicesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "services"
    objects: {
      colaborator_services: Prisma.$colaborator_servicesPayload<ExtArgs>[]
      form_services: Prisma.$form_servicesPayload<ExtArgs>[]
      frequencies: Prisma.$frequenciesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      base_price: number
      colaborator_percent: number
      colaborator_value: number
      repass_percent: number
      repass_value: number
      profit: number
      genre: string
      created_at: Date
      updated_at: Date
      description: string | null
    }, ExtArgs["result"]["services"]>
    composites: {}
  }


  type servicesGetPayload<S extends boolean | null | undefined | servicesDefaultArgs> = $Result.GetResult<Prisma.$servicesPayload, S>

  type servicesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<servicesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ServicesCountAggregateInputType | true
    }

  export interface servicesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['services'], meta: { name: 'services' } }
    /**
     * Find zero or one Services that matches the filter.
     * @param {servicesFindUniqueArgs} args - Arguments to find a Services
     * @example
     * // Get one Services
     * const services = await prisma.services.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends servicesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, servicesFindUniqueArgs<ExtArgs>>
    ): Prisma__servicesClient<$Result.GetResult<Prisma.$servicesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Services that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {servicesFindUniqueOrThrowArgs} args - Arguments to find a Services
     * @example
     * // Get one Services
     * const services = await prisma.services.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends servicesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, servicesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__servicesClient<$Result.GetResult<Prisma.$servicesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {servicesFindFirstArgs} args - Arguments to find a Services
     * @example
     * // Get one Services
     * const services = await prisma.services.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends servicesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, servicesFindFirstArgs<ExtArgs>>
    ): Prisma__servicesClient<$Result.GetResult<Prisma.$servicesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Services that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {servicesFindFirstOrThrowArgs} args - Arguments to find a Services
     * @example
     * // Get one Services
     * const services = await prisma.services.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends servicesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, servicesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__servicesClient<$Result.GetResult<Prisma.$servicesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {servicesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Services
     * const services = await prisma.services.findMany()
     * 
     * // Get first 10 Services
     * const services = await prisma.services.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const servicesWithIdOnly = await prisma.services.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends servicesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, servicesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$servicesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Services.
     * @param {servicesCreateArgs} args - Arguments to create a Services.
     * @example
     * // Create one Services
     * const Services = await prisma.services.create({
     *   data: {
     *     // ... data to create a Services
     *   }
     * })
     * 
    **/
    create<T extends servicesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, servicesCreateArgs<ExtArgs>>
    ): Prisma__servicesClient<$Result.GetResult<Prisma.$servicesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Services.
     *     @param {servicesCreateManyArgs} args - Arguments to create many Services.
     *     @example
     *     // Create many Services
     *     const services = await prisma.services.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends servicesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, servicesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Services.
     * @param {servicesDeleteArgs} args - Arguments to delete one Services.
     * @example
     * // Delete one Services
     * const Services = await prisma.services.delete({
     *   where: {
     *     // ... filter to delete one Services
     *   }
     * })
     * 
    **/
    delete<T extends servicesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, servicesDeleteArgs<ExtArgs>>
    ): Prisma__servicesClient<$Result.GetResult<Prisma.$servicesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Services.
     * @param {servicesUpdateArgs} args - Arguments to update one Services.
     * @example
     * // Update one Services
     * const services = await prisma.services.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends servicesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, servicesUpdateArgs<ExtArgs>>
    ): Prisma__servicesClient<$Result.GetResult<Prisma.$servicesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Services.
     * @param {servicesDeleteManyArgs} args - Arguments to filter Services to delete.
     * @example
     * // Delete a few Services
     * const { count } = await prisma.services.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends servicesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, servicesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {servicesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Services
     * const services = await prisma.services.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends servicesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, servicesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Services.
     * @param {servicesUpsertArgs} args - Arguments to update or create a Services.
     * @example
     * // Update or create a Services
     * const services = await prisma.services.upsert({
     *   create: {
     *     // ... data to create a Services
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Services we want to update
     *   }
     * })
    **/
    upsert<T extends servicesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, servicesUpsertArgs<ExtArgs>>
    ): Prisma__servicesClient<$Result.GetResult<Prisma.$servicesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {servicesCountArgs} args - Arguments to filter Services to count.
     * @example
     * // Count the number of Services
     * const count = await prisma.services.count({
     *   where: {
     *     // ... the filter for the Services we want to count
     *   }
     * })
    **/
    count<T extends servicesCountArgs>(
      args?: Subset<T, servicesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServicesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServicesAggregateArgs>(args: Subset<T, ServicesAggregateArgs>): Prisma.PrismaPromise<GetServicesAggregateType<T>>

    /**
     * Group by Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {servicesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends servicesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: servicesGroupByArgs['orderBy'] }
        : { orderBy?: servicesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, servicesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServicesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the services model
   */
  readonly fields: servicesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for services.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__servicesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    colaborator_services<T extends services$colaborator_servicesArgs<ExtArgs> = {}>(args?: Subset<T, services$colaborator_servicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$colaborator_servicesPayload<ExtArgs>, T, 'findMany'> | Null>;

    form_services<T extends services$form_servicesArgs<ExtArgs> = {}>(args?: Subset<T, services$form_servicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$form_servicesPayload<ExtArgs>, T, 'findMany'> | Null>;

    frequencies<T extends services$frequenciesArgs<ExtArgs> = {}>(args?: Subset<T, services$frequenciesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$frequenciesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the services model
   */ 
  interface servicesFieldRefs {
    readonly id: FieldRef<"services", 'Int'>
    readonly name: FieldRef<"services", 'String'>
    readonly base_price: FieldRef<"services", 'Float'>
    readonly colaborator_percent: FieldRef<"services", 'Float'>
    readonly colaborator_value: FieldRef<"services", 'Float'>
    readonly repass_percent: FieldRef<"services", 'Float'>
    readonly repass_value: FieldRef<"services", 'Float'>
    readonly profit: FieldRef<"services", 'Float'>
    readonly genre: FieldRef<"services", 'String'>
    readonly created_at: FieldRef<"services", 'DateTime'>
    readonly updated_at: FieldRef<"services", 'DateTime'>
    readonly description: FieldRef<"services", 'String'>
  }
    

  // Custom InputTypes

  /**
   * services findUnique
   */
  export type servicesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the services
     */
    select?: servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: servicesInclude<ExtArgs> | null
    /**
     * Filter, which services to fetch.
     */
    where: servicesWhereUniqueInput
  }


  /**
   * services findUniqueOrThrow
   */
  export type servicesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the services
     */
    select?: servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: servicesInclude<ExtArgs> | null
    /**
     * Filter, which services to fetch.
     */
    where: servicesWhereUniqueInput
  }


  /**
   * services findFirst
   */
  export type servicesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the services
     */
    select?: servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: servicesInclude<ExtArgs> | null
    /**
     * Filter, which services to fetch.
     */
    where?: servicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of services to fetch.
     */
    orderBy?: servicesOrderByWithRelationInput | servicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for services.
     */
    cursor?: servicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of services.
     */
    distinct?: ServicesScalarFieldEnum | ServicesScalarFieldEnum[]
  }


  /**
   * services findFirstOrThrow
   */
  export type servicesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the services
     */
    select?: servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: servicesInclude<ExtArgs> | null
    /**
     * Filter, which services to fetch.
     */
    where?: servicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of services to fetch.
     */
    orderBy?: servicesOrderByWithRelationInput | servicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for services.
     */
    cursor?: servicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of services.
     */
    distinct?: ServicesScalarFieldEnum | ServicesScalarFieldEnum[]
  }


  /**
   * services findMany
   */
  export type servicesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the services
     */
    select?: servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: servicesInclude<ExtArgs> | null
    /**
     * Filter, which services to fetch.
     */
    where?: servicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of services to fetch.
     */
    orderBy?: servicesOrderByWithRelationInput | servicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing services.
     */
    cursor?: servicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` services.
     */
    skip?: number
    distinct?: ServicesScalarFieldEnum | ServicesScalarFieldEnum[]
  }


  /**
   * services create
   */
  export type servicesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the services
     */
    select?: servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: servicesInclude<ExtArgs> | null
    /**
     * The data needed to create a services.
     */
    data: XOR<servicesCreateInput, servicesUncheckedCreateInput>
  }


  /**
   * services createMany
   */
  export type servicesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many services.
     */
    data: servicesCreateManyInput | servicesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * services update
   */
  export type servicesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the services
     */
    select?: servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: servicesInclude<ExtArgs> | null
    /**
     * The data needed to update a services.
     */
    data: XOR<servicesUpdateInput, servicesUncheckedUpdateInput>
    /**
     * Choose, which services to update.
     */
    where: servicesWhereUniqueInput
  }


  /**
   * services updateMany
   */
  export type servicesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update services.
     */
    data: XOR<servicesUpdateManyMutationInput, servicesUncheckedUpdateManyInput>
    /**
     * Filter which services to update
     */
    where?: servicesWhereInput
  }


  /**
   * services upsert
   */
  export type servicesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the services
     */
    select?: servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: servicesInclude<ExtArgs> | null
    /**
     * The filter to search for the services to update in case it exists.
     */
    where: servicesWhereUniqueInput
    /**
     * In case the services found by the `where` argument doesn't exist, create a new services with this data.
     */
    create: XOR<servicesCreateInput, servicesUncheckedCreateInput>
    /**
     * In case the services was found with the provided `where` argument, update it with this data.
     */
    update: XOR<servicesUpdateInput, servicesUncheckedUpdateInput>
  }


  /**
   * services delete
   */
  export type servicesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the services
     */
    select?: servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: servicesInclude<ExtArgs> | null
    /**
     * Filter which services to delete.
     */
    where: servicesWhereUniqueInput
  }


  /**
   * services deleteMany
   */
  export type servicesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which services to delete
     */
    where?: servicesWhereInput
  }


  /**
   * services.colaborator_services
   */
  export type services$colaborator_servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the colaborator_services
     */
    select?: colaborator_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: colaborator_servicesInclude<ExtArgs> | null
    where?: colaborator_servicesWhereInput
    orderBy?: colaborator_servicesOrderByWithRelationInput | colaborator_servicesOrderByWithRelationInput[]
    cursor?: colaborator_servicesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Colaborator_servicesScalarFieldEnum | Colaborator_servicesScalarFieldEnum[]
  }


  /**
   * services.form_services
   */
  export type services$form_servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the form_services
     */
    select?: form_servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: form_servicesInclude<ExtArgs> | null
    where?: form_servicesWhereInput
    orderBy?: form_servicesOrderByWithRelationInput | form_servicesOrderByWithRelationInput[]
    cursor?: form_servicesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Form_servicesScalarFieldEnum | Form_servicesScalarFieldEnum[]
  }


  /**
   * services.frequencies
   */
  export type services$frequenciesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the frequencies
     */
    select?: frequenciesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: frequenciesInclude<ExtArgs> | null
    where?: frequenciesWhereInput
    orderBy?: frequenciesOrderByWithRelationInput | frequenciesOrderByWithRelationInput[]
    cursor?: frequenciesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FrequenciesScalarFieldEnum | FrequenciesScalarFieldEnum[]
  }


  /**
   * services without action
   */
  export type servicesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the services
     */
    select?: servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: servicesInclude<ExtArgs> | null
  }



  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    created_at: Date | null
    updated_at: Date | null
    name: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    created_at: Date | null
    updated_at: Date | null
    name: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    email: number
    password: number
    created_at: number
    updated_at: number
    name: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    created_at?: true
    updated_at?: true
    name?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    created_at?: true
    updated_at?: true
    name?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    created_at?: true
    updated_at?: true
    name?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    email: string
    password: string
    created_at: Date
    updated_at: Date
    name: string | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
    updated_at?: boolean
    name?: boolean
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
    updated_at?: boolean
    name?: boolean
  }


  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      created_at: Date
      updated_at: Date
      name: string | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usersCreateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usersDeleteArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpsertArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'Int'>
    readonly email: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly created_at: FieldRef<"users", 'DateTime'>
    readonly updated_at: FieldRef<"users", 'DateTime'>
    readonly name: FieldRef<"users", 'String'>
  }
    

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }


  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AddressesScalarFieldEnum: {
    id: 'id',
    cep: 'cep',
    street: 'street',
    neighborhood: 'neighborhood',
    city: 'city',
    state: 'state',
    number: 'number',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type AddressesScalarFieldEnum = (typeof AddressesScalarFieldEnum)[keyof typeof AddressesScalarFieldEnum]


  export const Colaborator_servicesScalarFieldEnum: {
    id: 'id',
    colaborator_id: 'colaborator_id',
    service_id: 'service_id',
    frequency_id: 'frequency_id'
  };

  export type Colaborator_servicesScalarFieldEnum = (typeof Colaborator_servicesScalarFieldEnum)[keyof typeof Colaborator_servicesScalarFieldEnum]


  export const ColaboratorsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    cpf: 'cpf',
    genre: 'genre',
    email: 'email',
    tel: 'tel',
    birthday: 'birthday',
    company_name: 'company_name',
    registered: 'registered',
    form_id: 'form_id',
    address_id: 'address_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ColaboratorsScalarFieldEnum = (typeof ColaboratorsScalarFieldEnum)[keyof typeof ColaboratorsScalarFieldEnum]


  export const Form_servicesScalarFieldEnum: {
    id: 'id',
    form_id: 'form_id',
    service_id: 'service_id'
  };

  export type Form_servicesScalarFieldEnum = (typeof Form_servicesScalarFieldEnum)[keyof typeof Form_servicesScalarFieldEnum]


  export const FormsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    identify: 'identify',
    created_at: 'created_at',
    updated_at: 'updated_at',
    is_deleted: 'is_deleted'
  };

  export type FormsScalarFieldEnum = (typeof FormsScalarFieldEnum)[keyof typeof FormsScalarFieldEnum]


  export const FrequenciesScalarFieldEnum: {
    id: 'id',
    frequency: 'frequency',
    service_id: 'service_id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    value: 'value'
  };

  export type FrequenciesScalarFieldEnum = (typeof FrequenciesScalarFieldEnum)[keyof typeof FrequenciesScalarFieldEnum]


  export const ServicesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    base_price: 'base_price',
    colaborator_percent: 'colaborator_percent',
    colaborator_value: 'colaborator_value',
    repass_percent: 'repass_percent',
    repass_value: 'repass_value',
    profit: 'profit',
    genre: 'genre',
    created_at: 'created_at',
    updated_at: 'updated_at',
    description: 'description'
  };

  export type ServicesScalarFieldEnum = (typeof ServicesScalarFieldEnum)[keyof typeof ServicesScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    created_at: 'created_at',
    updated_at: 'updated_at',
    name: 'name'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type addressesWhereInput = {
    AND?: addressesWhereInput | addressesWhereInput[]
    OR?: addressesWhereInput[]
    NOT?: addressesWhereInput | addressesWhereInput[]
    id?: IntFilter<"addresses"> | number
    cep?: StringFilter<"addresses"> | string
    street?: StringFilter<"addresses"> | string
    neighborhood?: StringFilter<"addresses"> | string
    city?: StringFilter<"addresses"> | string
    state?: StringFilter<"addresses"> | string
    number?: StringFilter<"addresses"> | string
    created_at?: DateTimeFilter<"addresses"> | Date | string
    updated_at?: DateTimeFilter<"addresses"> | Date | string
    colaborators?: ColaboratorsListRelationFilter
  }

  export type addressesOrderByWithRelationInput = {
    id?: SortOrder
    cep?: SortOrder
    street?: SortOrder
    neighborhood?: SortOrder
    city?: SortOrder
    state?: SortOrder
    number?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    colaborators?: colaboratorsOrderByRelationAggregateInput
  }

  export type addressesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: addressesWhereInput | addressesWhereInput[]
    OR?: addressesWhereInput[]
    NOT?: addressesWhereInput | addressesWhereInput[]
    cep?: StringFilter<"addresses"> | string
    street?: StringFilter<"addresses"> | string
    neighborhood?: StringFilter<"addresses"> | string
    city?: StringFilter<"addresses"> | string
    state?: StringFilter<"addresses"> | string
    number?: StringFilter<"addresses"> | string
    created_at?: DateTimeFilter<"addresses"> | Date | string
    updated_at?: DateTimeFilter<"addresses"> | Date | string
    colaborators?: ColaboratorsListRelationFilter
  }, "id">

  export type addressesOrderByWithAggregationInput = {
    id?: SortOrder
    cep?: SortOrder
    street?: SortOrder
    neighborhood?: SortOrder
    city?: SortOrder
    state?: SortOrder
    number?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: addressesCountOrderByAggregateInput
    _avg?: addressesAvgOrderByAggregateInput
    _max?: addressesMaxOrderByAggregateInput
    _min?: addressesMinOrderByAggregateInput
    _sum?: addressesSumOrderByAggregateInput
  }

  export type addressesScalarWhereWithAggregatesInput = {
    AND?: addressesScalarWhereWithAggregatesInput | addressesScalarWhereWithAggregatesInput[]
    OR?: addressesScalarWhereWithAggregatesInput[]
    NOT?: addressesScalarWhereWithAggregatesInput | addressesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"addresses"> | number
    cep?: StringWithAggregatesFilter<"addresses"> | string
    street?: StringWithAggregatesFilter<"addresses"> | string
    neighborhood?: StringWithAggregatesFilter<"addresses"> | string
    city?: StringWithAggregatesFilter<"addresses"> | string
    state?: StringWithAggregatesFilter<"addresses"> | string
    number?: StringWithAggregatesFilter<"addresses"> | string
    created_at?: DateTimeWithAggregatesFilter<"addresses"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"addresses"> | Date | string
  }

  export type colaborator_servicesWhereInput = {
    AND?: colaborator_servicesWhereInput | colaborator_servicesWhereInput[]
    OR?: colaborator_servicesWhereInput[]
    NOT?: colaborator_servicesWhereInput | colaborator_servicesWhereInput[]
    id?: IntFilter<"colaborator_services"> | number
    colaborator_id?: IntFilter<"colaborator_services"> | number
    service_id?: IntFilter<"colaborator_services"> | number
    frequency_id?: IntFilter<"colaborator_services"> | number
    colaborators?: XOR<ColaboratorsRelationFilter, colaboratorsWhereInput>
    services?: XOR<ServicesRelationFilter, servicesWhereInput>
    frequencies?: XOR<FrequenciesRelationFilter, frequenciesWhereInput>
  }

  export type colaborator_servicesOrderByWithRelationInput = {
    id?: SortOrder
    colaborator_id?: SortOrder
    service_id?: SortOrder
    frequency_id?: SortOrder
    colaborators?: colaboratorsOrderByWithRelationInput
    services?: servicesOrderByWithRelationInput
    frequencies?: frequenciesOrderByWithRelationInput
  }

  export type colaborator_servicesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: colaborator_servicesWhereInput | colaborator_servicesWhereInput[]
    OR?: colaborator_servicesWhereInput[]
    NOT?: colaborator_servicesWhereInput | colaborator_servicesWhereInput[]
    colaborator_id?: IntFilter<"colaborator_services"> | number
    service_id?: IntFilter<"colaborator_services"> | number
    frequency_id?: IntFilter<"colaborator_services"> | number
    colaborators?: XOR<ColaboratorsRelationFilter, colaboratorsWhereInput>
    services?: XOR<ServicesRelationFilter, servicesWhereInput>
    frequencies?: XOR<FrequenciesRelationFilter, frequenciesWhereInput>
  }, "id">

  export type colaborator_servicesOrderByWithAggregationInput = {
    id?: SortOrder
    colaborator_id?: SortOrder
    service_id?: SortOrder
    frequency_id?: SortOrder
    _count?: colaborator_servicesCountOrderByAggregateInput
    _avg?: colaborator_servicesAvgOrderByAggregateInput
    _max?: colaborator_servicesMaxOrderByAggregateInput
    _min?: colaborator_servicesMinOrderByAggregateInput
    _sum?: colaborator_servicesSumOrderByAggregateInput
  }

  export type colaborator_servicesScalarWhereWithAggregatesInput = {
    AND?: colaborator_servicesScalarWhereWithAggregatesInput | colaborator_servicesScalarWhereWithAggregatesInput[]
    OR?: colaborator_servicesScalarWhereWithAggregatesInput[]
    NOT?: colaborator_servicesScalarWhereWithAggregatesInput | colaborator_servicesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"colaborator_services"> | number
    colaborator_id?: IntWithAggregatesFilter<"colaborator_services"> | number
    service_id?: IntWithAggregatesFilter<"colaborator_services"> | number
    frequency_id?: IntWithAggregatesFilter<"colaborator_services"> | number
  }

  export type colaboratorsWhereInput = {
    AND?: colaboratorsWhereInput | colaboratorsWhereInput[]
    OR?: colaboratorsWhereInput[]
    NOT?: colaboratorsWhereInput | colaboratorsWhereInput[]
    id?: IntFilter<"colaborators"> | number
    name?: StringFilter<"colaborators"> | string
    cpf?: StringFilter<"colaborators"> | string
    genre?: StringFilter<"colaborators"> | string
    email?: StringFilter<"colaborators"> | string
    tel?: StringFilter<"colaborators"> | string
    birthday?: StringFilter<"colaborators"> | string
    company_name?: StringFilter<"colaborators"> | string
    registered?: BoolFilter<"colaborators"> | boolean
    form_id?: IntFilter<"colaborators"> | number
    address_id?: IntFilter<"colaborators"> | number
    created_at?: DateTimeFilter<"colaborators"> | Date | string
    updated_at?: DateTimeFilter<"colaborators"> | Date | string
    colaborator_services?: Colaborator_servicesListRelationFilter
    forms?: XOR<FormsRelationFilter, formsWhereInput>
    addresses?: XOR<AddressesRelationFilter, addressesWhereInput>
  }

  export type colaboratorsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    genre?: SortOrder
    email?: SortOrder
    tel?: SortOrder
    birthday?: SortOrder
    company_name?: SortOrder
    registered?: SortOrder
    form_id?: SortOrder
    address_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    colaborator_services?: colaborator_servicesOrderByRelationAggregateInput
    forms?: formsOrderByWithRelationInput
    addresses?: addressesOrderByWithRelationInput
  }

  export type colaboratorsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: colaboratorsWhereInput | colaboratorsWhereInput[]
    OR?: colaboratorsWhereInput[]
    NOT?: colaboratorsWhereInput | colaboratorsWhereInput[]
    name?: StringFilter<"colaborators"> | string
    cpf?: StringFilter<"colaborators"> | string
    genre?: StringFilter<"colaborators"> | string
    email?: StringFilter<"colaborators"> | string
    tel?: StringFilter<"colaborators"> | string
    birthday?: StringFilter<"colaborators"> | string
    company_name?: StringFilter<"colaborators"> | string
    registered?: BoolFilter<"colaborators"> | boolean
    form_id?: IntFilter<"colaborators"> | number
    address_id?: IntFilter<"colaborators"> | number
    created_at?: DateTimeFilter<"colaborators"> | Date | string
    updated_at?: DateTimeFilter<"colaborators"> | Date | string
    colaborator_services?: Colaborator_servicesListRelationFilter
    forms?: XOR<FormsRelationFilter, formsWhereInput>
    addresses?: XOR<AddressesRelationFilter, addressesWhereInput>
  }, "id">

  export type colaboratorsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    genre?: SortOrder
    email?: SortOrder
    tel?: SortOrder
    birthday?: SortOrder
    company_name?: SortOrder
    registered?: SortOrder
    form_id?: SortOrder
    address_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: colaboratorsCountOrderByAggregateInput
    _avg?: colaboratorsAvgOrderByAggregateInput
    _max?: colaboratorsMaxOrderByAggregateInput
    _min?: colaboratorsMinOrderByAggregateInput
    _sum?: colaboratorsSumOrderByAggregateInput
  }

  export type colaboratorsScalarWhereWithAggregatesInput = {
    AND?: colaboratorsScalarWhereWithAggregatesInput | colaboratorsScalarWhereWithAggregatesInput[]
    OR?: colaboratorsScalarWhereWithAggregatesInput[]
    NOT?: colaboratorsScalarWhereWithAggregatesInput | colaboratorsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"colaborators"> | number
    name?: StringWithAggregatesFilter<"colaborators"> | string
    cpf?: StringWithAggregatesFilter<"colaborators"> | string
    genre?: StringWithAggregatesFilter<"colaborators"> | string
    email?: StringWithAggregatesFilter<"colaborators"> | string
    tel?: StringWithAggregatesFilter<"colaborators"> | string
    birthday?: StringWithAggregatesFilter<"colaborators"> | string
    company_name?: StringWithAggregatesFilter<"colaborators"> | string
    registered?: BoolWithAggregatesFilter<"colaborators"> | boolean
    form_id?: IntWithAggregatesFilter<"colaborators"> | number
    address_id?: IntWithAggregatesFilter<"colaborators"> | number
    created_at?: DateTimeWithAggregatesFilter<"colaborators"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"colaborators"> | Date | string
  }

  export type form_servicesWhereInput = {
    AND?: form_servicesWhereInput | form_servicesWhereInput[]
    OR?: form_servicesWhereInput[]
    NOT?: form_servicesWhereInput | form_servicesWhereInput[]
    id?: IntFilter<"form_services"> | number
    form_id?: IntFilter<"form_services"> | number
    service_id?: IntFilter<"form_services"> | number
    forms?: XOR<FormsRelationFilter, formsWhereInput>
    services?: XOR<ServicesRelationFilter, servicesWhereInput>
  }

  export type form_servicesOrderByWithRelationInput = {
    id?: SortOrder
    form_id?: SortOrder
    service_id?: SortOrder
    forms?: formsOrderByWithRelationInput
    services?: servicesOrderByWithRelationInput
  }

  export type form_servicesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: form_servicesWhereInput | form_servicesWhereInput[]
    OR?: form_servicesWhereInput[]
    NOT?: form_servicesWhereInput | form_servicesWhereInput[]
    form_id?: IntFilter<"form_services"> | number
    service_id?: IntFilter<"form_services"> | number
    forms?: XOR<FormsRelationFilter, formsWhereInput>
    services?: XOR<ServicesRelationFilter, servicesWhereInput>
  }, "id">

  export type form_servicesOrderByWithAggregationInput = {
    id?: SortOrder
    form_id?: SortOrder
    service_id?: SortOrder
    _count?: form_servicesCountOrderByAggregateInput
    _avg?: form_servicesAvgOrderByAggregateInput
    _max?: form_servicesMaxOrderByAggregateInput
    _min?: form_servicesMinOrderByAggregateInput
    _sum?: form_servicesSumOrderByAggregateInput
  }

  export type form_servicesScalarWhereWithAggregatesInput = {
    AND?: form_servicesScalarWhereWithAggregatesInput | form_servicesScalarWhereWithAggregatesInput[]
    OR?: form_servicesScalarWhereWithAggregatesInput[]
    NOT?: form_servicesScalarWhereWithAggregatesInput | form_servicesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"form_services"> | number
    form_id?: IntWithAggregatesFilter<"form_services"> | number
    service_id?: IntWithAggregatesFilter<"form_services"> | number
  }

  export type formsWhereInput = {
    AND?: formsWhereInput | formsWhereInput[]
    OR?: formsWhereInput[]
    NOT?: formsWhereInput | formsWhereInput[]
    id?: IntFilter<"forms"> | number
    name?: StringFilter<"forms"> | string
    identify?: StringFilter<"forms"> | string
    created_at?: DateTimeFilter<"forms"> | Date | string
    updated_at?: DateTimeFilter<"forms"> | Date | string
    is_deleted?: BoolNullableFilter<"forms"> | boolean | null
    colaborators?: ColaboratorsListRelationFilter
    form_services?: Form_servicesListRelationFilter
  }

  export type formsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    identify?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    is_deleted?: SortOrderInput | SortOrder
    colaborators?: colaboratorsOrderByRelationAggregateInput
    form_services?: form_servicesOrderByRelationAggregateInput
  }

  export type formsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: formsWhereInput | formsWhereInput[]
    OR?: formsWhereInput[]
    NOT?: formsWhereInput | formsWhereInput[]
    name?: StringFilter<"forms"> | string
    identify?: StringFilter<"forms"> | string
    created_at?: DateTimeFilter<"forms"> | Date | string
    updated_at?: DateTimeFilter<"forms"> | Date | string
    is_deleted?: BoolNullableFilter<"forms"> | boolean | null
    colaborators?: ColaboratorsListRelationFilter
    form_services?: Form_servicesListRelationFilter
  }, "id">

  export type formsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    identify?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    is_deleted?: SortOrderInput | SortOrder
    _count?: formsCountOrderByAggregateInput
    _avg?: formsAvgOrderByAggregateInput
    _max?: formsMaxOrderByAggregateInput
    _min?: formsMinOrderByAggregateInput
    _sum?: formsSumOrderByAggregateInput
  }

  export type formsScalarWhereWithAggregatesInput = {
    AND?: formsScalarWhereWithAggregatesInput | formsScalarWhereWithAggregatesInput[]
    OR?: formsScalarWhereWithAggregatesInput[]
    NOT?: formsScalarWhereWithAggregatesInput | formsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"forms"> | number
    name?: StringWithAggregatesFilter<"forms"> | string
    identify?: StringWithAggregatesFilter<"forms"> | string
    created_at?: DateTimeWithAggregatesFilter<"forms"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"forms"> | Date | string
    is_deleted?: BoolNullableWithAggregatesFilter<"forms"> | boolean | null
  }

  export type frequenciesWhereInput = {
    AND?: frequenciesWhereInput | frequenciesWhereInput[]
    OR?: frequenciesWhereInput[]
    NOT?: frequenciesWhereInput | frequenciesWhereInput[]
    id?: IntFilter<"frequencies"> | number
    frequency?: StringFilter<"frequencies"> | string
    service_id?: IntFilter<"frequencies"> | number
    created_at?: DateTimeFilter<"frequencies"> | Date | string
    updated_at?: DateTimeFilter<"frequencies"> | Date | string
    value?: IntNullableFilter<"frequencies"> | number | null
    colaborator_services?: Colaborator_servicesListRelationFilter
    services?: XOR<ServicesRelationFilter, servicesWhereInput>
  }

  export type frequenciesOrderByWithRelationInput = {
    id?: SortOrder
    frequency?: SortOrder
    service_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    value?: SortOrderInput | SortOrder
    colaborator_services?: colaborator_servicesOrderByRelationAggregateInput
    services?: servicesOrderByWithRelationInput
  }

  export type frequenciesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: frequenciesWhereInput | frequenciesWhereInput[]
    OR?: frequenciesWhereInput[]
    NOT?: frequenciesWhereInput | frequenciesWhereInput[]
    frequency?: StringFilter<"frequencies"> | string
    service_id?: IntFilter<"frequencies"> | number
    created_at?: DateTimeFilter<"frequencies"> | Date | string
    updated_at?: DateTimeFilter<"frequencies"> | Date | string
    value?: IntNullableFilter<"frequencies"> | number | null
    colaborator_services?: Colaborator_servicesListRelationFilter
    services?: XOR<ServicesRelationFilter, servicesWhereInput>
  }, "id">

  export type frequenciesOrderByWithAggregationInput = {
    id?: SortOrder
    frequency?: SortOrder
    service_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    value?: SortOrderInput | SortOrder
    _count?: frequenciesCountOrderByAggregateInput
    _avg?: frequenciesAvgOrderByAggregateInput
    _max?: frequenciesMaxOrderByAggregateInput
    _min?: frequenciesMinOrderByAggregateInput
    _sum?: frequenciesSumOrderByAggregateInput
  }

  export type frequenciesScalarWhereWithAggregatesInput = {
    AND?: frequenciesScalarWhereWithAggregatesInput | frequenciesScalarWhereWithAggregatesInput[]
    OR?: frequenciesScalarWhereWithAggregatesInput[]
    NOT?: frequenciesScalarWhereWithAggregatesInput | frequenciesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"frequencies"> | number
    frequency?: StringWithAggregatesFilter<"frequencies"> | string
    service_id?: IntWithAggregatesFilter<"frequencies"> | number
    created_at?: DateTimeWithAggregatesFilter<"frequencies"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"frequencies"> | Date | string
    value?: IntNullableWithAggregatesFilter<"frequencies"> | number | null
  }

  export type servicesWhereInput = {
    AND?: servicesWhereInput | servicesWhereInput[]
    OR?: servicesWhereInput[]
    NOT?: servicesWhereInput | servicesWhereInput[]
    id?: IntFilter<"services"> | number
    name?: StringFilter<"services"> | string
    base_price?: FloatFilter<"services"> | number
    colaborator_percent?: FloatFilter<"services"> | number
    colaborator_value?: FloatFilter<"services"> | number
    repass_percent?: FloatFilter<"services"> | number
    repass_value?: FloatFilter<"services"> | number
    profit?: FloatFilter<"services"> | number
    genre?: StringFilter<"services"> | string
    created_at?: DateTimeFilter<"services"> | Date | string
    updated_at?: DateTimeFilter<"services"> | Date | string
    description?: StringNullableFilter<"services"> | string | null
    colaborator_services?: Colaborator_servicesListRelationFilter
    form_services?: Form_servicesListRelationFilter
    frequencies?: FrequenciesListRelationFilter
  }

  export type servicesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    base_price?: SortOrder
    colaborator_percent?: SortOrder
    colaborator_value?: SortOrder
    repass_percent?: SortOrder
    repass_value?: SortOrder
    profit?: SortOrder
    genre?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    description?: SortOrderInput | SortOrder
    colaborator_services?: colaborator_servicesOrderByRelationAggregateInput
    form_services?: form_servicesOrderByRelationAggregateInput
    frequencies?: frequenciesOrderByRelationAggregateInput
  }

  export type servicesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: servicesWhereInput | servicesWhereInput[]
    OR?: servicesWhereInput[]
    NOT?: servicesWhereInput | servicesWhereInput[]
    name?: StringFilter<"services"> | string
    base_price?: FloatFilter<"services"> | number
    colaborator_percent?: FloatFilter<"services"> | number
    colaborator_value?: FloatFilter<"services"> | number
    repass_percent?: FloatFilter<"services"> | number
    repass_value?: FloatFilter<"services"> | number
    profit?: FloatFilter<"services"> | number
    genre?: StringFilter<"services"> | string
    created_at?: DateTimeFilter<"services"> | Date | string
    updated_at?: DateTimeFilter<"services"> | Date | string
    description?: StringNullableFilter<"services"> | string | null
    colaborator_services?: Colaborator_servicesListRelationFilter
    form_services?: Form_servicesListRelationFilter
    frequencies?: FrequenciesListRelationFilter
  }, "id">

  export type servicesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    base_price?: SortOrder
    colaborator_percent?: SortOrder
    colaborator_value?: SortOrder
    repass_percent?: SortOrder
    repass_value?: SortOrder
    profit?: SortOrder
    genre?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: servicesCountOrderByAggregateInput
    _avg?: servicesAvgOrderByAggregateInput
    _max?: servicesMaxOrderByAggregateInput
    _min?: servicesMinOrderByAggregateInput
    _sum?: servicesSumOrderByAggregateInput
  }

  export type servicesScalarWhereWithAggregatesInput = {
    AND?: servicesScalarWhereWithAggregatesInput | servicesScalarWhereWithAggregatesInput[]
    OR?: servicesScalarWhereWithAggregatesInput[]
    NOT?: servicesScalarWhereWithAggregatesInput | servicesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"services"> | number
    name?: StringWithAggregatesFilter<"services"> | string
    base_price?: FloatWithAggregatesFilter<"services"> | number
    colaborator_percent?: FloatWithAggregatesFilter<"services"> | number
    colaborator_value?: FloatWithAggregatesFilter<"services"> | number
    repass_percent?: FloatWithAggregatesFilter<"services"> | number
    repass_value?: FloatWithAggregatesFilter<"services"> | number
    profit?: FloatWithAggregatesFilter<"services"> | number
    genre?: StringWithAggregatesFilter<"services"> | string
    created_at?: DateTimeWithAggregatesFilter<"services"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"services"> | Date | string
    description?: StringNullableWithAggregatesFilter<"services"> | string | null
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: IntFilter<"users"> | number
    email?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    created_at?: DateTimeFilter<"users"> | Date | string
    updated_at?: DateTimeFilter<"users"> | Date | string
    name?: StringNullableFilter<"users"> | string | null
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    name?: SortOrderInput | SortOrder
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    email?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    created_at?: DateTimeFilter<"users"> | Date | string
    updated_at?: DateTimeFilter<"users"> | Date | string
    name?: StringNullableFilter<"users"> | string | null
  }, "id">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    name?: SortOrderInput | SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"users"> | number
    email?: StringWithAggregatesFilter<"users"> | string
    password?: StringWithAggregatesFilter<"users"> | string
    created_at?: DateTimeWithAggregatesFilter<"users"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"users"> | Date | string
    name?: StringNullableWithAggregatesFilter<"users"> | string | null
  }

  export type addressesCreateInput = {
    cep: string
    street: string
    neighborhood: string
    city: string
    state: string
    number: string
    created_at?: Date | string
    updated_at?: Date | string
    colaborators?: colaboratorsCreateNestedManyWithoutAddressesInput
  }

  export type addressesUncheckedCreateInput = {
    id?: number
    cep: string
    street: string
    neighborhood: string
    city: string
    state: string
    number: string
    created_at?: Date | string
    updated_at?: Date | string
    colaborators?: colaboratorsUncheckedCreateNestedManyWithoutAddressesInput
  }

  export type addressesUpdateInput = {
    cep?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    colaborators?: colaboratorsUpdateManyWithoutAddressesNestedInput
  }

  export type addressesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cep?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    colaborators?: colaboratorsUncheckedUpdateManyWithoutAddressesNestedInput
  }

  export type addressesCreateManyInput = {
    id?: number
    cep: string
    street: string
    neighborhood: string
    city: string
    state: string
    number: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type addressesUpdateManyMutationInput = {
    cep?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type addressesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cep?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type colaborator_servicesCreateInput = {
    colaborators: colaboratorsCreateNestedOneWithoutColaborator_servicesInput
    services: servicesCreateNestedOneWithoutColaborator_servicesInput
    frequencies: frequenciesCreateNestedOneWithoutColaborator_servicesInput
  }

  export type colaborator_servicesUncheckedCreateInput = {
    id?: number
    colaborator_id: number
    service_id: number
    frequency_id: number
  }

  export type colaborator_servicesUpdateInput = {
    colaborators?: colaboratorsUpdateOneRequiredWithoutColaborator_servicesNestedInput
    services?: servicesUpdateOneRequiredWithoutColaborator_servicesNestedInput
    frequencies?: frequenciesUpdateOneRequiredWithoutColaborator_servicesNestedInput
  }

  export type colaborator_servicesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    colaborator_id?: IntFieldUpdateOperationsInput | number
    service_id?: IntFieldUpdateOperationsInput | number
    frequency_id?: IntFieldUpdateOperationsInput | number
  }

  export type colaborator_servicesCreateManyInput = {
    id?: number
    colaborator_id: number
    service_id: number
    frequency_id: number
  }

  export type colaborator_servicesUpdateManyMutationInput = {

  }

  export type colaborator_servicesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    colaborator_id?: IntFieldUpdateOperationsInput | number
    service_id?: IntFieldUpdateOperationsInput | number
    frequency_id?: IntFieldUpdateOperationsInput | number
  }

  export type colaboratorsCreateInput = {
    name: string
    cpf: string
    genre: string
    email: string
    tel: string
    birthday: string
    company_name: string
    registered?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    colaborator_services?: colaborator_servicesCreateNestedManyWithoutColaboratorsInput
    forms: formsCreateNestedOneWithoutColaboratorsInput
    addresses: addressesCreateNestedOneWithoutColaboratorsInput
  }

  export type colaboratorsUncheckedCreateInput = {
    id?: number
    name: string
    cpf: string
    genre: string
    email: string
    tel: string
    birthday: string
    company_name: string
    registered?: boolean
    form_id: number
    address_id: number
    created_at?: Date | string
    updated_at?: Date | string
    colaborator_services?: colaborator_servicesUncheckedCreateNestedManyWithoutColaboratorsInput
  }

  export type colaboratorsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    company_name?: StringFieldUpdateOperationsInput | string
    registered?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    colaborator_services?: colaborator_servicesUpdateManyWithoutColaboratorsNestedInput
    forms?: formsUpdateOneRequiredWithoutColaboratorsNestedInput
    addresses?: addressesUpdateOneRequiredWithoutColaboratorsNestedInput
  }

  export type colaboratorsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    company_name?: StringFieldUpdateOperationsInput | string
    registered?: BoolFieldUpdateOperationsInput | boolean
    form_id?: IntFieldUpdateOperationsInput | number
    address_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    colaborator_services?: colaborator_servicesUncheckedUpdateManyWithoutColaboratorsNestedInput
  }

  export type colaboratorsCreateManyInput = {
    id?: number
    name: string
    cpf: string
    genre: string
    email: string
    tel: string
    birthday: string
    company_name: string
    registered?: boolean
    form_id: number
    address_id: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type colaboratorsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    company_name?: StringFieldUpdateOperationsInput | string
    registered?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type colaboratorsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    company_name?: StringFieldUpdateOperationsInput | string
    registered?: BoolFieldUpdateOperationsInput | boolean
    form_id?: IntFieldUpdateOperationsInput | number
    address_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type form_servicesCreateInput = {
    forms: formsCreateNestedOneWithoutForm_servicesInput
    services: servicesCreateNestedOneWithoutForm_servicesInput
  }

  export type form_servicesUncheckedCreateInput = {
    id?: number
    form_id: number
    service_id: number
  }

  export type form_servicesUpdateInput = {
    forms?: formsUpdateOneRequiredWithoutForm_servicesNestedInput
    services?: servicesUpdateOneRequiredWithoutForm_servicesNestedInput
  }

  export type form_servicesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    form_id?: IntFieldUpdateOperationsInput | number
    service_id?: IntFieldUpdateOperationsInput | number
  }

  export type form_servicesCreateManyInput = {
    id?: number
    form_id: number
    service_id: number
  }

  export type form_servicesUpdateManyMutationInput = {

  }

  export type form_servicesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    form_id?: IntFieldUpdateOperationsInput | number
    service_id?: IntFieldUpdateOperationsInput | number
  }

  export type formsCreateInput = {
    name: string
    identify: string
    created_at?: Date | string
    updated_at?: Date | string
    is_deleted?: boolean | null
    colaborators?: colaboratorsCreateNestedManyWithoutFormsInput
    form_services?: form_servicesCreateNestedManyWithoutFormsInput
  }

  export type formsUncheckedCreateInput = {
    id?: number
    name: string
    identify: string
    created_at?: Date | string
    updated_at?: Date | string
    is_deleted?: boolean | null
    colaborators?: colaboratorsUncheckedCreateNestedManyWithoutFormsInput
    form_services?: form_servicesUncheckedCreateNestedManyWithoutFormsInput
  }

  export type formsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    identify?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    colaborators?: colaboratorsUpdateManyWithoutFormsNestedInput
    form_services?: form_servicesUpdateManyWithoutFormsNestedInput
  }

  export type formsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    identify?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    colaborators?: colaboratorsUncheckedUpdateManyWithoutFormsNestedInput
    form_services?: form_servicesUncheckedUpdateManyWithoutFormsNestedInput
  }

  export type formsCreateManyInput = {
    id?: number
    name: string
    identify: string
    created_at?: Date | string
    updated_at?: Date | string
    is_deleted?: boolean | null
  }

  export type formsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    identify?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type formsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    identify?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type frequenciesCreateInput = {
    frequency: string
    created_at?: Date | string
    updated_at?: Date | string
    value?: number | null
    colaborator_services?: colaborator_servicesCreateNestedManyWithoutFrequenciesInput
    services: servicesCreateNestedOneWithoutFrequenciesInput
  }

  export type frequenciesUncheckedCreateInput = {
    id?: number
    frequency: string
    service_id: number
    created_at?: Date | string
    updated_at?: Date | string
    value?: number | null
    colaborator_services?: colaborator_servicesUncheckedCreateNestedManyWithoutFrequenciesInput
  }

  export type frequenciesUpdateInput = {
    frequency?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
    colaborator_services?: colaborator_servicesUpdateManyWithoutFrequenciesNestedInput
    services?: servicesUpdateOneRequiredWithoutFrequenciesNestedInput
  }

  export type frequenciesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    frequency?: StringFieldUpdateOperationsInput | string
    service_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
    colaborator_services?: colaborator_servicesUncheckedUpdateManyWithoutFrequenciesNestedInput
  }

  export type frequenciesCreateManyInput = {
    id?: number
    frequency: string
    service_id: number
    created_at?: Date | string
    updated_at?: Date | string
    value?: number | null
  }

  export type frequenciesUpdateManyMutationInput = {
    frequency?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type frequenciesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    frequency?: StringFieldUpdateOperationsInput | string
    service_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type servicesCreateInput = {
    name: string
    base_price: number
    colaborator_percent: number
    colaborator_value: number
    repass_percent: number
    repass_value: number
    profit: number
    genre: string
    created_at?: Date | string
    updated_at?: Date | string
    description?: string | null
    colaborator_services?: colaborator_servicesCreateNestedManyWithoutServicesInput
    form_services?: form_servicesCreateNestedManyWithoutServicesInput
    frequencies?: frequenciesCreateNestedManyWithoutServicesInput
  }

  export type servicesUncheckedCreateInput = {
    id?: number
    name: string
    base_price: number
    colaborator_percent: number
    colaborator_value: number
    repass_percent: number
    repass_value: number
    profit: number
    genre: string
    created_at?: Date | string
    updated_at?: Date | string
    description?: string | null
    colaborator_services?: colaborator_servicesUncheckedCreateNestedManyWithoutServicesInput
    form_services?: form_servicesUncheckedCreateNestedManyWithoutServicesInput
    frequencies?: frequenciesUncheckedCreateNestedManyWithoutServicesInput
  }

  export type servicesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    base_price?: FloatFieldUpdateOperationsInput | number
    colaborator_percent?: FloatFieldUpdateOperationsInput | number
    colaborator_value?: FloatFieldUpdateOperationsInput | number
    repass_percent?: FloatFieldUpdateOperationsInput | number
    repass_value?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    genre?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    colaborator_services?: colaborator_servicesUpdateManyWithoutServicesNestedInput
    form_services?: form_servicesUpdateManyWithoutServicesNestedInput
    frequencies?: frequenciesUpdateManyWithoutServicesNestedInput
  }

  export type servicesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    base_price?: FloatFieldUpdateOperationsInput | number
    colaborator_percent?: FloatFieldUpdateOperationsInput | number
    colaborator_value?: FloatFieldUpdateOperationsInput | number
    repass_percent?: FloatFieldUpdateOperationsInput | number
    repass_value?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    genre?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    colaborator_services?: colaborator_servicesUncheckedUpdateManyWithoutServicesNestedInput
    form_services?: form_servicesUncheckedUpdateManyWithoutServicesNestedInput
    frequencies?: frequenciesUncheckedUpdateManyWithoutServicesNestedInput
  }

  export type servicesCreateManyInput = {
    id?: number
    name: string
    base_price: number
    colaborator_percent: number
    colaborator_value: number
    repass_percent: number
    repass_value: number
    profit: number
    genre: string
    created_at?: Date | string
    updated_at?: Date | string
    description?: string | null
  }

  export type servicesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    base_price?: FloatFieldUpdateOperationsInput | number
    colaborator_percent?: FloatFieldUpdateOperationsInput | number
    colaborator_value?: FloatFieldUpdateOperationsInput | number
    repass_percent?: FloatFieldUpdateOperationsInput | number
    repass_value?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    genre?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type servicesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    base_price?: FloatFieldUpdateOperationsInput | number
    colaborator_percent?: FloatFieldUpdateOperationsInput | number
    colaborator_value?: FloatFieldUpdateOperationsInput | number
    repass_percent?: FloatFieldUpdateOperationsInput | number
    repass_value?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    genre?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersCreateInput = {
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    name?: string | null
  }

  export type usersUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    name?: string | null
  }

  export type usersUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersCreateManyInput = {
    id?: number
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    name?: string | null
  }

  export type usersUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ColaboratorsListRelationFilter = {
    every?: colaboratorsWhereInput
    some?: colaboratorsWhereInput
    none?: colaboratorsWhereInput
  }

  export type colaboratorsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type addressesCountOrderByAggregateInput = {
    id?: SortOrder
    cep?: SortOrder
    street?: SortOrder
    neighborhood?: SortOrder
    city?: SortOrder
    state?: SortOrder
    number?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type addressesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type addressesMaxOrderByAggregateInput = {
    id?: SortOrder
    cep?: SortOrder
    street?: SortOrder
    neighborhood?: SortOrder
    city?: SortOrder
    state?: SortOrder
    number?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type addressesMinOrderByAggregateInput = {
    id?: SortOrder
    cep?: SortOrder
    street?: SortOrder
    neighborhood?: SortOrder
    city?: SortOrder
    state?: SortOrder
    number?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type addressesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ColaboratorsRelationFilter = {
    is?: colaboratorsWhereInput
    isNot?: colaboratorsWhereInput
  }

  export type ServicesRelationFilter = {
    is?: servicesWhereInput
    isNot?: servicesWhereInput
  }

  export type FrequenciesRelationFilter = {
    is?: frequenciesWhereInput
    isNot?: frequenciesWhereInput
  }

  export type colaborator_servicesCountOrderByAggregateInput = {
    id?: SortOrder
    colaborator_id?: SortOrder
    service_id?: SortOrder
    frequency_id?: SortOrder
  }

  export type colaborator_servicesAvgOrderByAggregateInput = {
    id?: SortOrder
    colaborator_id?: SortOrder
    service_id?: SortOrder
    frequency_id?: SortOrder
  }

  export type colaborator_servicesMaxOrderByAggregateInput = {
    id?: SortOrder
    colaborator_id?: SortOrder
    service_id?: SortOrder
    frequency_id?: SortOrder
  }

  export type colaborator_servicesMinOrderByAggregateInput = {
    id?: SortOrder
    colaborator_id?: SortOrder
    service_id?: SortOrder
    frequency_id?: SortOrder
  }

  export type colaborator_servicesSumOrderByAggregateInput = {
    id?: SortOrder
    colaborator_id?: SortOrder
    service_id?: SortOrder
    frequency_id?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type Colaborator_servicesListRelationFilter = {
    every?: colaborator_servicesWhereInput
    some?: colaborator_servicesWhereInput
    none?: colaborator_servicesWhereInput
  }

  export type FormsRelationFilter = {
    is?: formsWhereInput
    isNot?: formsWhereInput
  }

  export type AddressesRelationFilter = {
    is?: addressesWhereInput
    isNot?: addressesWhereInput
  }

  export type colaborator_servicesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type colaboratorsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    genre?: SortOrder
    email?: SortOrder
    tel?: SortOrder
    birthday?: SortOrder
    company_name?: SortOrder
    registered?: SortOrder
    form_id?: SortOrder
    address_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type colaboratorsAvgOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    address_id?: SortOrder
  }

  export type colaboratorsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    genre?: SortOrder
    email?: SortOrder
    tel?: SortOrder
    birthday?: SortOrder
    company_name?: SortOrder
    registered?: SortOrder
    form_id?: SortOrder
    address_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type colaboratorsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    genre?: SortOrder
    email?: SortOrder
    tel?: SortOrder
    birthday?: SortOrder
    company_name?: SortOrder
    registered?: SortOrder
    form_id?: SortOrder
    address_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type colaboratorsSumOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    address_id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type form_servicesCountOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    service_id?: SortOrder
  }

  export type form_servicesAvgOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    service_id?: SortOrder
  }

  export type form_servicesMaxOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    service_id?: SortOrder
  }

  export type form_servicesMinOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    service_id?: SortOrder
  }

  export type form_servicesSumOrderByAggregateInput = {
    id?: SortOrder
    form_id?: SortOrder
    service_id?: SortOrder
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type Form_servicesListRelationFilter = {
    every?: form_servicesWhereInput
    some?: form_servicesWhereInput
    none?: form_servicesWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type form_servicesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type formsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    identify?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    is_deleted?: SortOrder
  }

  export type formsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type formsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    identify?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    is_deleted?: SortOrder
  }

  export type formsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    identify?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    is_deleted?: SortOrder
  }

  export type formsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type frequenciesCountOrderByAggregateInput = {
    id?: SortOrder
    frequency?: SortOrder
    service_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    value?: SortOrder
  }

  export type frequenciesAvgOrderByAggregateInput = {
    id?: SortOrder
    service_id?: SortOrder
    value?: SortOrder
  }

  export type frequenciesMaxOrderByAggregateInput = {
    id?: SortOrder
    frequency?: SortOrder
    service_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    value?: SortOrder
  }

  export type frequenciesMinOrderByAggregateInput = {
    id?: SortOrder
    frequency?: SortOrder
    service_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    value?: SortOrder
  }

  export type frequenciesSumOrderByAggregateInput = {
    id?: SortOrder
    service_id?: SortOrder
    value?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type FrequenciesListRelationFilter = {
    every?: frequenciesWhereInput
    some?: frequenciesWhereInput
    none?: frequenciesWhereInput
  }

  export type frequenciesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type servicesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    base_price?: SortOrder
    colaborator_percent?: SortOrder
    colaborator_value?: SortOrder
    repass_percent?: SortOrder
    repass_value?: SortOrder
    profit?: SortOrder
    genre?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    description?: SortOrder
  }

  export type servicesAvgOrderByAggregateInput = {
    id?: SortOrder
    base_price?: SortOrder
    colaborator_percent?: SortOrder
    colaborator_value?: SortOrder
    repass_percent?: SortOrder
    repass_value?: SortOrder
    profit?: SortOrder
  }

  export type servicesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    base_price?: SortOrder
    colaborator_percent?: SortOrder
    colaborator_value?: SortOrder
    repass_percent?: SortOrder
    repass_value?: SortOrder
    profit?: SortOrder
    genre?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    description?: SortOrder
  }

  export type servicesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    base_price?: SortOrder
    colaborator_percent?: SortOrder
    colaborator_value?: SortOrder
    repass_percent?: SortOrder
    repass_value?: SortOrder
    profit?: SortOrder
    genre?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    description?: SortOrder
  }

  export type servicesSumOrderByAggregateInput = {
    id?: SortOrder
    base_price?: SortOrder
    colaborator_percent?: SortOrder
    colaborator_value?: SortOrder
    repass_percent?: SortOrder
    repass_value?: SortOrder
    profit?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    name?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    name?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    name?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type colaboratorsCreateNestedManyWithoutAddressesInput = {
    create?: XOR<colaboratorsCreateWithoutAddressesInput, colaboratorsUncheckedCreateWithoutAddressesInput> | colaboratorsCreateWithoutAddressesInput[] | colaboratorsUncheckedCreateWithoutAddressesInput[]
    connectOrCreate?: colaboratorsCreateOrConnectWithoutAddressesInput | colaboratorsCreateOrConnectWithoutAddressesInput[]
    createMany?: colaboratorsCreateManyAddressesInputEnvelope
    connect?: colaboratorsWhereUniqueInput | colaboratorsWhereUniqueInput[]
  }

  export type colaboratorsUncheckedCreateNestedManyWithoutAddressesInput = {
    create?: XOR<colaboratorsCreateWithoutAddressesInput, colaboratorsUncheckedCreateWithoutAddressesInput> | colaboratorsCreateWithoutAddressesInput[] | colaboratorsUncheckedCreateWithoutAddressesInput[]
    connectOrCreate?: colaboratorsCreateOrConnectWithoutAddressesInput | colaboratorsCreateOrConnectWithoutAddressesInput[]
    createMany?: colaboratorsCreateManyAddressesInputEnvelope
    connect?: colaboratorsWhereUniqueInput | colaboratorsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type colaboratorsUpdateManyWithoutAddressesNestedInput = {
    create?: XOR<colaboratorsCreateWithoutAddressesInput, colaboratorsUncheckedCreateWithoutAddressesInput> | colaboratorsCreateWithoutAddressesInput[] | colaboratorsUncheckedCreateWithoutAddressesInput[]
    connectOrCreate?: colaboratorsCreateOrConnectWithoutAddressesInput | colaboratorsCreateOrConnectWithoutAddressesInput[]
    upsert?: colaboratorsUpsertWithWhereUniqueWithoutAddressesInput | colaboratorsUpsertWithWhereUniqueWithoutAddressesInput[]
    createMany?: colaboratorsCreateManyAddressesInputEnvelope
    set?: colaboratorsWhereUniqueInput | colaboratorsWhereUniqueInput[]
    disconnect?: colaboratorsWhereUniqueInput | colaboratorsWhereUniqueInput[]
    delete?: colaboratorsWhereUniqueInput | colaboratorsWhereUniqueInput[]
    connect?: colaboratorsWhereUniqueInput | colaboratorsWhereUniqueInput[]
    update?: colaboratorsUpdateWithWhereUniqueWithoutAddressesInput | colaboratorsUpdateWithWhereUniqueWithoutAddressesInput[]
    updateMany?: colaboratorsUpdateManyWithWhereWithoutAddressesInput | colaboratorsUpdateManyWithWhereWithoutAddressesInput[]
    deleteMany?: colaboratorsScalarWhereInput | colaboratorsScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type colaboratorsUncheckedUpdateManyWithoutAddressesNestedInput = {
    create?: XOR<colaboratorsCreateWithoutAddressesInput, colaboratorsUncheckedCreateWithoutAddressesInput> | colaboratorsCreateWithoutAddressesInput[] | colaboratorsUncheckedCreateWithoutAddressesInput[]
    connectOrCreate?: colaboratorsCreateOrConnectWithoutAddressesInput | colaboratorsCreateOrConnectWithoutAddressesInput[]
    upsert?: colaboratorsUpsertWithWhereUniqueWithoutAddressesInput | colaboratorsUpsertWithWhereUniqueWithoutAddressesInput[]
    createMany?: colaboratorsCreateManyAddressesInputEnvelope
    set?: colaboratorsWhereUniqueInput | colaboratorsWhereUniqueInput[]
    disconnect?: colaboratorsWhereUniqueInput | colaboratorsWhereUniqueInput[]
    delete?: colaboratorsWhereUniqueInput | colaboratorsWhereUniqueInput[]
    connect?: colaboratorsWhereUniqueInput | colaboratorsWhereUniqueInput[]
    update?: colaboratorsUpdateWithWhereUniqueWithoutAddressesInput | colaboratorsUpdateWithWhereUniqueWithoutAddressesInput[]
    updateMany?: colaboratorsUpdateManyWithWhereWithoutAddressesInput | colaboratorsUpdateManyWithWhereWithoutAddressesInput[]
    deleteMany?: colaboratorsScalarWhereInput | colaboratorsScalarWhereInput[]
  }

  export type colaboratorsCreateNestedOneWithoutColaborator_servicesInput = {
    create?: XOR<colaboratorsCreateWithoutColaborator_servicesInput, colaboratorsUncheckedCreateWithoutColaborator_servicesInput>
    connectOrCreate?: colaboratorsCreateOrConnectWithoutColaborator_servicesInput
    connect?: colaboratorsWhereUniqueInput
  }

  export type servicesCreateNestedOneWithoutColaborator_servicesInput = {
    create?: XOR<servicesCreateWithoutColaborator_servicesInput, servicesUncheckedCreateWithoutColaborator_servicesInput>
    connectOrCreate?: servicesCreateOrConnectWithoutColaborator_servicesInput
    connect?: servicesWhereUniqueInput
  }

  export type frequenciesCreateNestedOneWithoutColaborator_servicesInput = {
    create?: XOR<frequenciesCreateWithoutColaborator_servicesInput, frequenciesUncheckedCreateWithoutColaborator_servicesInput>
    connectOrCreate?: frequenciesCreateOrConnectWithoutColaborator_servicesInput
    connect?: frequenciesWhereUniqueInput
  }

  export type colaboratorsUpdateOneRequiredWithoutColaborator_servicesNestedInput = {
    create?: XOR<colaboratorsCreateWithoutColaborator_servicesInput, colaboratorsUncheckedCreateWithoutColaborator_servicesInput>
    connectOrCreate?: colaboratorsCreateOrConnectWithoutColaborator_servicesInput
    upsert?: colaboratorsUpsertWithoutColaborator_servicesInput
    connect?: colaboratorsWhereUniqueInput
    update?: XOR<XOR<colaboratorsUpdateToOneWithWhereWithoutColaborator_servicesInput, colaboratorsUpdateWithoutColaborator_servicesInput>, colaboratorsUncheckedUpdateWithoutColaborator_servicesInput>
  }

  export type servicesUpdateOneRequiredWithoutColaborator_servicesNestedInput = {
    create?: XOR<servicesCreateWithoutColaborator_servicesInput, servicesUncheckedCreateWithoutColaborator_servicesInput>
    connectOrCreate?: servicesCreateOrConnectWithoutColaborator_servicesInput
    upsert?: servicesUpsertWithoutColaborator_servicesInput
    connect?: servicesWhereUniqueInput
    update?: XOR<XOR<servicesUpdateToOneWithWhereWithoutColaborator_servicesInput, servicesUpdateWithoutColaborator_servicesInput>, servicesUncheckedUpdateWithoutColaborator_servicesInput>
  }

  export type frequenciesUpdateOneRequiredWithoutColaborator_servicesNestedInput = {
    create?: XOR<frequenciesCreateWithoutColaborator_servicesInput, frequenciesUncheckedCreateWithoutColaborator_servicesInput>
    connectOrCreate?: frequenciesCreateOrConnectWithoutColaborator_servicesInput
    upsert?: frequenciesUpsertWithoutColaborator_servicesInput
    connect?: frequenciesWhereUniqueInput
    update?: XOR<XOR<frequenciesUpdateToOneWithWhereWithoutColaborator_servicesInput, frequenciesUpdateWithoutColaborator_servicesInput>, frequenciesUncheckedUpdateWithoutColaborator_servicesInput>
  }

  export type colaborator_servicesCreateNestedManyWithoutColaboratorsInput = {
    create?: XOR<colaborator_servicesCreateWithoutColaboratorsInput, colaborator_servicesUncheckedCreateWithoutColaboratorsInput> | colaborator_servicesCreateWithoutColaboratorsInput[] | colaborator_servicesUncheckedCreateWithoutColaboratorsInput[]
    connectOrCreate?: colaborator_servicesCreateOrConnectWithoutColaboratorsInput | colaborator_servicesCreateOrConnectWithoutColaboratorsInput[]
    createMany?: colaborator_servicesCreateManyColaboratorsInputEnvelope
    connect?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
  }

  export type formsCreateNestedOneWithoutColaboratorsInput = {
    create?: XOR<formsCreateWithoutColaboratorsInput, formsUncheckedCreateWithoutColaboratorsInput>
    connectOrCreate?: formsCreateOrConnectWithoutColaboratorsInput
    connect?: formsWhereUniqueInput
  }

  export type addressesCreateNestedOneWithoutColaboratorsInput = {
    create?: XOR<addressesCreateWithoutColaboratorsInput, addressesUncheckedCreateWithoutColaboratorsInput>
    connectOrCreate?: addressesCreateOrConnectWithoutColaboratorsInput
    connect?: addressesWhereUniqueInput
  }

  export type colaborator_servicesUncheckedCreateNestedManyWithoutColaboratorsInput = {
    create?: XOR<colaborator_servicesCreateWithoutColaboratorsInput, colaborator_servicesUncheckedCreateWithoutColaboratorsInput> | colaborator_servicesCreateWithoutColaboratorsInput[] | colaborator_servicesUncheckedCreateWithoutColaboratorsInput[]
    connectOrCreate?: colaborator_servicesCreateOrConnectWithoutColaboratorsInput | colaborator_servicesCreateOrConnectWithoutColaboratorsInput[]
    createMany?: colaborator_servicesCreateManyColaboratorsInputEnvelope
    connect?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type colaborator_servicesUpdateManyWithoutColaboratorsNestedInput = {
    create?: XOR<colaborator_servicesCreateWithoutColaboratorsInput, colaborator_servicesUncheckedCreateWithoutColaboratorsInput> | colaborator_servicesCreateWithoutColaboratorsInput[] | colaborator_servicesUncheckedCreateWithoutColaboratorsInput[]
    connectOrCreate?: colaborator_servicesCreateOrConnectWithoutColaboratorsInput | colaborator_servicesCreateOrConnectWithoutColaboratorsInput[]
    upsert?: colaborator_servicesUpsertWithWhereUniqueWithoutColaboratorsInput | colaborator_servicesUpsertWithWhereUniqueWithoutColaboratorsInput[]
    createMany?: colaborator_servicesCreateManyColaboratorsInputEnvelope
    set?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
    disconnect?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
    delete?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
    connect?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
    update?: colaborator_servicesUpdateWithWhereUniqueWithoutColaboratorsInput | colaborator_servicesUpdateWithWhereUniqueWithoutColaboratorsInput[]
    updateMany?: colaborator_servicesUpdateManyWithWhereWithoutColaboratorsInput | colaborator_servicesUpdateManyWithWhereWithoutColaboratorsInput[]
    deleteMany?: colaborator_servicesScalarWhereInput | colaborator_servicesScalarWhereInput[]
  }

  export type formsUpdateOneRequiredWithoutColaboratorsNestedInput = {
    create?: XOR<formsCreateWithoutColaboratorsInput, formsUncheckedCreateWithoutColaboratorsInput>
    connectOrCreate?: formsCreateOrConnectWithoutColaboratorsInput
    upsert?: formsUpsertWithoutColaboratorsInput
    connect?: formsWhereUniqueInput
    update?: XOR<XOR<formsUpdateToOneWithWhereWithoutColaboratorsInput, formsUpdateWithoutColaboratorsInput>, formsUncheckedUpdateWithoutColaboratorsInput>
  }

  export type addressesUpdateOneRequiredWithoutColaboratorsNestedInput = {
    create?: XOR<addressesCreateWithoutColaboratorsInput, addressesUncheckedCreateWithoutColaboratorsInput>
    connectOrCreate?: addressesCreateOrConnectWithoutColaboratorsInput
    upsert?: addressesUpsertWithoutColaboratorsInput
    connect?: addressesWhereUniqueInput
    update?: XOR<XOR<addressesUpdateToOneWithWhereWithoutColaboratorsInput, addressesUpdateWithoutColaboratorsInput>, addressesUncheckedUpdateWithoutColaboratorsInput>
  }

  export type colaborator_servicesUncheckedUpdateManyWithoutColaboratorsNestedInput = {
    create?: XOR<colaborator_servicesCreateWithoutColaboratorsInput, colaborator_servicesUncheckedCreateWithoutColaboratorsInput> | colaborator_servicesCreateWithoutColaboratorsInput[] | colaborator_servicesUncheckedCreateWithoutColaboratorsInput[]
    connectOrCreate?: colaborator_servicesCreateOrConnectWithoutColaboratorsInput | colaborator_servicesCreateOrConnectWithoutColaboratorsInput[]
    upsert?: colaborator_servicesUpsertWithWhereUniqueWithoutColaboratorsInput | colaborator_servicesUpsertWithWhereUniqueWithoutColaboratorsInput[]
    createMany?: colaborator_servicesCreateManyColaboratorsInputEnvelope
    set?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
    disconnect?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
    delete?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
    connect?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
    update?: colaborator_servicesUpdateWithWhereUniqueWithoutColaboratorsInput | colaborator_servicesUpdateWithWhereUniqueWithoutColaboratorsInput[]
    updateMany?: colaborator_servicesUpdateManyWithWhereWithoutColaboratorsInput | colaborator_servicesUpdateManyWithWhereWithoutColaboratorsInput[]
    deleteMany?: colaborator_servicesScalarWhereInput | colaborator_servicesScalarWhereInput[]
  }

  export type formsCreateNestedOneWithoutForm_servicesInput = {
    create?: XOR<formsCreateWithoutForm_servicesInput, formsUncheckedCreateWithoutForm_servicesInput>
    connectOrCreate?: formsCreateOrConnectWithoutForm_servicesInput
    connect?: formsWhereUniqueInput
  }

  export type servicesCreateNestedOneWithoutForm_servicesInput = {
    create?: XOR<servicesCreateWithoutForm_servicesInput, servicesUncheckedCreateWithoutForm_servicesInput>
    connectOrCreate?: servicesCreateOrConnectWithoutForm_servicesInput
    connect?: servicesWhereUniqueInput
  }

  export type formsUpdateOneRequiredWithoutForm_servicesNestedInput = {
    create?: XOR<formsCreateWithoutForm_servicesInput, formsUncheckedCreateWithoutForm_servicesInput>
    connectOrCreate?: formsCreateOrConnectWithoutForm_servicesInput
    upsert?: formsUpsertWithoutForm_servicesInput
    connect?: formsWhereUniqueInput
    update?: XOR<XOR<formsUpdateToOneWithWhereWithoutForm_servicesInput, formsUpdateWithoutForm_servicesInput>, formsUncheckedUpdateWithoutForm_servicesInput>
  }

  export type servicesUpdateOneRequiredWithoutForm_servicesNestedInput = {
    create?: XOR<servicesCreateWithoutForm_servicesInput, servicesUncheckedCreateWithoutForm_servicesInput>
    connectOrCreate?: servicesCreateOrConnectWithoutForm_servicesInput
    upsert?: servicesUpsertWithoutForm_servicesInput
    connect?: servicesWhereUniqueInput
    update?: XOR<XOR<servicesUpdateToOneWithWhereWithoutForm_servicesInput, servicesUpdateWithoutForm_servicesInput>, servicesUncheckedUpdateWithoutForm_servicesInput>
  }

  export type colaboratorsCreateNestedManyWithoutFormsInput = {
    create?: XOR<colaboratorsCreateWithoutFormsInput, colaboratorsUncheckedCreateWithoutFormsInput> | colaboratorsCreateWithoutFormsInput[] | colaboratorsUncheckedCreateWithoutFormsInput[]
    connectOrCreate?: colaboratorsCreateOrConnectWithoutFormsInput | colaboratorsCreateOrConnectWithoutFormsInput[]
    createMany?: colaboratorsCreateManyFormsInputEnvelope
    connect?: colaboratorsWhereUniqueInput | colaboratorsWhereUniqueInput[]
  }

  export type form_servicesCreateNestedManyWithoutFormsInput = {
    create?: XOR<form_servicesCreateWithoutFormsInput, form_servicesUncheckedCreateWithoutFormsInput> | form_servicesCreateWithoutFormsInput[] | form_servicesUncheckedCreateWithoutFormsInput[]
    connectOrCreate?: form_servicesCreateOrConnectWithoutFormsInput | form_servicesCreateOrConnectWithoutFormsInput[]
    createMany?: form_servicesCreateManyFormsInputEnvelope
    connect?: form_servicesWhereUniqueInput | form_servicesWhereUniqueInput[]
  }

  export type colaboratorsUncheckedCreateNestedManyWithoutFormsInput = {
    create?: XOR<colaboratorsCreateWithoutFormsInput, colaboratorsUncheckedCreateWithoutFormsInput> | colaboratorsCreateWithoutFormsInput[] | colaboratorsUncheckedCreateWithoutFormsInput[]
    connectOrCreate?: colaboratorsCreateOrConnectWithoutFormsInput | colaboratorsCreateOrConnectWithoutFormsInput[]
    createMany?: colaboratorsCreateManyFormsInputEnvelope
    connect?: colaboratorsWhereUniqueInput | colaboratorsWhereUniqueInput[]
  }

  export type form_servicesUncheckedCreateNestedManyWithoutFormsInput = {
    create?: XOR<form_servicesCreateWithoutFormsInput, form_servicesUncheckedCreateWithoutFormsInput> | form_servicesCreateWithoutFormsInput[] | form_servicesUncheckedCreateWithoutFormsInput[]
    connectOrCreate?: form_servicesCreateOrConnectWithoutFormsInput | form_servicesCreateOrConnectWithoutFormsInput[]
    createMany?: form_servicesCreateManyFormsInputEnvelope
    connect?: form_servicesWhereUniqueInput | form_servicesWhereUniqueInput[]
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type colaboratorsUpdateManyWithoutFormsNestedInput = {
    create?: XOR<colaboratorsCreateWithoutFormsInput, colaboratorsUncheckedCreateWithoutFormsInput> | colaboratorsCreateWithoutFormsInput[] | colaboratorsUncheckedCreateWithoutFormsInput[]
    connectOrCreate?: colaboratorsCreateOrConnectWithoutFormsInput | colaboratorsCreateOrConnectWithoutFormsInput[]
    upsert?: colaboratorsUpsertWithWhereUniqueWithoutFormsInput | colaboratorsUpsertWithWhereUniqueWithoutFormsInput[]
    createMany?: colaboratorsCreateManyFormsInputEnvelope
    set?: colaboratorsWhereUniqueInput | colaboratorsWhereUniqueInput[]
    disconnect?: colaboratorsWhereUniqueInput | colaboratorsWhereUniqueInput[]
    delete?: colaboratorsWhereUniqueInput | colaboratorsWhereUniqueInput[]
    connect?: colaboratorsWhereUniqueInput | colaboratorsWhereUniqueInput[]
    update?: colaboratorsUpdateWithWhereUniqueWithoutFormsInput | colaboratorsUpdateWithWhereUniqueWithoutFormsInput[]
    updateMany?: colaboratorsUpdateManyWithWhereWithoutFormsInput | colaboratorsUpdateManyWithWhereWithoutFormsInput[]
    deleteMany?: colaboratorsScalarWhereInput | colaboratorsScalarWhereInput[]
  }

  export type form_servicesUpdateManyWithoutFormsNestedInput = {
    create?: XOR<form_servicesCreateWithoutFormsInput, form_servicesUncheckedCreateWithoutFormsInput> | form_servicesCreateWithoutFormsInput[] | form_servicesUncheckedCreateWithoutFormsInput[]
    connectOrCreate?: form_servicesCreateOrConnectWithoutFormsInput | form_servicesCreateOrConnectWithoutFormsInput[]
    upsert?: form_servicesUpsertWithWhereUniqueWithoutFormsInput | form_servicesUpsertWithWhereUniqueWithoutFormsInput[]
    createMany?: form_servicesCreateManyFormsInputEnvelope
    set?: form_servicesWhereUniqueInput | form_servicesWhereUniqueInput[]
    disconnect?: form_servicesWhereUniqueInput | form_servicesWhereUniqueInput[]
    delete?: form_servicesWhereUniqueInput | form_servicesWhereUniqueInput[]
    connect?: form_servicesWhereUniqueInput | form_servicesWhereUniqueInput[]
    update?: form_servicesUpdateWithWhereUniqueWithoutFormsInput | form_servicesUpdateWithWhereUniqueWithoutFormsInput[]
    updateMany?: form_servicesUpdateManyWithWhereWithoutFormsInput | form_servicesUpdateManyWithWhereWithoutFormsInput[]
    deleteMany?: form_servicesScalarWhereInput | form_servicesScalarWhereInput[]
  }

  export type colaboratorsUncheckedUpdateManyWithoutFormsNestedInput = {
    create?: XOR<colaboratorsCreateWithoutFormsInput, colaboratorsUncheckedCreateWithoutFormsInput> | colaboratorsCreateWithoutFormsInput[] | colaboratorsUncheckedCreateWithoutFormsInput[]
    connectOrCreate?: colaboratorsCreateOrConnectWithoutFormsInput | colaboratorsCreateOrConnectWithoutFormsInput[]
    upsert?: colaboratorsUpsertWithWhereUniqueWithoutFormsInput | colaboratorsUpsertWithWhereUniqueWithoutFormsInput[]
    createMany?: colaboratorsCreateManyFormsInputEnvelope
    set?: colaboratorsWhereUniqueInput | colaboratorsWhereUniqueInput[]
    disconnect?: colaboratorsWhereUniqueInput | colaboratorsWhereUniqueInput[]
    delete?: colaboratorsWhereUniqueInput | colaboratorsWhereUniqueInput[]
    connect?: colaboratorsWhereUniqueInput | colaboratorsWhereUniqueInput[]
    update?: colaboratorsUpdateWithWhereUniqueWithoutFormsInput | colaboratorsUpdateWithWhereUniqueWithoutFormsInput[]
    updateMany?: colaboratorsUpdateManyWithWhereWithoutFormsInput | colaboratorsUpdateManyWithWhereWithoutFormsInput[]
    deleteMany?: colaboratorsScalarWhereInput | colaboratorsScalarWhereInput[]
  }

  export type form_servicesUncheckedUpdateManyWithoutFormsNestedInput = {
    create?: XOR<form_servicesCreateWithoutFormsInput, form_servicesUncheckedCreateWithoutFormsInput> | form_servicesCreateWithoutFormsInput[] | form_servicesUncheckedCreateWithoutFormsInput[]
    connectOrCreate?: form_servicesCreateOrConnectWithoutFormsInput | form_servicesCreateOrConnectWithoutFormsInput[]
    upsert?: form_servicesUpsertWithWhereUniqueWithoutFormsInput | form_servicesUpsertWithWhereUniqueWithoutFormsInput[]
    createMany?: form_servicesCreateManyFormsInputEnvelope
    set?: form_servicesWhereUniqueInput | form_servicesWhereUniqueInput[]
    disconnect?: form_servicesWhereUniqueInput | form_servicesWhereUniqueInput[]
    delete?: form_servicesWhereUniqueInput | form_servicesWhereUniqueInput[]
    connect?: form_servicesWhereUniqueInput | form_servicesWhereUniqueInput[]
    update?: form_servicesUpdateWithWhereUniqueWithoutFormsInput | form_servicesUpdateWithWhereUniqueWithoutFormsInput[]
    updateMany?: form_servicesUpdateManyWithWhereWithoutFormsInput | form_servicesUpdateManyWithWhereWithoutFormsInput[]
    deleteMany?: form_servicesScalarWhereInput | form_servicesScalarWhereInput[]
  }

  export type colaborator_servicesCreateNestedManyWithoutFrequenciesInput = {
    create?: XOR<colaborator_servicesCreateWithoutFrequenciesInput, colaborator_servicesUncheckedCreateWithoutFrequenciesInput> | colaborator_servicesCreateWithoutFrequenciesInput[] | colaborator_servicesUncheckedCreateWithoutFrequenciesInput[]
    connectOrCreate?: colaborator_servicesCreateOrConnectWithoutFrequenciesInput | colaborator_servicesCreateOrConnectWithoutFrequenciesInput[]
    createMany?: colaborator_servicesCreateManyFrequenciesInputEnvelope
    connect?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
  }

  export type servicesCreateNestedOneWithoutFrequenciesInput = {
    create?: XOR<servicesCreateWithoutFrequenciesInput, servicesUncheckedCreateWithoutFrequenciesInput>
    connectOrCreate?: servicesCreateOrConnectWithoutFrequenciesInput
    connect?: servicesWhereUniqueInput
  }

  export type colaborator_servicesUncheckedCreateNestedManyWithoutFrequenciesInput = {
    create?: XOR<colaborator_servicesCreateWithoutFrequenciesInput, colaborator_servicesUncheckedCreateWithoutFrequenciesInput> | colaborator_servicesCreateWithoutFrequenciesInput[] | colaborator_servicesUncheckedCreateWithoutFrequenciesInput[]
    connectOrCreate?: colaborator_servicesCreateOrConnectWithoutFrequenciesInput | colaborator_servicesCreateOrConnectWithoutFrequenciesInput[]
    createMany?: colaborator_servicesCreateManyFrequenciesInputEnvelope
    connect?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type colaborator_servicesUpdateManyWithoutFrequenciesNestedInput = {
    create?: XOR<colaborator_servicesCreateWithoutFrequenciesInput, colaborator_servicesUncheckedCreateWithoutFrequenciesInput> | colaborator_servicesCreateWithoutFrequenciesInput[] | colaborator_servicesUncheckedCreateWithoutFrequenciesInput[]
    connectOrCreate?: colaborator_servicesCreateOrConnectWithoutFrequenciesInput | colaborator_servicesCreateOrConnectWithoutFrequenciesInput[]
    upsert?: colaborator_servicesUpsertWithWhereUniqueWithoutFrequenciesInput | colaborator_servicesUpsertWithWhereUniqueWithoutFrequenciesInput[]
    createMany?: colaborator_servicesCreateManyFrequenciesInputEnvelope
    set?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
    disconnect?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
    delete?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
    connect?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
    update?: colaborator_servicesUpdateWithWhereUniqueWithoutFrequenciesInput | colaborator_servicesUpdateWithWhereUniqueWithoutFrequenciesInput[]
    updateMany?: colaborator_servicesUpdateManyWithWhereWithoutFrequenciesInput | colaborator_servicesUpdateManyWithWhereWithoutFrequenciesInput[]
    deleteMany?: colaborator_servicesScalarWhereInput | colaborator_servicesScalarWhereInput[]
  }

  export type servicesUpdateOneRequiredWithoutFrequenciesNestedInput = {
    create?: XOR<servicesCreateWithoutFrequenciesInput, servicesUncheckedCreateWithoutFrequenciesInput>
    connectOrCreate?: servicesCreateOrConnectWithoutFrequenciesInput
    upsert?: servicesUpsertWithoutFrequenciesInput
    connect?: servicesWhereUniqueInput
    update?: XOR<XOR<servicesUpdateToOneWithWhereWithoutFrequenciesInput, servicesUpdateWithoutFrequenciesInput>, servicesUncheckedUpdateWithoutFrequenciesInput>
  }

  export type colaborator_servicesUncheckedUpdateManyWithoutFrequenciesNestedInput = {
    create?: XOR<colaborator_servicesCreateWithoutFrequenciesInput, colaborator_servicesUncheckedCreateWithoutFrequenciesInput> | colaborator_servicesCreateWithoutFrequenciesInput[] | colaborator_servicesUncheckedCreateWithoutFrequenciesInput[]
    connectOrCreate?: colaborator_servicesCreateOrConnectWithoutFrequenciesInput | colaborator_servicesCreateOrConnectWithoutFrequenciesInput[]
    upsert?: colaborator_servicesUpsertWithWhereUniqueWithoutFrequenciesInput | colaborator_servicesUpsertWithWhereUniqueWithoutFrequenciesInput[]
    createMany?: colaborator_servicesCreateManyFrequenciesInputEnvelope
    set?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
    disconnect?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
    delete?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
    connect?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
    update?: colaborator_servicesUpdateWithWhereUniqueWithoutFrequenciesInput | colaborator_servicesUpdateWithWhereUniqueWithoutFrequenciesInput[]
    updateMany?: colaborator_servicesUpdateManyWithWhereWithoutFrequenciesInput | colaborator_servicesUpdateManyWithWhereWithoutFrequenciesInput[]
    deleteMany?: colaborator_servicesScalarWhereInput | colaborator_servicesScalarWhereInput[]
  }

  export type colaborator_servicesCreateNestedManyWithoutServicesInput = {
    create?: XOR<colaborator_servicesCreateWithoutServicesInput, colaborator_servicesUncheckedCreateWithoutServicesInput> | colaborator_servicesCreateWithoutServicesInput[] | colaborator_servicesUncheckedCreateWithoutServicesInput[]
    connectOrCreate?: colaborator_servicesCreateOrConnectWithoutServicesInput | colaborator_servicesCreateOrConnectWithoutServicesInput[]
    createMany?: colaborator_servicesCreateManyServicesInputEnvelope
    connect?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
  }

  export type form_servicesCreateNestedManyWithoutServicesInput = {
    create?: XOR<form_servicesCreateWithoutServicesInput, form_servicesUncheckedCreateWithoutServicesInput> | form_servicesCreateWithoutServicesInput[] | form_servicesUncheckedCreateWithoutServicesInput[]
    connectOrCreate?: form_servicesCreateOrConnectWithoutServicesInput | form_servicesCreateOrConnectWithoutServicesInput[]
    createMany?: form_servicesCreateManyServicesInputEnvelope
    connect?: form_servicesWhereUniqueInput | form_servicesWhereUniqueInput[]
  }

  export type frequenciesCreateNestedManyWithoutServicesInput = {
    create?: XOR<frequenciesCreateWithoutServicesInput, frequenciesUncheckedCreateWithoutServicesInput> | frequenciesCreateWithoutServicesInput[] | frequenciesUncheckedCreateWithoutServicesInput[]
    connectOrCreate?: frequenciesCreateOrConnectWithoutServicesInput | frequenciesCreateOrConnectWithoutServicesInput[]
    createMany?: frequenciesCreateManyServicesInputEnvelope
    connect?: frequenciesWhereUniqueInput | frequenciesWhereUniqueInput[]
  }

  export type colaborator_servicesUncheckedCreateNestedManyWithoutServicesInput = {
    create?: XOR<colaborator_servicesCreateWithoutServicesInput, colaborator_servicesUncheckedCreateWithoutServicesInput> | colaborator_servicesCreateWithoutServicesInput[] | colaborator_servicesUncheckedCreateWithoutServicesInput[]
    connectOrCreate?: colaborator_servicesCreateOrConnectWithoutServicesInput | colaborator_servicesCreateOrConnectWithoutServicesInput[]
    createMany?: colaborator_servicesCreateManyServicesInputEnvelope
    connect?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
  }

  export type form_servicesUncheckedCreateNestedManyWithoutServicesInput = {
    create?: XOR<form_servicesCreateWithoutServicesInput, form_servicesUncheckedCreateWithoutServicesInput> | form_servicesCreateWithoutServicesInput[] | form_servicesUncheckedCreateWithoutServicesInput[]
    connectOrCreate?: form_servicesCreateOrConnectWithoutServicesInput | form_servicesCreateOrConnectWithoutServicesInput[]
    createMany?: form_servicesCreateManyServicesInputEnvelope
    connect?: form_servicesWhereUniqueInput | form_servicesWhereUniqueInput[]
  }

  export type frequenciesUncheckedCreateNestedManyWithoutServicesInput = {
    create?: XOR<frequenciesCreateWithoutServicesInput, frequenciesUncheckedCreateWithoutServicesInput> | frequenciesCreateWithoutServicesInput[] | frequenciesUncheckedCreateWithoutServicesInput[]
    connectOrCreate?: frequenciesCreateOrConnectWithoutServicesInput | frequenciesCreateOrConnectWithoutServicesInput[]
    createMany?: frequenciesCreateManyServicesInputEnvelope
    connect?: frequenciesWhereUniqueInput | frequenciesWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type colaborator_servicesUpdateManyWithoutServicesNestedInput = {
    create?: XOR<colaborator_servicesCreateWithoutServicesInput, colaborator_servicesUncheckedCreateWithoutServicesInput> | colaborator_servicesCreateWithoutServicesInput[] | colaborator_servicesUncheckedCreateWithoutServicesInput[]
    connectOrCreate?: colaborator_servicesCreateOrConnectWithoutServicesInput | colaborator_servicesCreateOrConnectWithoutServicesInput[]
    upsert?: colaborator_servicesUpsertWithWhereUniqueWithoutServicesInput | colaborator_servicesUpsertWithWhereUniqueWithoutServicesInput[]
    createMany?: colaborator_servicesCreateManyServicesInputEnvelope
    set?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
    disconnect?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
    delete?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
    connect?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
    update?: colaborator_servicesUpdateWithWhereUniqueWithoutServicesInput | colaborator_servicesUpdateWithWhereUniqueWithoutServicesInput[]
    updateMany?: colaborator_servicesUpdateManyWithWhereWithoutServicesInput | colaborator_servicesUpdateManyWithWhereWithoutServicesInput[]
    deleteMany?: colaborator_servicesScalarWhereInput | colaborator_servicesScalarWhereInput[]
  }

  export type form_servicesUpdateManyWithoutServicesNestedInput = {
    create?: XOR<form_servicesCreateWithoutServicesInput, form_servicesUncheckedCreateWithoutServicesInput> | form_servicesCreateWithoutServicesInput[] | form_servicesUncheckedCreateWithoutServicesInput[]
    connectOrCreate?: form_servicesCreateOrConnectWithoutServicesInput | form_servicesCreateOrConnectWithoutServicesInput[]
    upsert?: form_servicesUpsertWithWhereUniqueWithoutServicesInput | form_servicesUpsertWithWhereUniqueWithoutServicesInput[]
    createMany?: form_servicesCreateManyServicesInputEnvelope
    set?: form_servicesWhereUniqueInput | form_servicesWhereUniqueInput[]
    disconnect?: form_servicesWhereUniqueInput | form_servicesWhereUniqueInput[]
    delete?: form_servicesWhereUniqueInput | form_servicesWhereUniqueInput[]
    connect?: form_servicesWhereUniqueInput | form_servicesWhereUniqueInput[]
    update?: form_servicesUpdateWithWhereUniqueWithoutServicesInput | form_servicesUpdateWithWhereUniqueWithoutServicesInput[]
    updateMany?: form_servicesUpdateManyWithWhereWithoutServicesInput | form_servicesUpdateManyWithWhereWithoutServicesInput[]
    deleteMany?: form_servicesScalarWhereInput | form_servicesScalarWhereInput[]
  }

  export type frequenciesUpdateManyWithoutServicesNestedInput = {
    create?: XOR<frequenciesCreateWithoutServicesInput, frequenciesUncheckedCreateWithoutServicesInput> | frequenciesCreateWithoutServicesInput[] | frequenciesUncheckedCreateWithoutServicesInput[]
    connectOrCreate?: frequenciesCreateOrConnectWithoutServicesInput | frequenciesCreateOrConnectWithoutServicesInput[]
    upsert?: frequenciesUpsertWithWhereUniqueWithoutServicesInput | frequenciesUpsertWithWhereUniqueWithoutServicesInput[]
    createMany?: frequenciesCreateManyServicesInputEnvelope
    set?: frequenciesWhereUniqueInput | frequenciesWhereUniqueInput[]
    disconnect?: frequenciesWhereUniqueInput | frequenciesWhereUniqueInput[]
    delete?: frequenciesWhereUniqueInput | frequenciesWhereUniqueInput[]
    connect?: frequenciesWhereUniqueInput | frequenciesWhereUniqueInput[]
    update?: frequenciesUpdateWithWhereUniqueWithoutServicesInput | frequenciesUpdateWithWhereUniqueWithoutServicesInput[]
    updateMany?: frequenciesUpdateManyWithWhereWithoutServicesInput | frequenciesUpdateManyWithWhereWithoutServicesInput[]
    deleteMany?: frequenciesScalarWhereInput | frequenciesScalarWhereInput[]
  }

  export type colaborator_servicesUncheckedUpdateManyWithoutServicesNestedInput = {
    create?: XOR<colaborator_servicesCreateWithoutServicesInput, colaborator_servicesUncheckedCreateWithoutServicesInput> | colaborator_servicesCreateWithoutServicesInput[] | colaborator_servicesUncheckedCreateWithoutServicesInput[]
    connectOrCreate?: colaborator_servicesCreateOrConnectWithoutServicesInput | colaborator_servicesCreateOrConnectWithoutServicesInput[]
    upsert?: colaborator_servicesUpsertWithWhereUniqueWithoutServicesInput | colaborator_servicesUpsertWithWhereUniqueWithoutServicesInput[]
    createMany?: colaborator_servicesCreateManyServicesInputEnvelope
    set?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
    disconnect?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
    delete?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
    connect?: colaborator_servicesWhereUniqueInput | colaborator_servicesWhereUniqueInput[]
    update?: colaborator_servicesUpdateWithWhereUniqueWithoutServicesInput | colaborator_servicesUpdateWithWhereUniqueWithoutServicesInput[]
    updateMany?: colaborator_servicesUpdateManyWithWhereWithoutServicesInput | colaborator_servicesUpdateManyWithWhereWithoutServicesInput[]
    deleteMany?: colaborator_servicesScalarWhereInput | colaborator_servicesScalarWhereInput[]
  }

  export type form_servicesUncheckedUpdateManyWithoutServicesNestedInput = {
    create?: XOR<form_servicesCreateWithoutServicesInput, form_servicesUncheckedCreateWithoutServicesInput> | form_servicesCreateWithoutServicesInput[] | form_servicesUncheckedCreateWithoutServicesInput[]
    connectOrCreate?: form_servicesCreateOrConnectWithoutServicesInput | form_servicesCreateOrConnectWithoutServicesInput[]
    upsert?: form_servicesUpsertWithWhereUniqueWithoutServicesInput | form_servicesUpsertWithWhereUniqueWithoutServicesInput[]
    createMany?: form_servicesCreateManyServicesInputEnvelope
    set?: form_servicesWhereUniqueInput | form_servicesWhereUniqueInput[]
    disconnect?: form_servicesWhereUniqueInput | form_servicesWhereUniqueInput[]
    delete?: form_servicesWhereUniqueInput | form_servicesWhereUniqueInput[]
    connect?: form_servicesWhereUniqueInput | form_servicesWhereUniqueInput[]
    update?: form_servicesUpdateWithWhereUniqueWithoutServicesInput | form_servicesUpdateWithWhereUniqueWithoutServicesInput[]
    updateMany?: form_servicesUpdateManyWithWhereWithoutServicesInput | form_servicesUpdateManyWithWhereWithoutServicesInput[]
    deleteMany?: form_servicesScalarWhereInput | form_servicesScalarWhereInput[]
  }

  export type frequenciesUncheckedUpdateManyWithoutServicesNestedInput = {
    create?: XOR<frequenciesCreateWithoutServicesInput, frequenciesUncheckedCreateWithoutServicesInput> | frequenciesCreateWithoutServicesInput[] | frequenciesUncheckedCreateWithoutServicesInput[]
    connectOrCreate?: frequenciesCreateOrConnectWithoutServicesInput | frequenciesCreateOrConnectWithoutServicesInput[]
    upsert?: frequenciesUpsertWithWhereUniqueWithoutServicesInput | frequenciesUpsertWithWhereUniqueWithoutServicesInput[]
    createMany?: frequenciesCreateManyServicesInputEnvelope
    set?: frequenciesWhereUniqueInput | frequenciesWhereUniqueInput[]
    disconnect?: frequenciesWhereUniqueInput | frequenciesWhereUniqueInput[]
    delete?: frequenciesWhereUniqueInput | frequenciesWhereUniqueInput[]
    connect?: frequenciesWhereUniqueInput | frequenciesWhereUniqueInput[]
    update?: frequenciesUpdateWithWhereUniqueWithoutServicesInput | frequenciesUpdateWithWhereUniqueWithoutServicesInput[]
    updateMany?: frequenciesUpdateManyWithWhereWithoutServicesInput | frequenciesUpdateManyWithWhereWithoutServicesInput[]
    deleteMany?: frequenciesScalarWhereInput | frequenciesScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type colaboratorsCreateWithoutAddressesInput = {
    name: string
    cpf: string
    genre: string
    email: string
    tel: string
    birthday: string
    company_name: string
    registered?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    colaborator_services?: colaborator_servicesCreateNestedManyWithoutColaboratorsInput
    forms: formsCreateNestedOneWithoutColaboratorsInput
  }

  export type colaboratorsUncheckedCreateWithoutAddressesInput = {
    id?: number
    name: string
    cpf: string
    genre: string
    email: string
    tel: string
    birthday: string
    company_name: string
    registered?: boolean
    form_id: number
    created_at?: Date | string
    updated_at?: Date | string
    colaborator_services?: colaborator_servicesUncheckedCreateNestedManyWithoutColaboratorsInput
  }

  export type colaboratorsCreateOrConnectWithoutAddressesInput = {
    where: colaboratorsWhereUniqueInput
    create: XOR<colaboratorsCreateWithoutAddressesInput, colaboratorsUncheckedCreateWithoutAddressesInput>
  }

  export type colaboratorsCreateManyAddressesInputEnvelope = {
    data: colaboratorsCreateManyAddressesInput | colaboratorsCreateManyAddressesInput[]
    skipDuplicates?: boolean
  }

  export type colaboratorsUpsertWithWhereUniqueWithoutAddressesInput = {
    where: colaboratorsWhereUniqueInput
    update: XOR<colaboratorsUpdateWithoutAddressesInput, colaboratorsUncheckedUpdateWithoutAddressesInput>
    create: XOR<colaboratorsCreateWithoutAddressesInput, colaboratorsUncheckedCreateWithoutAddressesInput>
  }

  export type colaboratorsUpdateWithWhereUniqueWithoutAddressesInput = {
    where: colaboratorsWhereUniqueInput
    data: XOR<colaboratorsUpdateWithoutAddressesInput, colaboratorsUncheckedUpdateWithoutAddressesInput>
  }

  export type colaboratorsUpdateManyWithWhereWithoutAddressesInput = {
    where: colaboratorsScalarWhereInput
    data: XOR<colaboratorsUpdateManyMutationInput, colaboratorsUncheckedUpdateManyWithoutAddressesInput>
  }

  export type colaboratorsScalarWhereInput = {
    AND?: colaboratorsScalarWhereInput | colaboratorsScalarWhereInput[]
    OR?: colaboratorsScalarWhereInput[]
    NOT?: colaboratorsScalarWhereInput | colaboratorsScalarWhereInput[]
    id?: IntFilter<"colaborators"> | number
    name?: StringFilter<"colaborators"> | string
    cpf?: StringFilter<"colaborators"> | string
    genre?: StringFilter<"colaborators"> | string
    email?: StringFilter<"colaborators"> | string
    tel?: StringFilter<"colaborators"> | string
    birthday?: StringFilter<"colaborators"> | string
    company_name?: StringFilter<"colaborators"> | string
    registered?: BoolFilter<"colaborators"> | boolean
    form_id?: IntFilter<"colaborators"> | number
    address_id?: IntFilter<"colaborators"> | number
    created_at?: DateTimeFilter<"colaborators"> | Date | string
    updated_at?: DateTimeFilter<"colaborators"> | Date | string
  }

  export type colaboratorsCreateWithoutColaborator_servicesInput = {
    name: string
    cpf: string
    genre: string
    email: string
    tel: string
    birthday: string
    company_name: string
    registered?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    forms: formsCreateNestedOneWithoutColaboratorsInput
    addresses: addressesCreateNestedOneWithoutColaboratorsInput
  }

  export type colaboratorsUncheckedCreateWithoutColaborator_servicesInput = {
    id?: number
    name: string
    cpf: string
    genre: string
    email: string
    tel: string
    birthday: string
    company_name: string
    registered?: boolean
    form_id: number
    address_id: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type colaboratorsCreateOrConnectWithoutColaborator_servicesInput = {
    where: colaboratorsWhereUniqueInput
    create: XOR<colaboratorsCreateWithoutColaborator_servicesInput, colaboratorsUncheckedCreateWithoutColaborator_servicesInput>
  }

  export type servicesCreateWithoutColaborator_servicesInput = {
    name: string
    base_price: number
    colaborator_percent: number
    colaborator_value: number
    repass_percent: number
    repass_value: number
    profit: number
    genre: string
    created_at?: Date | string
    updated_at?: Date | string
    description?: string | null
    form_services?: form_servicesCreateNestedManyWithoutServicesInput
    frequencies?: frequenciesCreateNestedManyWithoutServicesInput
  }

  export type servicesUncheckedCreateWithoutColaborator_servicesInput = {
    id?: number
    name: string
    base_price: number
    colaborator_percent: number
    colaborator_value: number
    repass_percent: number
    repass_value: number
    profit: number
    genre: string
    created_at?: Date | string
    updated_at?: Date | string
    description?: string | null
    form_services?: form_servicesUncheckedCreateNestedManyWithoutServicesInput
    frequencies?: frequenciesUncheckedCreateNestedManyWithoutServicesInput
  }

  export type servicesCreateOrConnectWithoutColaborator_servicesInput = {
    where: servicesWhereUniqueInput
    create: XOR<servicesCreateWithoutColaborator_servicesInput, servicesUncheckedCreateWithoutColaborator_servicesInput>
  }

  export type frequenciesCreateWithoutColaborator_servicesInput = {
    frequency: string
    created_at?: Date | string
    updated_at?: Date | string
    value?: number | null
    services: servicesCreateNestedOneWithoutFrequenciesInput
  }

  export type frequenciesUncheckedCreateWithoutColaborator_servicesInput = {
    id?: number
    frequency: string
    service_id: number
    created_at?: Date | string
    updated_at?: Date | string
    value?: number | null
  }

  export type frequenciesCreateOrConnectWithoutColaborator_servicesInput = {
    where: frequenciesWhereUniqueInput
    create: XOR<frequenciesCreateWithoutColaborator_servicesInput, frequenciesUncheckedCreateWithoutColaborator_servicesInput>
  }

  export type colaboratorsUpsertWithoutColaborator_servicesInput = {
    update: XOR<colaboratorsUpdateWithoutColaborator_servicesInput, colaboratorsUncheckedUpdateWithoutColaborator_servicesInput>
    create: XOR<colaboratorsCreateWithoutColaborator_servicesInput, colaboratorsUncheckedCreateWithoutColaborator_servicesInput>
    where?: colaboratorsWhereInput
  }

  export type colaboratorsUpdateToOneWithWhereWithoutColaborator_servicesInput = {
    where?: colaboratorsWhereInput
    data: XOR<colaboratorsUpdateWithoutColaborator_servicesInput, colaboratorsUncheckedUpdateWithoutColaborator_servicesInput>
  }

  export type colaboratorsUpdateWithoutColaborator_servicesInput = {
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    company_name?: StringFieldUpdateOperationsInput | string
    registered?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    forms?: formsUpdateOneRequiredWithoutColaboratorsNestedInput
    addresses?: addressesUpdateOneRequiredWithoutColaboratorsNestedInput
  }

  export type colaboratorsUncheckedUpdateWithoutColaborator_servicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    company_name?: StringFieldUpdateOperationsInput | string
    registered?: BoolFieldUpdateOperationsInput | boolean
    form_id?: IntFieldUpdateOperationsInput | number
    address_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type servicesUpsertWithoutColaborator_servicesInput = {
    update: XOR<servicesUpdateWithoutColaborator_servicesInput, servicesUncheckedUpdateWithoutColaborator_servicesInput>
    create: XOR<servicesCreateWithoutColaborator_servicesInput, servicesUncheckedCreateWithoutColaborator_servicesInput>
    where?: servicesWhereInput
  }

  export type servicesUpdateToOneWithWhereWithoutColaborator_servicesInput = {
    where?: servicesWhereInput
    data: XOR<servicesUpdateWithoutColaborator_servicesInput, servicesUncheckedUpdateWithoutColaborator_servicesInput>
  }

  export type servicesUpdateWithoutColaborator_servicesInput = {
    name?: StringFieldUpdateOperationsInput | string
    base_price?: FloatFieldUpdateOperationsInput | number
    colaborator_percent?: FloatFieldUpdateOperationsInput | number
    colaborator_value?: FloatFieldUpdateOperationsInput | number
    repass_percent?: FloatFieldUpdateOperationsInput | number
    repass_value?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    genre?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    form_services?: form_servicesUpdateManyWithoutServicesNestedInput
    frequencies?: frequenciesUpdateManyWithoutServicesNestedInput
  }

  export type servicesUncheckedUpdateWithoutColaborator_servicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    base_price?: FloatFieldUpdateOperationsInput | number
    colaborator_percent?: FloatFieldUpdateOperationsInput | number
    colaborator_value?: FloatFieldUpdateOperationsInput | number
    repass_percent?: FloatFieldUpdateOperationsInput | number
    repass_value?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    genre?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    form_services?: form_servicesUncheckedUpdateManyWithoutServicesNestedInput
    frequencies?: frequenciesUncheckedUpdateManyWithoutServicesNestedInput
  }

  export type frequenciesUpsertWithoutColaborator_servicesInput = {
    update: XOR<frequenciesUpdateWithoutColaborator_servicesInput, frequenciesUncheckedUpdateWithoutColaborator_servicesInput>
    create: XOR<frequenciesCreateWithoutColaborator_servicesInput, frequenciesUncheckedCreateWithoutColaborator_servicesInput>
    where?: frequenciesWhereInput
  }

  export type frequenciesUpdateToOneWithWhereWithoutColaborator_servicesInput = {
    where?: frequenciesWhereInput
    data: XOR<frequenciesUpdateWithoutColaborator_servicesInput, frequenciesUncheckedUpdateWithoutColaborator_servicesInput>
  }

  export type frequenciesUpdateWithoutColaborator_servicesInput = {
    frequency?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
    services?: servicesUpdateOneRequiredWithoutFrequenciesNestedInput
  }

  export type frequenciesUncheckedUpdateWithoutColaborator_servicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    frequency?: StringFieldUpdateOperationsInput | string
    service_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type colaborator_servicesCreateWithoutColaboratorsInput = {
    services: servicesCreateNestedOneWithoutColaborator_servicesInput
    frequencies: frequenciesCreateNestedOneWithoutColaborator_servicesInput
  }

  export type colaborator_servicesUncheckedCreateWithoutColaboratorsInput = {
    id?: number
    service_id: number
    frequency_id: number
  }

  export type colaborator_servicesCreateOrConnectWithoutColaboratorsInput = {
    where: colaborator_servicesWhereUniqueInput
    create: XOR<colaborator_servicesCreateWithoutColaboratorsInput, colaborator_servicesUncheckedCreateWithoutColaboratorsInput>
  }

  export type colaborator_servicesCreateManyColaboratorsInputEnvelope = {
    data: colaborator_servicesCreateManyColaboratorsInput | colaborator_servicesCreateManyColaboratorsInput[]
    skipDuplicates?: boolean
  }

  export type formsCreateWithoutColaboratorsInput = {
    name: string
    identify: string
    created_at?: Date | string
    updated_at?: Date | string
    is_deleted?: boolean | null
    form_services?: form_servicesCreateNestedManyWithoutFormsInput
  }

  export type formsUncheckedCreateWithoutColaboratorsInput = {
    id?: number
    name: string
    identify: string
    created_at?: Date | string
    updated_at?: Date | string
    is_deleted?: boolean | null
    form_services?: form_servicesUncheckedCreateNestedManyWithoutFormsInput
  }

  export type formsCreateOrConnectWithoutColaboratorsInput = {
    where: formsWhereUniqueInput
    create: XOR<formsCreateWithoutColaboratorsInput, formsUncheckedCreateWithoutColaboratorsInput>
  }

  export type addressesCreateWithoutColaboratorsInput = {
    cep: string
    street: string
    neighborhood: string
    city: string
    state: string
    number: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type addressesUncheckedCreateWithoutColaboratorsInput = {
    id?: number
    cep: string
    street: string
    neighborhood: string
    city: string
    state: string
    number: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type addressesCreateOrConnectWithoutColaboratorsInput = {
    where: addressesWhereUniqueInput
    create: XOR<addressesCreateWithoutColaboratorsInput, addressesUncheckedCreateWithoutColaboratorsInput>
  }

  export type colaborator_servicesUpsertWithWhereUniqueWithoutColaboratorsInput = {
    where: colaborator_servicesWhereUniqueInput
    update: XOR<colaborator_servicesUpdateWithoutColaboratorsInput, colaborator_servicesUncheckedUpdateWithoutColaboratorsInput>
    create: XOR<colaborator_servicesCreateWithoutColaboratorsInput, colaborator_servicesUncheckedCreateWithoutColaboratorsInput>
  }

  export type colaborator_servicesUpdateWithWhereUniqueWithoutColaboratorsInput = {
    where: colaborator_servicesWhereUniqueInput
    data: XOR<colaborator_servicesUpdateWithoutColaboratorsInput, colaborator_servicesUncheckedUpdateWithoutColaboratorsInput>
  }

  export type colaborator_servicesUpdateManyWithWhereWithoutColaboratorsInput = {
    where: colaborator_servicesScalarWhereInput
    data: XOR<colaborator_servicesUpdateManyMutationInput, colaborator_servicesUncheckedUpdateManyWithoutColaboratorsInput>
  }

  export type colaborator_servicesScalarWhereInput = {
    AND?: colaborator_servicesScalarWhereInput | colaborator_servicesScalarWhereInput[]
    OR?: colaborator_servicesScalarWhereInput[]
    NOT?: colaborator_servicesScalarWhereInput | colaborator_servicesScalarWhereInput[]
    id?: IntFilter<"colaborator_services"> | number
    colaborator_id?: IntFilter<"colaborator_services"> | number
    service_id?: IntFilter<"colaborator_services"> | number
    frequency_id?: IntFilter<"colaborator_services"> | number
  }

  export type formsUpsertWithoutColaboratorsInput = {
    update: XOR<formsUpdateWithoutColaboratorsInput, formsUncheckedUpdateWithoutColaboratorsInput>
    create: XOR<formsCreateWithoutColaboratorsInput, formsUncheckedCreateWithoutColaboratorsInput>
    where?: formsWhereInput
  }

  export type formsUpdateToOneWithWhereWithoutColaboratorsInput = {
    where?: formsWhereInput
    data: XOR<formsUpdateWithoutColaboratorsInput, formsUncheckedUpdateWithoutColaboratorsInput>
  }

  export type formsUpdateWithoutColaboratorsInput = {
    name?: StringFieldUpdateOperationsInput | string
    identify?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    form_services?: form_servicesUpdateManyWithoutFormsNestedInput
  }

  export type formsUncheckedUpdateWithoutColaboratorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    identify?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    form_services?: form_servicesUncheckedUpdateManyWithoutFormsNestedInput
  }

  export type addressesUpsertWithoutColaboratorsInput = {
    update: XOR<addressesUpdateWithoutColaboratorsInput, addressesUncheckedUpdateWithoutColaboratorsInput>
    create: XOR<addressesCreateWithoutColaboratorsInput, addressesUncheckedCreateWithoutColaboratorsInput>
    where?: addressesWhereInput
  }

  export type addressesUpdateToOneWithWhereWithoutColaboratorsInput = {
    where?: addressesWhereInput
    data: XOR<addressesUpdateWithoutColaboratorsInput, addressesUncheckedUpdateWithoutColaboratorsInput>
  }

  export type addressesUpdateWithoutColaboratorsInput = {
    cep?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type addressesUncheckedUpdateWithoutColaboratorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    cep?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type formsCreateWithoutForm_servicesInput = {
    name: string
    identify: string
    created_at?: Date | string
    updated_at?: Date | string
    is_deleted?: boolean | null
    colaborators?: colaboratorsCreateNestedManyWithoutFormsInput
  }

  export type formsUncheckedCreateWithoutForm_servicesInput = {
    id?: number
    name: string
    identify: string
    created_at?: Date | string
    updated_at?: Date | string
    is_deleted?: boolean | null
    colaborators?: colaboratorsUncheckedCreateNestedManyWithoutFormsInput
  }

  export type formsCreateOrConnectWithoutForm_servicesInput = {
    where: formsWhereUniqueInput
    create: XOR<formsCreateWithoutForm_servicesInput, formsUncheckedCreateWithoutForm_servicesInput>
  }

  export type servicesCreateWithoutForm_servicesInput = {
    name: string
    base_price: number
    colaborator_percent: number
    colaborator_value: number
    repass_percent: number
    repass_value: number
    profit: number
    genre: string
    created_at?: Date | string
    updated_at?: Date | string
    description?: string | null
    colaborator_services?: colaborator_servicesCreateNestedManyWithoutServicesInput
    frequencies?: frequenciesCreateNestedManyWithoutServicesInput
  }

  export type servicesUncheckedCreateWithoutForm_servicesInput = {
    id?: number
    name: string
    base_price: number
    colaborator_percent: number
    colaborator_value: number
    repass_percent: number
    repass_value: number
    profit: number
    genre: string
    created_at?: Date | string
    updated_at?: Date | string
    description?: string | null
    colaborator_services?: colaborator_servicesUncheckedCreateNestedManyWithoutServicesInput
    frequencies?: frequenciesUncheckedCreateNestedManyWithoutServicesInput
  }

  export type servicesCreateOrConnectWithoutForm_servicesInput = {
    where: servicesWhereUniqueInput
    create: XOR<servicesCreateWithoutForm_servicesInput, servicesUncheckedCreateWithoutForm_servicesInput>
  }

  export type formsUpsertWithoutForm_servicesInput = {
    update: XOR<formsUpdateWithoutForm_servicesInput, formsUncheckedUpdateWithoutForm_servicesInput>
    create: XOR<formsCreateWithoutForm_servicesInput, formsUncheckedCreateWithoutForm_servicesInput>
    where?: formsWhereInput
  }

  export type formsUpdateToOneWithWhereWithoutForm_servicesInput = {
    where?: formsWhereInput
    data: XOR<formsUpdateWithoutForm_servicesInput, formsUncheckedUpdateWithoutForm_servicesInput>
  }

  export type formsUpdateWithoutForm_servicesInput = {
    name?: StringFieldUpdateOperationsInput | string
    identify?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    colaborators?: colaboratorsUpdateManyWithoutFormsNestedInput
  }

  export type formsUncheckedUpdateWithoutForm_servicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    identify?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    colaborators?: colaboratorsUncheckedUpdateManyWithoutFormsNestedInput
  }

  export type servicesUpsertWithoutForm_servicesInput = {
    update: XOR<servicesUpdateWithoutForm_servicesInput, servicesUncheckedUpdateWithoutForm_servicesInput>
    create: XOR<servicesCreateWithoutForm_servicesInput, servicesUncheckedCreateWithoutForm_servicesInput>
    where?: servicesWhereInput
  }

  export type servicesUpdateToOneWithWhereWithoutForm_servicesInput = {
    where?: servicesWhereInput
    data: XOR<servicesUpdateWithoutForm_servicesInput, servicesUncheckedUpdateWithoutForm_servicesInput>
  }

  export type servicesUpdateWithoutForm_servicesInput = {
    name?: StringFieldUpdateOperationsInput | string
    base_price?: FloatFieldUpdateOperationsInput | number
    colaborator_percent?: FloatFieldUpdateOperationsInput | number
    colaborator_value?: FloatFieldUpdateOperationsInput | number
    repass_percent?: FloatFieldUpdateOperationsInput | number
    repass_value?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    genre?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    colaborator_services?: colaborator_servicesUpdateManyWithoutServicesNestedInput
    frequencies?: frequenciesUpdateManyWithoutServicesNestedInput
  }

  export type servicesUncheckedUpdateWithoutForm_servicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    base_price?: FloatFieldUpdateOperationsInput | number
    colaborator_percent?: FloatFieldUpdateOperationsInput | number
    colaborator_value?: FloatFieldUpdateOperationsInput | number
    repass_percent?: FloatFieldUpdateOperationsInput | number
    repass_value?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    genre?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    colaborator_services?: colaborator_servicesUncheckedUpdateManyWithoutServicesNestedInput
    frequencies?: frequenciesUncheckedUpdateManyWithoutServicesNestedInput
  }

  export type colaboratorsCreateWithoutFormsInput = {
    name: string
    cpf: string
    genre: string
    email: string
    tel: string
    birthday: string
    company_name: string
    registered?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    colaborator_services?: colaborator_servicesCreateNestedManyWithoutColaboratorsInput
    addresses: addressesCreateNestedOneWithoutColaboratorsInput
  }

  export type colaboratorsUncheckedCreateWithoutFormsInput = {
    id?: number
    name: string
    cpf: string
    genre: string
    email: string
    tel: string
    birthday: string
    company_name: string
    registered?: boolean
    address_id: number
    created_at?: Date | string
    updated_at?: Date | string
    colaborator_services?: colaborator_servicesUncheckedCreateNestedManyWithoutColaboratorsInput
  }

  export type colaboratorsCreateOrConnectWithoutFormsInput = {
    where: colaboratorsWhereUniqueInput
    create: XOR<colaboratorsCreateWithoutFormsInput, colaboratorsUncheckedCreateWithoutFormsInput>
  }

  export type colaboratorsCreateManyFormsInputEnvelope = {
    data: colaboratorsCreateManyFormsInput | colaboratorsCreateManyFormsInput[]
    skipDuplicates?: boolean
  }

  export type form_servicesCreateWithoutFormsInput = {
    services: servicesCreateNestedOneWithoutForm_servicesInput
  }

  export type form_servicesUncheckedCreateWithoutFormsInput = {
    id?: number
    service_id: number
  }

  export type form_servicesCreateOrConnectWithoutFormsInput = {
    where: form_servicesWhereUniqueInput
    create: XOR<form_servicesCreateWithoutFormsInput, form_servicesUncheckedCreateWithoutFormsInput>
  }

  export type form_servicesCreateManyFormsInputEnvelope = {
    data: form_servicesCreateManyFormsInput | form_servicesCreateManyFormsInput[]
    skipDuplicates?: boolean
  }

  export type colaboratorsUpsertWithWhereUniqueWithoutFormsInput = {
    where: colaboratorsWhereUniqueInput
    update: XOR<colaboratorsUpdateWithoutFormsInput, colaboratorsUncheckedUpdateWithoutFormsInput>
    create: XOR<colaboratorsCreateWithoutFormsInput, colaboratorsUncheckedCreateWithoutFormsInput>
  }

  export type colaboratorsUpdateWithWhereUniqueWithoutFormsInput = {
    where: colaboratorsWhereUniqueInput
    data: XOR<colaboratorsUpdateWithoutFormsInput, colaboratorsUncheckedUpdateWithoutFormsInput>
  }

  export type colaboratorsUpdateManyWithWhereWithoutFormsInput = {
    where: colaboratorsScalarWhereInput
    data: XOR<colaboratorsUpdateManyMutationInput, colaboratorsUncheckedUpdateManyWithoutFormsInput>
  }

  export type form_servicesUpsertWithWhereUniqueWithoutFormsInput = {
    where: form_servicesWhereUniqueInput
    update: XOR<form_servicesUpdateWithoutFormsInput, form_servicesUncheckedUpdateWithoutFormsInput>
    create: XOR<form_servicesCreateWithoutFormsInput, form_servicesUncheckedCreateWithoutFormsInput>
  }

  export type form_servicesUpdateWithWhereUniqueWithoutFormsInput = {
    where: form_servicesWhereUniqueInput
    data: XOR<form_servicesUpdateWithoutFormsInput, form_servicesUncheckedUpdateWithoutFormsInput>
  }

  export type form_servicesUpdateManyWithWhereWithoutFormsInput = {
    where: form_servicesScalarWhereInput
    data: XOR<form_servicesUpdateManyMutationInput, form_servicesUncheckedUpdateManyWithoutFormsInput>
  }

  export type form_servicesScalarWhereInput = {
    AND?: form_servicesScalarWhereInput | form_servicesScalarWhereInput[]
    OR?: form_servicesScalarWhereInput[]
    NOT?: form_servicesScalarWhereInput | form_servicesScalarWhereInput[]
    id?: IntFilter<"form_services"> | number
    form_id?: IntFilter<"form_services"> | number
    service_id?: IntFilter<"form_services"> | number
  }

  export type colaborator_servicesCreateWithoutFrequenciesInput = {
    colaborators: colaboratorsCreateNestedOneWithoutColaborator_servicesInput
    services: servicesCreateNestedOneWithoutColaborator_servicesInput
  }

  export type colaborator_servicesUncheckedCreateWithoutFrequenciesInput = {
    id?: number
    colaborator_id: number
    service_id: number
  }

  export type colaborator_servicesCreateOrConnectWithoutFrequenciesInput = {
    where: colaborator_servicesWhereUniqueInput
    create: XOR<colaborator_servicesCreateWithoutFrequenciesInput, colaborator_servicesUncheckedCreateWithoutFrequenciesInput>
  }

  export type colaborator_servicesCreateManyFrequenciesInputEnvelope = {
    data: colaborator_servicesCreateManyFrequenciesInput | colaborator_servicesCreateManyFrequenciesInput[]
    skipDuplicates?: boolean
  }

  export type servicesCreateWithoutFrequenciesInput = {
    name: string
    base_price: number
    colaborator_percent: number
    colaborator_value: number
    repass_percent: number
    repass_value: number
    profit: number
    genre: string
    created_at?: Date | string
    updated_at?: Date | string
    description?: string | null
    colaborator_services?: colaborator_servicesCreateNestedManyWithoutServicesInput
    form_services?: form_servicesCreateNestedManyWithoutServicesInput
  }

  export type servicesUncheckedCreateWithoutFrequenciesInput = {
    id?: number
    name: string
    base_price: number
    colaborator_percent: number
    colaborator_value: number
    repass_percent: number
    repass_value: number
    profit: number
    genre: string
    created_at?: Date | string
    updated_at?: Date | string
    description?: string | null
    colaborator_services?: colaborator_servicesUncheckedCreateNestedManyWithoutServicesInput
    form_services?: form_servicesUncheckedCreateNestedManyWithoutServicesInput
  }

  export type servicesCreateOrConnectWithoutFrequenciesInput = {
    where: servicesWhereUniqueInput
    create: XOR<servicesCreateWithoutFrequenciesInput, servicesUncheckedCreateWithoutFrequenciesInput>
  }

  export type colaborator_servicesUpsertWithWhereUniqueWithoutFrequenciesInput = {
    where: colaborator_servicesWhereUniqueInput
    update: XOR<colaborator_servicesUpdateWithoutFrequenciesInput, colaborator_servicesUncheckedUpdateWithoutFrequenciesInput>
    create: XOR<colaborator_servicesCreateWithoutFrequenciesInput, colaborator_servicesUncheckedCreateWithoutFrequenciesInput>
  }

  export type colaborator_servicesUpdateWithWhereUniqueWithoutFrequenciesInput = {
    where: colaborator_servicesWhereUniqueInput
    data: XOR<colaborator_servicesUpdateWithoutFrequenciesInput, colaborator_servicesUncheckedUpdateWithoutFrequenciesInput>
  }

  export type colaborator_servicesUpdateManyWithWhereWithoutFrequenciesInput = {
    where: colaborator_servicesScalarWhereInput
    data: XOR<colaborator_servicesUpdateManyMutationInput, colaborator_servicesUncheckedUpdateManyWithoutFrequenciesInput>
  }

  export type servicesUpsertWithoutFrequenciesInput = {
    update: XOR<servicesUpdateWithoutFrequenciesInput, servicesUncheckedUpdateWithoutFrequenciesInput>
    create: XOR<servicesCreateWithoutFrequenciesInput, servicesUncheckedCreateWithoutFrequenciesInput>
    where?: servicesWhereInput
  }

  export type servicesUpdateToOneWithWhereWithoutFrequenciesInput = {
    where?: servicesWhereInput
    data: XOR<servicesUpdateWithoutFrequenciesInput, servicesUncheckedUpdateWithoutFrequenciesInput>
  }

  export type servicesUpdateWithoutFrequenciesInput = {
    name?: StringFieldUpdateOperationsInput | string
    base_price?: FloatFieldUpdateOperationsInput | number
    colaborator_percent?: FloatFieldUpdateOperationsInput | number
    colaborator_value?: FloatFieldUpdateOperationsInput | number
    repass_percent?: FloatFieldUpdateOperationsInput | number
    repass_value?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    genre?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    colaborator_services?: colaborator_servicesUpdateManyWithoutServicesNestedInput
    form_services?: form_servicesUpdateManyWithoutServicesNestedInput
  }

  export type servicesUncheckedUpdateWithoutFrequenciesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    base_price?: FloatFieldUpdateOperationsInput | number
    colaborator_percent?: FloatFieldUpdateOperationsInput | number
    colaborator_value?: FloatFieldUpdateOperationsInput | number
    repass_percent?: FloatFieldUpdateOperationsInput | number
    repass_value?: FloatFieldUpdateOperationsInput | number
    profit?: FloatFieldUpdateOperationsInput | number
    genre?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    colaborator_services?: colaborator_servicesUncheckedUpdateManyWithoutServicesNestedInput
    form_services?: form_servicesUncheckedUpdateManyWithoutServicesNestedInput
  }

  export type colaborator_servicesCreateWithoutServicesInput = {
    colaborators: colaboratorsCreateNestedOneWithoutColaborator_servicesInput
    frequencies: frequenciesCreateNestedOneWithoutColaborator_servicesInput
  }

  export type colaborator_servicesUncheckedCreateWithoutServicesInput = {
    id?: number
    colaborator_id: number
    frequency_id: number
  }

  export type colaborator_servicesCreateOrConnectWithoutServicesInput = {
    where: colaborator_servicesWhereUniqueInput
    create: XOR<colaborator_servicesCreateWithoutServicesInput, colaborator_servicesUncheckedCreateWithoutServicesInput>
  }

  export type colaborator_servicesCreateManyServicesInputEnvelope = {
    data: colaborator_servicesCreateManyServicesInput | colaborator_servicesCreateManyServicesInput[]
    skipDuplicates?: boolean
  }

  export type form_servicesCreateWithoutServicesInput = {
    forms: formsCreateNestedOneWithoutForm_servicesInput
  }

  export type form_servicesUncheckedCreateWithoutServicesInput = {
    id?: number
    form_id: number
  }

  export type form_servicesCreateOrConnectWithoutServicesInput = {
    where: form_servicesWhereUniqueInput
    create: XOR<form_servicesCreateWithoutServicesInput, form_servicesUncheckedCreateWithoutServicesInput>
  }

  export type form_servicesCreateManyServicesInputEnvelope = {
    data: form_servicesCreateManyServicesInput | form_servicesCreateManyServicesInput[]
    skipDuplicates?: boolean
  }

  export type frequenciesCreateWithoutServicesInput = {
    frequency: string
    created_at?: Date | string
    updated_at?: Date | string
    value?: number | null
    colaborator_services?: colaborator_servicesCreateNestedManyWithoutFrequenciesInput
  }

  export type frequenciesUncheckedCreateWithoutServicesInput = {
    id?: number
    frequency: string
    created_at?: Date | string
    updated_at?: Date | string
    value?: number | null
    colaborator_services?: colaborator_servicesUncheckedCreateNestedManyWithoutFrequenciesInput
  }

  export type frequenciesCreateOrConnectWithoutServicesInput = {
    where: frequenciesWhereUniqueInput
    create: XOR<frequenciesCreateWithoutServicesInput, frequenciesUncheckedCreateWithoutServicesInput>
  }

  export type frequenciesCreateManyServicesInputEnvelope = {
    data: frequenciesCreateManyServicesInput | frequenciesCreateManyServicesInput[]
    skipDuplicates?: boolean
  }

  export type colaborator_servicesUpsertWithWhereUniqueWithoutServicesInput = {
    where: colaborator_servicesWhereUniqueInput
    update: XOR<colaborator_servicesUpdateWithoutServicesInput, colaborator_servicesUncheckedUpdateWithoutServicesInput>
    create: XOR<colaborator_servicesCreateWithoutServicesInput, colaborator_servicesUncheckedCreateWithoutServicesInput>
  }

  export type colaborator_servicesUpdateWithWhereUniqueWithoutServicesInput = {
    where: colaborator_servicesWhereUniqueInput
    data: XOR<colaborator_servicesUpdateWithoutServicesInput, colaborator_servicesUncheckedUpdateWithoutServicesInput>
  }

  export type colaborator_servicesUpdateManyWithWhereWithoutServicesInput = {
    where: colaborator_servicesScalarWhereInput
    data: XOR<colaborator_servicesUpdateManyMutationInput, colaborator_servicesUncheckedUpdateManyWithoutServicesInput>
  }

  export type form_servicesUpsertWithWhereUniqueWithoutServicesInput = {
    where: form_servicesWhereUniqueInput
    update: XOR<form_servicesUpdateWithoutServicesInput, form_servicesUncheckedUpdateWithoutServicesInput>
    create: XOR<form_servicesCreateWithoutServicesInput, form_servicesUncheckedCreateWithoutServicesInput>
  }

  export type form_servicesUpdateWithWhereUniqueWithoutServicesInput = {
    where: form_servicesWhereUniqueInput
    data: XOR<form_servicesUpdateWithoutServicesInput, form_servicesUncheckedUpdateWithoutServicesInput>
  }

  export type form_servicesUpdateManyWithWhereWithoutServicesInput = {
    where: form_servicesScalarWhereInput
    data: XOR<form_servicesUpdateManyMutationInput, form_servicesUncheckedUpdateManyWithoutServicesInput>
  }

  export type frequenciesUpsertWithWhereUniqueWithoutServicesInput = {
    where: frequenciesWhereUniqueInput
    update: XOR<frequenciesUpdateWithoutServicesInput, frequenciesUncheckedUpdateWithoutServicesInput>
    create: XOR<frequenciesCreateWithoutServicesInput, frequenciesUncheckedCreateWithoutServicesInput>
  }

  export type frequenciesUpdateWithWhereUniqueWithoutServicesInput = {
    where: frequenciesWhereUniqueInput
    data: XOR<frequenciesUpdateWithoutServicesInput, frequenciesUncheckedUpdateWithoutServicesInput>
  }

  export type frequenciesUpdateManyWithWhereWithoutServicesInput = {
    where: frequenciesScalarWhereInput
    data: XOR<frequenciesUpdateManyMutationInput, frequenciesUncheckedUpdateManyWithoutServicesInput>
  }

  export type frequenciesScalarWhereInput = {
    AND?: frequenciesScalarWhereInput | frequenciesScalarWhereInput[]
    OR?: frequenciesScalarWhereInput[]
    NOT?: frequenciesScalarWhereInput | frequenciesScalarWhereInput[]
    id?: IntFilter<"frequencies"> | number
    frequency?: StringFilter<"frequencies"> | string
    service_id?: IntFilter<"frequencies"> | number
    created_at?: DateTimeFilter<"frequencies"> | Date | string
    updated_at?: DateTimeFilter<"frequencies"> | Date | string
    value?: IntNullableFilter<"frequencies"> | number | null
  }

  export type colaboratorsCreateManyAddressesInput = {
    id?: number
    name: string
    cpf: string
    genre: string
    email: string
    tel: string
    birthday: string
    company_name: string
    registered?: boolean
    form_id: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type colaboratorsUpdateWithoutAddressesInput = {
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    company_name?: StringFieldUpdateOperationsInput | string
    registered?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    colaborator_services?: colaborator_servicesUpdateManyWithoutColaboratorsNestedInput
    forms?: formsUpdateOneRequiredWithoutColaboratorsNestedInput
  }

  export type colaboratorsUncheckedUpdateWithoutAddressesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    company_name?: StringFieldUpdateOperationsInput | string
    registered?: BoolFieldUpdateOperationsInput | boolean
    form_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    colaborator_services?: colaborator_servicesUncheckedUpdateManyWithoutColaboratorsNestedInput
  }

  export type colaboratorsUncheckedUpdateManyWithoutAddressesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    company_name?: StringFieldUpdateOperationsInput | string
    registered?: BoolFieldUpdateOperationsInput | boolean
    form_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type colaborator_servicesCreateManyColaboratorsInput = {
    id?: number
    service_id: number
    frequency_id: number
  }

  export type colaborator_servicesUpdateWithoutColaboratorsInput = {
    services?: servicesUpdateOneRequiredWithoutColaborator_servicesNestedInput
    frequencies?: frequenciesUpdateOneRequiredWithoutColaborator_servicesNestedInput
  }

  export type colaborator_servicesUncheckedUpdateWithoutColaboratorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    service_id?: IntFieldUpdateOperationsInput | number
    frequency_id?: IntFieldUpdateOperationsInput | number
  }

  export type colaborator_servicesUncheckedUpdateManyWithoutColaboratorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    service_id?: IntFieldUpdateOperationsInput | number
    frequency_id?: IntFieldUpdateOperationsInput | number
  }

  export type colaboratorsCreateManyFormsInput = {
    id?: number
    name: string
    cpf: string
    genre: string
    email: string
    tel: string
    birthday: string
    company_name: string
    registered?: boolean
    address_id: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type form_servicesCreateManyFormsInput = {
    id?: number
    service_id: number
  }

  export type colaboratorsUpdateWithoutFormsInput = {
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    company_name?: StringFieldUpdateOperationsInput | string
    registered?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    colaborator_services?: colaborator_servicesUpdateManyWithoutColaboratorsNestedInput
    addresses?: addressesUpdateOneRequiredWithoutColaboratorsNestedInput
  }

  export type colaboratorsUncheckedUpdateWithoutFormsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    company_name?: StringFieldUpdateOperationsInput | string
    registered?: BoolFieldUpdateOperationsInput | boolean
    address_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    colaborator_services?: colaborator_servicesUncheckedUpdateManyWithoutColaboratorsNestedInput
  }

  export type colaboratorsUncheckedUpdateManyWithoutFormsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    birthday?: StringFieldUpdateOperationsInput | string
    company_name?: StringFieldUpdateOperationsInput | string
    registered?: BoolFieldUpdateOperationsInput | boolean
    address_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type form_servicesUpdateWithoutFormsInput = {
    services?: servicesUpdateOneRequiredWithoutForm_servicesNestedInput
  }

  export type form_servicesUncheckedUpdateWithoutFormsInput = {
    id?: IntFieldUpdateOperationsInput | number
    service_id?: IntFieldUpdateOperationsInput | number
  }

  export type form_servicesUncheckedUpdateManyWithoutFormsInput = {
    id?: IntFieldUpdateOperationsInput | number
    service_id?: IntFieldUpdateOperationsInput | number
  }

  export type colaborator_servicesCreateManyFrequenciesInput = {
    id?: number
    colaborator_id: number
    service_id: number
  }

  export type colaborator_servicesUpdateWithoutFrequenciesInput = {
    colaborators?: colaboratorsUpdateOneRequiredWithoutColaborator_servicesNestedInput
    services?: servicesUpdateOneRequiredWithoutColaborator_servicesNestedInput
  }

  export type colaborator_servicesUncheckedUpdateWithoutFrequenciesInput = {
    id?: IntFieldUpdateOperationsInput | number
    colaborator_id?: IntFieldUpdateOperationsInput | number
    service_id?: IntFieldUpdateOperationsInput | number
  }

  export type colaborator_servicesUncheckedUpdateManyWithoutFrequenciesInput = {
    id?: IntFieldUpdateOperationsInput | number
    colaborator_id?: IntFieldUpdateOperationsInput | number
    service_id?: IntFieldUpdateOperationsInput | number
  }

  export type colaborator_servicesCreateManyServicesInput = {
    id?: number
    colaborator_id: number
    frequency_id: number
  }

  export type form_servicesCreateManyServicesInput = {
    id?: number
    form_id: number
  }

  export type frequenciesCreateManyServicesInput = {
    id?: number
    frequency: string
    created_at?: Date | string
    updated_at?: Date | string
    value?: number | null
  }

  export type colaborator_servicesUpdateWithoutServicesInput = {
    colaborators?: colaboratorsUpdateOneRequiredWithoutColaborator_servicesNestedInput
    frequencies?: frequenciesUpdateOneRequiredWithoutColaborator_servicesNestedInput
  }

  export type colaborator_servicesUncheckedUpdateWithoutServicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    colaborator_id?: IntFieldUpdateOperationsInput | number
    frequency_id?: IntFieldUpdateOperationsInput | number
  }

  export type colaborator_servicesUncheckedUpdateManyWithoutServicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    colaborator_id?: IntFieldUpdateOperationsInput | number
    frequency_id?: IntFieldUpdateOperationsInput | number
  }

  export type form_servicesUpdateWithoutServicesInput = {
    forms?: formsUpdateOneRequiredWithoutForm_servicesNestedInput
  }

  export type form_servicesUncheckedUpdateWithoutServicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    form_id?: IntFieldUpdateOperationsInput | number
  }

  export type form_servicesUncheckedUpdateManyWithoutServicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    form_id?: IntFieldUpdateOperationsInput | number
  }

  export type frequenciesUpdateWithoutServicesInput = {
    frequency?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
    colaborator_services?: colaborator_servicesUpdateManyWithoutFrequenciesNestedInput
  }

  export type frequenciesUncheckedUpdateWithoutServicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    frequency?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
    colaborator_services?: colaborator_servicesUncheckedUpdateManyWithoutFrequenciesNestedInput
  }

  export type frequenciesUncheckedUpdateManyWithoutServicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    frequency?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AddressesCountOutputTypeDefaultArgs instead
     */
    export type AddressesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AddressesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ColaboratorsCountOutputTypeDefaultArgs instead
     */
    export type ColaboratorsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ColaboratorsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FormsCountOutputTypeDefaultArgs instead
     */
    export type FormsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FormsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FrequenciesCountOutputTypeDefaultArgs instead
     */
    export type FrequenciesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FrequenciesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServicesCountOutputTypeDefaultArgs instead
     */
    export type ServicesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServicesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use addressesDefaultArgs instead
     */
    export type addressesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = addressesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use colaborator_servicesDefaultArgs instead
     */
    export type colaborator_servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = colaborator_servicesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use colaboratorsDefaultArgs instead
     */
    export type colaboratorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = colaboratorsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use form_servicesDefaultArgs instead
     */
    export type form_servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = form_servicesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use formsDefaultArgs instead
     */
    export type formsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = formsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use frequenciesDefaultArgs instead
     */
    export type frequenciesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = frequenciesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use servicesDefaultArgs instead
     */
    export type servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = servicesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usersDefaultArgs instead
     */
    export type usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usersDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}